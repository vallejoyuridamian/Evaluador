unit ExcelTLB;

{ This file contains pascal declarations imported from a type library.
  This file will be written during each import or refresh of the type
  library editor.  Changes to this file will be discarded during the
  refresh process. }

{ Microsoft Excel 8.0 Object Library }
{ Version 1.2 }

{ Conversion log:
  Warning: 'Label' is a reserved word. Label changed to Label_
  Warning: 'Type' is a reserved word. CalloutFormat.Type changed to Type_
  Warning: 'Type' is a reserved word. ColorFormat.Type changed to Type_
  Warning: 'Type' is a reserved word. ShadowFormat.Type changed to Type_
  Warning: 'Type' is a reserved word. FillFormat.Type changed to Type_
  Warning: XlDisplayShapes already exists. XlDisplayShapes.XlDisplayShapes changed to XlDisplayShapes__
  Warning: 'To' is a reserved word. Parameter 'To' in IWindow.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. IWindow.Type changed to Type_
  Warning: 'String' is a reserved word. Parameter 'String' in _Application.DDEExecute changed to 'String_'
  Warning: 'String' is a reserved word. Parameter 'String' in _Application.ExecuteExcel4Macro changed to 'String_'
  Warning: 'Goto' is a reserved word. _Application.Goto changed to Goto_
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Application.InputBox changed to 'Type_'
  Warning: 'Procedure' is a reserved word. Parameter 'Procedure' in _Application.OnKey changed to 'Procedure_'
  Warning: 'Procedure' is a reserved word. Parameter 'Procedure' in _Application.OnRepeat changed to 'Procedure_'
  Warning: 'Procedure' is a reserved word. Parameter 'Procedure' in _Application.OnTime changed to 'Procedure_'
  Warning: 'Procedure' is a reserved word. Parameter 'Procedure' in _Application.OnUndo changed to 'Procedure_'
  Warning: 'Repeat' is a reserved word. _Application.Repeat changed to Repeat_
  Warning: 'And' is a reserved word. IWorksheetFunction.And changed to And_
  Warning: 'Or' is a reserved word. IWorksheetFunction.Or changed to Or_
  Warning: 'Var' is a reserved word. IWorksheetFunction.Var changed to Var_
  Warning: 'String' is a reserved word. Parameter 'String' in IRange.AutoComplete changed to 'String_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IRange.AutoFill changed to 'Type_'
  Warning: 'Function' is a reserved word. Parameter 'Function' in IRange.Consolidate changed to 'Function_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IRange.DataSeries changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IRange.EditionOptions changed to 'Type_'
  Warning: 'End' is a reserved word. IRange.End changed to End_
  Warning: 'End' is a reserved word. Parameter 'End' in IRange.Group changed to 'End_'
  Warning: 'To' is a reserved word. Parameter 'To' in IRange.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IRange.Sort changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IRange.SortSpecial changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IRange.SpecialCells changed to 'Type_'
  Warning: 'Function' is a reserved word. Parameter 'Function' in IRange.Subtotal changed to 'Function_'
  Warning: 'To' is a reserved word. Parameter 'To' in _Chart.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Chart.ApplyDataLabels changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Chart.Axes changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Chart.Paste changed to 'Type_'
  Warning: 'Type' is a reserved word. _Chart.Type changed to Type_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Sheets.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Sheets.FillAcrossSheets changed to 'Type_'
  Warning: 'To' is a reserved word. Parameter 'To' in Sheets.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. IVPageBreak.Type changed to Type_
  Warning: 'Type' is a reserved word. IHPageBreak.Type changed to Type_
  Warning: 'To' is a reserved word. Parameter 'To' in _Worksheet.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. _Worksheet.Type changed to Type_
  Warning: 'String' is a reserved word. Parameter 'String' in _Global.DDEExecute changed to 'String_'
  Warning: 'String' is a reserved word. Parameter 'String' in _Global.ExecuteExcel4Macro changed to 'String_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Workbook.ChangeLink changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Workbook.LinkInfo changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Workbook.LinkSources changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Workbook.OpenLinks changed to 'Type_'
  Warning: 'To' is a reserved word. Parameter 'To' in _Workbook.PrintOut changed to 'To_'
  Warning: 'Procedure' is a reserved word. Parameter 'Procedure' in _Workbook.SetLinkOnData changed to 'Procedure_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in _Workbook.UpdateLink changed to 'Type_'
  Warning: 'To' is a reserved word. Parameter 'To' in ICharts.PrintOut changed to 'To_'
  Warning: 'Function' is a reserved word. IPivotField.Function changed to Function_
  Warning: 'Type' is a reserved word. Parameter 'Type' in IPivotField.AutoShow changed to 'Type_'
  Warning: 'String' is a reserved word. Parameter 'String' in ICharacters.Insert changed to 'String_'
  Warning: 'Record' is a reserved word. ISoundNote.Record changed to Record_
  Warning: 'Object' is a reserved word. _IOLEObject.Object changed to Object_
  Warning: 'To' is a reserved word. Parameter 'To' in IModule.PrintOut changed to 'To_'
  Warning: 'To' is a reserved word. Parameter 'To' in IModules.PrintOut changed to 'To_'
  Warning: 'To' is a reserved word. Parameter 'To' in IDialogSheet.PrintOut changed to 'To_'
  Warning: 'To' is a reserved word. Parameter 'To' in IDialogSheets.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IWorksheets.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IWorksheets.FillAcrossSheets changed to 'Type_'
  Warning: 'To' is a reserved word. Parameter 'To' in IWorksheets.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IFormatConditions.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IFormatCondition.Modify changed to 'Type_'
  Warning: 'Type' is a reserved word. IFormatCondition.Type changed to Type_
  Warning: 'Type' is a reserved word. IParameter.Type changed to Type_
  Warning: 'Type' is a reserved word. Parameter 'Type' in IParameter.SetParam changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IValidation.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IValidation.Modify changed to 'Type_'
  Warning: 'Type' is a reserved word. IValidation.Type changed to Type_
  Warning: 'Type' is a reserved word. IHyperlink.Type changed to Type_
  Warning: 'On' is a reserved word. IFilter.On changed to On_
  Warning: 'Type' is a reserved word. IChartFillFormat.Type changed to Type_
  Warning: 'Type' is a reserved word. IChartColorFormat.Type changed to Type_
  Warning: 'Type' is a reserved word. IAxis.Type changed to Type_
  Warning: 'Type' is a reserved word. IChartGroup.Type changed to Type_
  Warning: 'Type' is a reserved word. Parameter 'Type' in IAxes.Item changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IPoint.ApplyDataLabels changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in ISeries.ApplyDataLabels changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in ISeries.ErrorBar changed to 'Type_'
  Warning: 'Type' is a reserved word. ISeries.Type changed to Type_
  Warning: 'Type' is a reserved word. IDataLabel.Type changed to Type_
  Warning: 'Type' is a reserved word. IDataLabels.Type changed to Type_
  Warning: 'Type' is a reserved word. Parameter 'Type' in ITrendlines.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. ITrendline.Type changed to Type_
  Warning: 'Type' is a reserved word. IShape.Type changed to Type_
  Warning: 'Type' is a reserved word. Parameter 'Type' in IShapes.AddCallout changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IShapes.AddConnector changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IShapes.AddShape changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in IShapes.AddFormControl changed to 'Type_'
  Warning: 'Type' is a reserved word. IShapeRange.Type changed to Type_
  Warning: 'Type' is a reserved word. IConnectorFormat.Type changed to Type_
  Warning: 'Object' is a reserved word. IOLEFormat.Object changed to Object_
  Warning: Parent Interface has a member with name: QueryInterface. Font.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Font.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Font.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Font.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Font.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Font.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Font.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Font.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Window.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Window.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Window.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Window.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Window.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Window.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Window.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Window.Invoke changed to Invoke_
  Warning: 'To' is a reserved word. Parameter 'To' in Window.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. Window.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. Windows.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Windows.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Windows.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Windows.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Windows.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Windows.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Windows.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Windows.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. AppEvents.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. AppEvents.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. AppEvents.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. AppEvents.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. AppEvents.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. AppEvents.GetIDsOfNames changed to GetIDsOfNames_
  Warning: AppEvents.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. AppEvents.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. WorksheetFunction.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. WorksheetFunction.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. WorksheetFunction.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. WorksheetFunction.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. WorksheetFunction.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. WorksheetFunction.GetIDsOfNames changed to GetIDsOfNames_
  Warning: WorksheetFunction.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. WorksheetFunction.Invoke changed to Invoke_
  Warning: 'And' is a reserved word. WorksheetFunction.And changed to And_
  Warning: 'Or' is a reserved word. WorksheetFunction.Or changed to Or_
  Warning: 'Var' is a reserved word. WorksheetFunction.Var changed to Var_
  Warning: Parent Interface has a member with name: QueryInterface. Range.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Range.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Range.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Range.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Range.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Range.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Range.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Range.Invoke changed to Invoke_
  Warning: 'String' is a reserved word. Parameter 'String' in Range.AutoComplete changed to 'String_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Range.AutoFill changed to 'Type_'
  Warning: 'Function' is a reserved word. Parameter 'Function' in Range.Consolidate changed to 'Function_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Range.DataSeries changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Range.EditionOptions changed to 'Type_'
  Warning: 'End' is a reserved word. Range.End changed to End_
  Warning: 'End' is a reserved word. Parameter 'End' in Range.Group changed to 'End_'
  Warning: 'To' is a reserved word. Parameter 'To' in Range.PrintOut changed to 'To_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Range.Sort changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Range.SortSpecial changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Range.SpecialCells changed to 'Type_'
  Warning: 'Function' is a reserved word. Parameter 'Function' in Range.Subtotal changed to 'Function_'
  Warning: Parent Interface has a member with name: QueryInterface. ChartEvents.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartEvents.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartEvents.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartEvents.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartEvents.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartEvents.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartEvents.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartEvents.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. VPageBreak.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. VPageBreak.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. VPageBreak.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. VPageBreak.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. VPageBreak.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. VPageBreak.GetIDsOfNames changed to GetIDsOfNames_
  Warning: VPageBreak.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. VPageBreak.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. VPageBreak.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. HPageBreak.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. HPageBreak.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. HPageBreak.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. HPageBreak.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. HPageBreak.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. HPageBreak.GetIDsOfNames changed to GetIDsOfNames_
  Warning: HPageBreak.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. HPageBreak.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. HPageBreak.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. HPageBreaks.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. HPageBreaks.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. HPageBreaks.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. HPageBreaks.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. HPageBreaks.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. HPageBreaks.GetIDsOfNames changed to GetIDsOfNames_
  Warning: HPageBreaks.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. HPageBreaks.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. VPageBreaks.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. VPageBreaks.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. VPageBreaks.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. VPageBreaks.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. VPageBreaks.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. VPageBreaks.GetIDsOfNames changed to GetIDsOfNames_
  Warning: VPageBreaks.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. VPageBreaks.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. RecentFile.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. RecentFile.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. RecentFile.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. RecentFile.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. RecentFile.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. RecentFile.GetIDsOfNames changed to GetIDsOfNames_
  Warning: RecentFile.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. RecentFile.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. RecentFiles.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. RecentFiles.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. RecentFiles.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. RecentFiles.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. RecentFiles.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. RecentFiles.GetIDsOfNames changed to GetIDsOfNames_
  Warning: RecentFiles.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. RecentFiles.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DocEvents.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DocEvents.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DocEvents.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DocEvents.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DocEvents.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DocEvents.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DocEvents.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DocEvents.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Style.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Style.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Style.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Style.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Style.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Style.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Style.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Style.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Styles.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Styles.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Styles.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Styles.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Styles.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Styles.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Styles.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Styles.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Borders.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Borders.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Borders.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Borders.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Borders.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Borders.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Borders.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Borders.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. AddIn.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. AddIn.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. AddIn.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. AddIn.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. AddIn.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. AddIn.GetIDsOfNames changed to GetIDsOfNames_
  Warning: AddIn.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. AddIn.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. AddIns.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. AddIns.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. AddIns.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. AddIns.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. AddIns.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. AddIns.GetIDsOfNames changed to GetIDsOfNames_
  Warning: AddIns.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. AddIns.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Toolbar.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Toolbar.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Toolbar.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Toolbar.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Toolbar.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Toolbar.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Toolbar.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Toolbar.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Toolbars.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Toolbars.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Toolbars.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Toolbars.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Toolbars.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Toolbars.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Toolbars.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Toolbars.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ToolbarButton.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ToolbarButton.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ToolbarButton.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ToolbarButton.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ToolbarButton.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ToolbarButton.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ToolbarButton.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ToolbarButton.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ToolbarButtons.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ToolbarButtons.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ToolbarButtons.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ToolbarButtons.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ToolbarButtons.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ToolbarButtons.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ToolbarButtons.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ToolbarButtons.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Areas.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Areas.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Areas.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Areas.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Areas.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Areas.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Areas.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Areas.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. WorkbookEvents.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. WorkbookEvents.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. WorkbookEvents.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. WorkbookEvents.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. WorkbookEvents.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. WorkbookEvents.GetIDsOfNames changed to GetIDsOfNames_
  Warning: WorkbookEvents.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. WorkbookEvents.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. MenuBars.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. MenuBars.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. MenuBars.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. MenuBars.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. MenuBars.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. MenuBars.GetIDsOfNames changed to GetIDsOfNames_
  Warning: MenuBars.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. MenuBars.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. MenuBar.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. MenuBar.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. MenuBar.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. MenuBar.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. MenuBar.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. MenuBar.GetIDsOfNames changed to GetIDsOfNames_
  Warning: MenuBar.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. MenuBar.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Menus.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Menus.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Menus.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Menus.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Menus.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Menus.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Menus.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Menus.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Menu.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Menu.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Menu.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Menu.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Menu.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Menu.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Menu.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Menu.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. MenuItems.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. MenuItems.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. MenuItems.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. MenuItems.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. MenuItems.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. MenuItems.GetIDsOfNames changed to GetIDsOfNames_
  Warning: MenuItems.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. MenuItems.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. MenuItem.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. MenuItem.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. MenuItem.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. MenuItem.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. MenuItem.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. MenuItem.GetIDsOfNames changed to GetIDsOfNames_
  Warning: MenuItem.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. MenuItem.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Charts.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Charts.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Charts.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Charts.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Charts.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Charts.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Charts.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Charts.Invoke changed to Invoke_
  Warning: 'To' is a reserved word. Parameter 'To' in Charts.PrintOut changed to 'To_'
  Warning: Parent Interface has a member with name: QueryInterface. DrawingObjects.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DrawingObjects.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DrawingObjects.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DrawingObjects.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DrawingObjects.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DrawingObjects.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DrawingObjects.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DrawingObjects.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotCache.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotCache.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotCache.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotCache.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotCache.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotCache.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotCache.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotCache.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotCaches.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotCaches.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotCaches.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotCaches.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotCaches.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotCaches.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotCaches.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotCaches.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotFormula.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotFormula.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotFormula.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotFormula.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotFormula.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotFormula.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotFormula.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotFormula.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotFormulas.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotFormulas.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotFormulas.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotFormulas.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotFormulas.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotFormulas.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotFormulas.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotFormulas.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotTable.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotTable.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotTable.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotTable.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotTable.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotTable.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotTable.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotTable.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotTables.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotTables.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotTables.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotTables.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotTables.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotTables.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotTables.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotTables.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotField.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotField.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotField.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotField.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotField.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotField.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotField.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotField.Invoke changed to Invoke_
  Warning: 'Function' is a reserved word. PivotField.Function changed to Function_
  Warning: 'Type' is a reserved word. Parameter 'Type' in PivotField.AutoShow changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. PivotFields.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotFields.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotFields.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotFields.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotFields.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotFields.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotFields.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotFields.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. CalculatedFields.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. CalculatedFields.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. CalculatedFields.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. CalculatedFields.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. CalculatedFields.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. CalculatedFields.GetIDsOfNames changed to GetIDsOfNames_
  Warning: CalculatedFields.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. CalculatedFields.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotItem.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotItem.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotItem.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotItem.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotItem.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotItem.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotItem.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotItem.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PivotItems.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PivotItems.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PivotItems.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PivotItems.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PivotItems.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PivotItems.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PivotItems.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PivotItems.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. CalculatedItems.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. CalculatedItems.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. CalculatedItems.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. CalculatedItems.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. CalculatedItems.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. CalculatedItems.GetIDsOfNames changed to GetIDsOfNames_
  Warning: CalculatedItems.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. CalculatedItems.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Characters.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Characters.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Characters.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Characters.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Characters.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Characters.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Characters.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Characters.Invoke changed to Invoke_
  Warning: 'String' is a reserved word. Parameter 'String' in Characters.Insert changed to 'String_'
  Warning: Parent Interface has a member with name: QueryInterface. Dialogs.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Dialogs.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Dialogs.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Dialogs.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Dialogs.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Dialogs.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Dialogs.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Dialogs.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Dialog.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Dialog.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Dialog.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Dialog.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Dialog.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Dialog.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Dialog.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Dialog.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. SoundNote.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. SoundNote.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. SoundNote.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. SoundNote.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. SoundNote.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. SoundNote.GetIDsOfNames changed to GetIDsOfNames_
  Warning: SoundNote.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. SoundNote.Invoke changed to Invoke_
  Warning: 'Record' is a reserved word. SoundNote.Record changed to Record_
  Warning: Parent Interface has a member with name: QueryInterface. Button.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Button.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Button.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Button.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Button.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Button.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Button.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Button.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Buttons.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Buttons.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Buttons.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Buttons.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Buttons.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Buttons.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Buttons.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Buttons.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. CheckBox.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. CheckBox.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. CheckBox.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. CheckBox.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. CheckBox.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. CheckBox.GetIDsOfNames changed to GetIDsOfNames_
  Warning: CheckBox.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. CheckBox.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. CheckBoxes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. CheckBoxes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. CheckBoxes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. CheckBoxes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. CheckBoxes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. CheckBoxes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: CheckBoxes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. CheckBoxes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. OptionButton.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. OptionButton.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. OptionButton.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. OptionButton.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. OptionButton.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. OptionButton.GetIDsOfNames changed to GetIDsOfNames_
  Warning: OptionButton.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. OptionButton.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. OptionButtons.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. OptionButtons.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. OptionButtons.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. OptionButtons.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. OptionButtons.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. OptionButtons.GetIDsOfNames changed to GetIDsOfNames_
  Warning: OptionButtons.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. OptionButtons.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. EditBox.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. EditBox.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. EditBox.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. EditBox.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. EditBox.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. EditBox.GetIDsOfNames changed to GetIDsOfNames_
  Warning: EditBox.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. EditBox.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. EditBoxes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. EditBoxes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. EditBoxes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. EditBoxes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. EditBoxes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. EditBoxes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: EditBoxes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. EditBoxes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ScrollBar.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ScrollBar.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ScrollBar.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ScrollBar.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ScrollBar.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ScrollBar.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ScrollBar.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ScrollBar.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ScrollBars.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ScrollBars.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ScrollBars.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ScrollBars.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ScrollBars.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ScrollBars.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ScrollBars.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ScrollBars.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ListBox.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ListBox.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ListBox.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ListBox.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ListBox.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ListBox.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ListBox.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ListBox.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ListBoxes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ListBoxes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ListBoxes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ListBoxes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ListBoxes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ListBoxes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ListBoxes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ListBoxes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. GroupBox.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. GroupBox.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. GroupBox.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. GroupBox.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. GroupBox.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. GroupBox.GetIDsOfNames changed to GetIDsOfNames_
  Warning: GroupBox.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. GroupBox.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. GroupBoxes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. GroupBoxes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. GroupBoxes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. GroupBoxes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. GroupBoxes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. GroupBoxes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: GroupBoxes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. GroupBoxes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DropDown.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DropDown.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DropDown.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DropDown.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DropDown.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DropDown.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DropDown.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DropDown.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DropDowns.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DropDowns.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DropDowns.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DropDowns.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DropDowns.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DropDowns.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DropDowns.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DropDowns.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Spinner.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Spinner.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Spinner.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Spinner.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Spinner.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Spinner.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Spinner.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Spinner.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Spinners.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Spinners.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Spinners.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Spinners.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Spinners.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Spinners.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Spinners.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Spinners.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DialogFrame.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DialogFrame.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DialogFrame.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DialogFrame.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DialogFrame.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DialogFrame.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DialogFrame.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DialogFrame.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Label_.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Label_.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Label_.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Label_.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Label_.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Label_.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Label_.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Label_.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Labels.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Labels.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Labels.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Labels.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Labels.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Labels.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Labels.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Labels.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Panes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Panes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Panes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Panes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Panes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Panes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Panes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Panes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Pane.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Pane.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Pane.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Pane.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Pane.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Pane.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Pane.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Pane.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Scenarios.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Scenarios.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Scenarios.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Scenarios.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Scenarios.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Scenarios.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Scenarios.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Scenarios.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Scenario.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Scenario.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Scenario.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Scenario.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Scenario.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Scenario.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Scenario.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Scenario.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. GroupObject.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. GroupObject.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. GroupObject.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. GroupObject.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. GroupObject.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. GroupObject.GetIDsOfNames changed to GetIDsOfNames_
  Warning: GroupObject.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. GroupObject.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. GroupObjects.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. GroupObjects.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. GroupObjects.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. GroupObjects.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. GroupObjects.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. GroupObjects.GetIDsOfNames changed to GetIDsOfNames_
  Warning: GroupObjects.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. GroupObjects.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Line.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Line.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Line.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Line.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Line.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Line.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Line.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Line.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Lines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Lines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Lines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Lines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Lines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Lines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Lines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Lines.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Rectangle.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Rectangle.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Rectangle.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Rectangle.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Rectangle.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Rectangle.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Rectangle.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Rectangle.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Rectangles.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Rectangles.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Rectangles.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Rectangles.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Rectangles.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Rectangles.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Rectangles.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Rectangles.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Oval.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Oval.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Oval.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Oval.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Oval.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Oval.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Oval.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Oval.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Ovals.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Ovals.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Ovals.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Ovals.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Ovals.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Ovals.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Ovals.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Ovals.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Arc.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Arc.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Arc.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Arc.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Arc.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Arc.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Arc.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Arc.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Arcs.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Arcs.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Arcs.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Arcs.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Arcs.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Arcs.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Arcs.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Arcs.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. OLEObjectEvents.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. OLEObjectEvents.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. OLEObjectEvents.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. OLEObjectEvents.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. OLEObjectEvents.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. OLEObjectEvents.GetIDsOfNames changed to GetIDsOfNames_
  Warning: OLEObjectEvents.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. OLEObjectEvents.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. _OLEObject.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. _OLEObject.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. _OLEObject.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. _OLEObject.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. _OLEObject.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. _OLEObject.GetIDsOfNames changed to GetIDsOfNames_
  Warning: _OLEObject.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. _OLEObject.Invoke changed to Invoke_
  Warning: 'Object' is a reserved word. _OLEObject.Object changed to Object_
  Warning: Parent Interface has a member with name: QueryInterface. OLEObjects.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. OLEObjects.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. OLEObjects.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. OLEObjects.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. OLEObjects.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. OLEObjects.GetIDsOfNames changed to GetIDsOfNames_
  Warning: OLEObjects.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. OLEObjects.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. TextBox.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. TextBox.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. TextBox.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. TextBox.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. TextBox.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. TextBox.GetIDsOfNames changed to GetIDsOfNames_
  Warning: TextBox.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. TextBox.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. TextBoxes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. TextBoxes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. TextBoxes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. TextBoxes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. TextBoxes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. TextBoxes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: TextBoxes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. TextBoxes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Picture.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Picture.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Picture.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Picture.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Picture.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Picture.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Picture.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Picture.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Pictures.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Pictures.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Pictures.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Pictures.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Pictures.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Pictures.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Pictures.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Pictures.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Drawing.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Drawing.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Drawing.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Drawing.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Drawing.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Drawing.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Drawing.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Drawing.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Drawings.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Drawings.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Drawings.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Drawings.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Drawings.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Drawings.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Drawings.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Drawings.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. RoutingSlip.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. RoutingSlip.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. RoutingSlip.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. RoutingSlip.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. RoutingSlip.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. RoutingSlip.GetIDsOfNames changed to GetIDsOfNames_
  Warning: RoutingSlip.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. RoutingSlip.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Outline.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Outline.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Outline.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Outline.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Outline.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Outline.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Outline.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Outline.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Module.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Module.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Module.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Module.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Module.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Module.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Module.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Module.Invoke changed to Invoke_
  Warning: 'To' is a reserved word. Parameter 'To' in Module.PrintOut changed to 'To_'
  Warning: Parent Interface has a member with name: QueryInterface. Modules.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Modules.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Modules.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Modules.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Modules.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Modules.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Modules.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Modules.Invoke changed to Invoke_
  Warning: 'To' is a reserved word. Parameter 'To' in Modules.PrintOut changed to 'To_'
  Warning: Parent Interface has a member with name: QueryInterface. DialogSheet.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DialogSheet.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DialogSheet.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DialogSheet.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DialogSheet.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DialogSheet.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DialogSheet.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DialogSheet.Invoke changed to Invoke_
  Warning: 'To' is a reserved word. Parameter 'To' in DialogSheet.PrintOut changed to 'To_'
  Warning: Parent Interface has a member with name: QueryInterface. DialogSheets.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DialogSheets.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DialogSheets.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DialogSheets.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DialogSheets.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DialogSheets.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DialogSheets.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DialogSheets.Invoke changed to Invoke_
  Warning: 'To' is a reserved word. Parameter 'To' in DialogSheets.PrintOut changed to 'To_'
  Warning: Parent Interface has a member with name: QueryInterface. Worksheets.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Worksheets.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Worksheets.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Worksheets.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Worksheets.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Worksheets.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Worksheets.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Worksheets.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Worksheets.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Worksheets.FillAcrossSheets changed to 'Type_'
  Warning: 'To' is a reserved word. Parameter 'To' in Worksheets.PrintOut changed to 'To_'
  Warning: Parent Interface has a member with name: QueryInterface. PageSetup.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PageSetup.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PageSetup.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PageSetup.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PageSetup.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PageSetup.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PageSetup.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PageSetup.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Names.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Names.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Names.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Names.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Names.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Names.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Names.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Names.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Name.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Name.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Name.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Name.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Name.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Name.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Name.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Name.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ChartObject.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartObject.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartObject.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartObject.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartObject.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartObject.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartObject.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartObject.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ChartObjects.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartObjects.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartObjects.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartObjects.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartObjects.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartObjects.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartObjects.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartObjects.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Mailer.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Mailer.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Mailer.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Mailer.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Mailer.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Mailer.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Mailer.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Mailer.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. CustomViews.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. CustomViews.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. CustomViews.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. CustomViews.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. CustomViews.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. CustomViews.GetIDsOfNames changed to GetIDsOfNames_
  Warning: CustomViews.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. CustomViews.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. CustomView.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. CustomView.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. CustomView.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. CustomView.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. CustomView.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. CustomView.GetIDsOfNames changed to GetIDsOfNames_
  Warning: CustomView.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. CustomView.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. FormatConditions.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. FormatConditions.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. FormatConditions.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. FormatConditions.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. FormatConditions.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. FormatConditions.GetIDsOfNames changed to GetIDsOfNames_
  Warning: FormatConditions.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. FormatConditions.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in FormatConditions.Add changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. FormatCondition.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. FormatCondition.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. FormatCondition.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. FormatCondition.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. FormatCondition.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. FormatCondition.GetIDsOfNames changed to GetIDsOfNames_
  Warning: FormatCondition.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. FormatCondition.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in FormatCondition.Modify changed to 'Type_'
  Warning: 'Type' is a reserved word. FormatCondition.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. Comments.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Comments.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Comments.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Comments.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Comments.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Comments.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Comments.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Comments.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Comment.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Comment.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Comment.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Comment.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Comment.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Comment.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Comment.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Comment.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. RefreshEvents.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. RefreshEvents.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. RefreshEvents.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. RefreshEvents.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. RefreshEvents.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. RefreshEvents.GetIDsOfNames changed to GetIDsOfNames_
  Warning: RefreshEvents.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. RefreshEvents.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. _QueryTable.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. _QueryTable.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. _QueryTable.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. _QueryTable.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. _QueryTable.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. _QueryTable.GetIDsOfNames changed to GetIDsOfNames_
  Warning: _QueryTable.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. _QueryTable.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. QueryTables.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. QueryTables.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. QueryTables.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. QueryTables.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. QueryTables.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. QueryTables.GetIDsOfNames changed to GetIDsOfNames_
  Warning: QueryTables.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. QueryTables.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Parameter.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Parameter.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Parameter.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Parameter.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Parameter.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Parameter.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Parameter.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Parameter.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter.Type changed to Type_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Parameter.SetParam changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. Parameters.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Parameters.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Parameters.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Parameters.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Parameters.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Parameters.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Parameters.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Parameters.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ODBCError.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ODBCError.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ODBCError.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ODBCError.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ODBCError.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ODBCError.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ODBCError.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ODBCError.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ODBCErrors.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ODBCErrors.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ODBCErrors.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ODBCErrors.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ODBCErrors.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ODBCErrors.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ODBCErrors.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ODBCErrors.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Validation.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Validation.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Validation.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Validation.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Validation.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Validation.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Validation.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Validation.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Validation.Add changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Validation.Modify changed to 'Type_'
  Warning: 'Type' is a reserved word. Validation.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. Hyperlinks.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Hyperlinks.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Hyperlinks.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Hyperlinks.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Hyperlinks.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Hyperlinks.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Hyperlinks.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Hyperlinks.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Hyperlink.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Hyperlink.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Hyperlink.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Hyperlink.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Hyperlink.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Hyperlink.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Hyperlink.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Hyperlink.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Hyperlink.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. AutoFilter.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. AutoFilter.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. AutoFilter.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. AutoFilter.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. AutoFilter.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. AutoFilter.GetIDsOfNames changed to GetIDsOfNames_
  Warning: AutoFilter.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. AutoFilter.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Filters.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Filters.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Filters.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Filters.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Filters.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Filters.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Filters.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Filters.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Filter.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Filter.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Filter.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Filter.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Filter.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Filter.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Filter.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Filter.Invoke changed to Invoke_
  Warning: 'On' is a reserved word. Filter.On changed to On_
  Warning: Parent Interface has a member with name: QueryInterface. AutoCorrect.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. AutoCorrect.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. AutoCorrect.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. AutoCorrect.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. AutoCorrect.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. AutoCorrect.GetIDsOfNames changed to GetIDsOfNames_
  Warning: AutoCorrect.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. AutoCorrect.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Border.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Border.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Border.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Border.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Border.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Border.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Border.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Border.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Interior.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Interior.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Interior.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Interior.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Interior.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Interior.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Interior.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Interior.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ChartFillFormat.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartFillFormat.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartFillFormat.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartFillFormat.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartFillFormat.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartFillFormat.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartFillFormat.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartFillFormat.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. ChartFillFormat.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. ChartColorFormat.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartColorFormat.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartColorFormat.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartColorFormat.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartColorFormat.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartColorFormat.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartColorFormat.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartColorFormat.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. ChartColorFormat.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. Axis.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Axis.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Axis.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Axis.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Axis.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Axis.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Axis.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Axis.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Axis.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. ChartTitle.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartTitle.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartTitle.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartTitle.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartTitle.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartTitle.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartTitle.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartTitle.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. AxisTitle.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. AxisTitle.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. AxisTitle.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. AxisTitle.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. AxisTitle.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. AxisTitle.GetIDsOfNames changed to GetIDsOfNames_
  Warning: AxisTitle.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. AxisTitle.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ChartGroup.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartGroup.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartGroup.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartGroup.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartGroup.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartGroup.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartGroup.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartGroup.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. ChartGroup.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. ChartGroups.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartGroups.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartGroups.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartGroups.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartGroups.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartGroups.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartGroups.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartGroups.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Axes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Axes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Axes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Axes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Axes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Axes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Axes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Axes.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Axes.Item changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. Points.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Points.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Points.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Points.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Points.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Points.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Points.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Points.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Point.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Point.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Point.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Point.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Point.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Point.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Point.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Point.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Point.ApplyDataLabels changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. Series.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Series.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Series.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Series.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Series.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Series.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Series.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Series.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Series.ApplyDataLabels changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Series.ErrorBar changed to 'Type_'
  Warning: 'Type' is a reserved word. Series.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. SeriesCollection.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. SeriesCollection.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. SeriesCollection.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. SeriesCollection.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. SeriesCollection.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. SeriesCollection.GetIDsOfNames changed to GetIDsOfNames_
  Warning: SeriesCollection.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. SeriesCollection.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DataLabel.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DataLabel.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DataLabel.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DataLabel.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DataLabel.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DataLabel.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DataLabel.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DataLabel.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. DataLabel.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. DataLabels.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DataLabels.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DataLabels.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DataLabels.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DataLabels.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DataLabels.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DataLabels.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DataLabels.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. DataLabels.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. LegendEntry.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. LegendEntry.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. LegendEntry.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. LegendEntry.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. LegendEntry.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. LegendEntry.GetIDsOfNames changed to GetIDsOfNames_
  Warning: LegendEntry.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. LegendEntry.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. LegendEntries.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. LegendEntries.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. LegendEntries.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. LegendEntries.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. LegendEntries.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. LegendEntries.GetIDsOfNames changed to GetIDsOfNames_
  Warning: LegendEntries.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. LegendEntries.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. LegendKey.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. LegendKey.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. LegendKey.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. LegendKey.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. LegendKey.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. LegendKey.GetIDsOfNames changed to GetIDsOfNames_
  Warning: LegendKey.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. LegendKey.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Trendlines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Trendlines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Trendlines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Trendlines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Trendlines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Trendlines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Trendlines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Trendlines.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Trendlines.Add changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. Trendline.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Trendline.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Trendline.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Trendline.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Trendline.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Trendline.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Trendline.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Trendline.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Trendline.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. Corners.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Corners.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Corners.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Corners.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Corners.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Corners.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Corners.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Corners.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. SeriesLines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. SeriesLines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. SeriesLines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. SeriesLines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. SeriesLines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. SeriesLines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: SeriesLines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. SeriesLines.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. HiLoLines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. HiLoLines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. HiLoLines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. HiLoLines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. HiLoLines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. HiLoLines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: HiLoLines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. HiLoLines.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Gridlines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Gridlines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Gridlines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Gridlines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Gridlines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Gridlines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Gridlines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Gridlines.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DropLines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DropLines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DropLines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DropLines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DropLines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DropLines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DropLines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DropLines.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. LeaderLines.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. LeaderLines.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. LeaderLines.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. LeaderLines.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. LeaderLines.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. LeaderLines.GetIDsOfNames changed to GetIDsOfNames_
  Warning: LeaderLines.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. LeaderLines.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. UpBars.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. UpBars.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. UpBars.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. UpBars.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. UpBars.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. UpBars.GetIDsOfNames changed to GetIDsOfNames_
  Warning: UpBars.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. UpBars.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DownBars.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DownBars.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DownBars.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DownBars.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DownBars.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DownBars.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DownBars.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DownBars.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Floor.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Floor.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Floor.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Floor.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Floor.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Floor.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Floor.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Floor.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Walls.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Walls.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Walls.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Walls.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Walls.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Walls.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Walls.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Walls.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. TickLabels.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. TickLabels.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. TickLabels.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. TickLabels.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. TickLabels.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. TickLabels.GetIDsOfNames changed to GetIDsOfNames_
  Warning: TickLabels.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. TickLabels.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. PlotArea.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. PlotArea.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. PlotArea.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. PlotArea.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. PlotArea.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. PlotArea.GetIDsOfNames changed to GetIDsOfNames_
  Warning: PlotArea.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. PlotArea.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ChartArea.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ChartArea.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ChartArea.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ChartArea.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ChartArea.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ChartArea.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ChartArea.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ChartArea.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Legend.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Legend.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Legend.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Legend.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Legend.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Legend.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Legend.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Legend.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ErrorBars.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ErrorBars.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ErrorBars.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ErrorBars.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ErrorBars.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ErrorBars.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ErrorBars.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ErrorBars.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. DataTable.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. DataTable.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. DataTable.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. DataTable.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. DataTable.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. DataTable.GetIDsOfNames changed to GetIDsOfNames_
  Warning: DataTable.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. DataTable.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Phonetic.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Phonetic.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Phonetic.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Phonetic.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Phonetic.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Phonetic.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Phonetic.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Phonetic.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. Shape.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Shape.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Shape.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Shape.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Shape.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Shape.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Shape.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Shape.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Shape.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. Shapes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. Shapes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. Shapes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. Shapes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. Shapes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. Shapes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: Shapes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. Shapes.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. Parameter 'Type' in Shapes.AddCallout changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Shapes.AddConnector changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Shapes.AddShape changed to 'Type_'
  Warning: 'Type' is a reserved word. Parameter 'Type' in Shapes.AddFormControl changed to 'Type_'
  Warning: Parent Interface has a member with name: QueryInterface. ShapeRange.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ShapeRange.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ShapeRange.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ShapeRange.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ShapeRange.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ShapeRange.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ShapeRange.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ShapeRange.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. ShapeRange.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. GroupShapes.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. GroupShapes.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. GroupShapes.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. GroupShapes.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. GroupShapes.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. GroupShapes.GetIDsOfNames changed to GetIDsOfNames_
  Warning: GroupShapes.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. GroupShapes.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. TextFrame.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. TextFrame.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. TextFrame.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. TextFrame.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. TextFrame.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. TextFrame.GetIDsOfNames changed to GetIDsOfNames_
  Warning: TextFrame.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. TextFrame.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ConnectorFormat.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ConnectorFormat.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ConnectorFormat.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ConnectorFormat.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ConnectorFormat.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ConnectorFormat.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ConnectorFormat.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ConnectorFormat.Invoke changed to Invoke_
  Warning: 'Type' is a reserved word. ConnectorFormat.Type changed to Type_
  Warning: Parent Interface has a member with name: QueryInterface. FreeformBuilder.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. FreeformBuilder.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. FreeformBuilder.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. FreeformBuilder.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. FreeformBuilder.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. FreeformBuilder.GetIDsOfNames changed to GetIDsOfNames_
  Warning: FreeformBuilder.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. FreeformBuilder.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. ControlFormat.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. ControlFormat.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. ControlFormat.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. ControlFormat.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. ControlFormat.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. ControlFormat.GetIDsOfNames changed to GetIDsOfNames_
  Warning: ControlFormat.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. ControlFormat.Invoke changed to Invoke_
  Warning: Parent Interface has a member with name: QueryInterface. OLEFormat.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. OLEFormat.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. OLEFormat.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. OLEFormat.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. OLEFormat.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. OLEFormat.GetIDsOfNames changed to GetIDsOfNames_
  Warning: OLEFormat.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. OLEFormat.Invoke changed to Invoke_
  Warning: 'Object' is a reserved word. OLEFormat.Object changed to Object_
  Warning: Parent Interface has a member with name: QueryInterface. LinkFormat.QueryInterface changed to QueryInterface_
  Warning: Parent Interface has a member with name: AddRef. LinkFormat.AddRef changed to AddRef_
  Warning: Parent Interface has a member with name: Release. LinkFormat.Release changed to Release_
  Warning: Parent Interface has a member with name: GetTypeInfoCount. LinkFormat.GetTypeInfoCount changed to GetTypeInfoCount_
  Warning: Parent Interface has a member with name: GetTypeInfo. LinkFormat.GetTypeInfo changed to GetTypeInfo_
  Warning: Parent Interface has a member with name: GetIDsOfNames. LinkFormat.GetIDsOfNames changed to GetIDsOfNames_
  Warning: LinkFormat.GetIDsOfNames_ parameter rgszNames: Too many indirections, type changed to Pointer.. [ ^^Shortint ]
  Warning: Parent Interface has a member with name: Invoke. LinkFormat.Invoke changed to Invoke_
 }

interface

uses Windows, ActiveX, Classes, Graphics, OleCtrls, StdVCL, Office_TLB, VBIDE_TLB;

const
  LIBID_Excel: TGUID = '{00020813-0000-0000-C000-000000000046}';

const

{ Constants }

  xlAll = -4104;
  xlAutomatic = -4105;
  xlBoth = 1;
  xlCenter = -4108;
  xlChecker = 9;
  xlCircle = 8;
  xlCorner = 2;
  xlCrissCross = 16;
  xlCross = 4;
  xlDiamond = 2;
  xlDistributed = -4117;
  xlDoubleAccounting = 5;
  xlFixedValue = 1;
  xlFormats = -4122;
  xlGray16 = 17;
  xlGray8 = 18;
  xlGrid = 15;
  xlHigh = -4127;
  xlInside = 2;
  xlJustify = -4130;
  xlLightDown = 13;
  xlLightHorizontal = 11;
  xlLightUp = 14;
  xlLightVertical = 12;
  xlLow = -4134;
  xlManual = -4135;
  xlMinusValues = 3;
  xlModule = -4141;
  xlNextToAxis = 4;
  xlNone = -4142;
  xlNotes = -4144;
  xlOff = -4146;
  xlOn = 1;
  xlPercent = 2;
  xlPlus = 9;
  xlPlusValues = 2;
  xlSemiGray75 = 10;
  xlShowLabel = 4;
  xlShowLabelAndPercent = 5;
  xlShowPercent = 3;
  xlShowValue = 2;
  xlSimple = -4154;
  xlSingle = 2;
  xlSingleAccounting = 4;
  xlSolid = 1;
  xlSquare = 1;
  xlStar = 5;
  xlStError = 4;
  xlToolbarButton = 2;
  xlTriangle = 3;
  xlGray25 = -4124;
  xlGray50 = -4125;
  xlGray75 = -4126;
  xlBottom = -4107;
  xlLeft = -4131;
  xlRight = -4152;
  xlTop = -4160;
  xl3DBar = -4099;
  xl3DSurface = -4103;
  xlBar = 2;
  xlColumn = 3;
  xlCombination = -4111;
  xlCustom = -4114;
  xlDefaultAutoFormat = -1;
  xlMaximum = 2;
  xlMinimum = 4;
  xlOpaque = 3;
  xlTransparent = 2;
  xlBidi = -5000;
  xlLatin = -5001;
  xlContext = -5002;
  xlLTR = -5003;
  xlRTL = -5004;
  xlVisualCursor = 2;
  xlLogicalCursor = 1;
  xlSystem = 1;
  xlPartial = 3;
  xlHindiNumerals = 3;
  xlBidiCalendar = 3;
  xlGregorian = 2;
  xlComplete = 4;
  xlScale = 3;
  xlClosed = 3;
  xlColor1 = 7;
  xlColor2 = 8;
  xlColor3 = 9;
  xlConstants = 2;
  xlContents = 2;
  xlBelow = 1;
  xlCascade = 7;
  xlCenterAcrossSelection = 7;
  xlChart4 = 2;
  xlChartSeries = 17;
  xlChartShort = 6;
  xlChartTitles = 18;
  xlClassic1 = 1;
  xlClassic2 = 2;
  xlClassic3 = 3;
  xl3DEffects1 = 13;
  xl3DEffects2 = 14;
  xlAbove = 0;
  xlAccounting1 = 4;
  xlAccounting2 = 5;
  xlAccounting3 = 6;
  xlAccounting4 = 17;
  xlAdd = 2;
  xlDebugCodePane = 13;
  xlDesktop = 9;
  xlDirect = 1;
  xlDivide = 5;
  xlDoubleClosed = 5;
  xlDoubleOpen = 4;
  xlDoubleQuote = 1;
  xlEntireChart = 20;
  xlExcelMenus = 1;
  xlExtended = 3;
  xlFill = 5;
  xlFirst = 0;
  xlFloating = 5;
  xlFormula = 5;
  xlGeneral = 1;
  xlGridline = 22;
  xlIcons = 1;
  xlImmediatePane = 12;
  xlInteger = 2;
  xlLast = 1;
  xlLastCell = 11;
  xlList1 = 10;
  xlList2 = 11;
  xlList3 = 12;
  xlLocalFormat1 = 15;
  xlLocalFormat2 = 16;
  xlLong = 3;
  xlLotusHelp = 2;
  xlMacrosheetCell = 7;
  xlMixed = 2;
  xlMultiply = 4;
  xlNarrow = 1;
  xlNoDocuments = 3;
  xlOpen = 2;
  xlOutside = 3;
  xlReference = 4;
  xlSemiautomatic = 2;
  xlShort = 1;
  xlSingleQuote = 2;
  xlStrict = 2;
  xlSubtract = 3;
  xlTextBox = 16;
  xlTiled = 1;
  xlTitleBar = 8;
  xlToolbar = 1;
  xlVisible = 12;
  xlWatchPane = 11;
  xlWide = 3;
  xlWorkbookTab = 6;
  xlWorksheet4 = 1;
  xlWorksheetCell = 3;
  xlWorksheetShort = 5;
  xlAllExceptBorders = 6;
  xlLeftToRight = 2;
  xlTopToBottom = 1;
  xlVeryHidden = 2;
  xlDrawingObject = 14;

{ XlCreator }

  xlCreatorCode = 1480803660;

{ XlChartGallery }

  xlBuiltIn = 21;
  xlUserDefined = 22;
  xlAnyGallery = 23;

{ XlColorIndex }

  xlColorIndexAutomatic = -4105;
  xlColorIndexNone = -4142;

{ XlEndStyleCap }

  xlCap = 1;
  xlNoCap = 2;

{ XlRowCol }

  xlColumns = 2;
  xlRows = 1;

{ XlScaleType }

  xlScaleLinear = -4132;
  xlScaleLogarithmic = -4133;

{ XlDataSeriesType }

  xlAutoFill = 4;
  xlChronological = 3;
  xlGrowth = 2;
  xlDataSeriesLinear = -4132;

{ XlAxisCrosses }

  xlAxisCrossesAutomatic = -4105;
  xlAxisCrossesCustom = -4114;
  xlAxisCrossesMaximum = 2;
  xlAxisCrossesMinimum = 4;

{ XlAxisGroup }

  xlPrimary = 1;
  xlSecondary = 2;

{ XlBackground }

  xlBackgroundAutomatic = -4105;
  xlBackgroundOpaque = 3;
  xlBackgroundTransparent = 2;

{ XlWindowState }

  xlMaximized = -4137;
  xlMinimized = -4140;
  xlNormal = -4143;

{ XlAxisType }

  xlCategory = 1;
  xlSeriesAxis = 3;
  xlValue = 2;

{ XlArrowHeadLength }

  xlArrowHeadLengthLong = 3;
  xlArrowHeadLengthMedium = -4138;
  xlArrowHeadLengthShort = 1;

{ XlVAlign }

  xlVAlignBottom = -4107;
  xlVAlignCenter = -4108;
  xlVAlignDistributed = -4117;
  xlVAlignJustify = -4130;
  xlVAlignTop = -4160;

{ XlTickMark }

  xlTickMarkCross = 4;
  xlTickMarkInside = 2;
  xlTickMarkNone = -4142;
  xlTickMarkOutside = 3;

{ XlErrorBarDirection }

  xlX = -4168;
  xlY = 1;

{ XlErrorBarInclude }

  xlErrorBarIncludeBoth = 1;
  xlErrorBarIncludeMinusValues = 3;
  xlErrorBarIncludeNone = -4142;
  xlErrorBarIncludePlusValues = 2;

{ XlDisplayBlanksAs }

  xlInterpolated = 3;
  xlNotPlotted = 1;
  xlZero = 2;

{ XlArrowHeadStyle }

  xlArrowHeadStyleClosed = 3;
  xlArrowHeadStyleDoubleClosed = 5;
  xlArrowHeadStyleDoubleOpen = 4;
  xlArrowHeadStyleNone = -4142;
  xlArrowHeadStyleOpen = 2;

{ XlArrowHeadWidth }

  xlArrowHeadWidthMedium = -4138;
  xlArrowHeadWidthNarrow = 1;
  xlArrowHeadWidthWide = 3;

{ XlHAlign }

  xlHAlignCenter = -4108;
  xlHAlignCenterAcrossSelection = 7;
  xlHAlignDistributed = -4117;
  xlHAlignFill = 5;
  xlHAlignGeneral = 1;
  xlHAlignJustify = -4130;
  xlHAlignLeft = -4131;
  xlHAlignRight = -4152;

{ XlTickLabelPosition }

  xlTickLabelPositionHigh = -4127;
  xlTickLabelPositionLow = -4134;
  xlTickLabelPositionNextToAxis = 4;
  xlTickLabelPositionNone = -4142;

{ XlLegendPosition }

  xlLegendPositionBottom = -4107;
  xlLegendPositionCorner = 2;
  xlLegendPositionLeft = -4131;
  xlLegendPositionRight = -4152;
  xlLegendPositionTop = -4160;

{ XlChartPictureType }

  xlStackScale = 3;
  xlStack = 2;
  xlStretch = 1;

{ XlChartPicturePlacement }

  xlSides = 1;
  xlEnd = 2;
  xlEndSides = 3;
  xlFront = 4;
  xlFrontSides = 5;
  xlFrontEnd = 6;
  xlAllFaces = 7;

{ XlOrientation }

  xlDownward = -4170;
  xlHorizontal = -4128;
  xlUpward = -4171;
  xlVertical = -4166;

{ XlTickLabelOrientation }

  xlTickLabelOrientationAutomatic = -4105;
  xlTickLabelOrientationDownward = -4170;
  xlTickLabelOrientationHorizontal = -4128;
  xlTickLabelOrientationUpward = -4171;
  xlTickLabelOrientationVertical = -4166;

{ XlBorderWeight }

  xlHairline = 1;
  xlMedium = -4138;
  xlThick = 4;
  xlThin = 2;

{ XlDataSeriesDate }

  xlDay = 1;
  xlMonth = 3;
  xlWeekday = 2;
  xlYear = 4;

{ XlUnderlineStyle }

  xlUnderlineStyleDouble = -4119;
  xlUnderlineStyleDoubleAccounting = 5;
  xlUnderlineStyleNone = -4142;
  xlUnderlineStyleSingle = 2;
  xlUnderlineStyleSingleAccounting = 4;

{ XlErrorBarType }

  xlErrorBarTypeCustom = -4114;
  xlErrorBarTypeFixedValue = 1;
  xlErrorBarTypePercent = 2;
  xlErrorBarTypeStDev = -4155;
  xlErrorBarTypeStError = 4;

{ XlTrendlineType }

  xlExponential = 5;
  xlLinear = -4132;
  xlLogarithmic = -4133;
  xlMovingAvg = 6;
  xlPolynomial = 3;
  xlPower = 4;

{ XlLineStyle }

  xlContinuous = 1;
  xlDash = -4115;
  xlDashDot = 4;
  xlDashDotDot = 5;
  xlDot = -4118;
  xlDouble = -4119;
  xlSlantDashDot = 13;
  xlLineStyleNone = -4142;

{ XlDataLabelsType }

  xlDataLabelsShowNone = -4142;
  xlDataLabelsShowValue = 2;
  xlDataLabelsShowPercent = 3;
  xlDataLabelsShowLabel = 4;
  xlDataLabelsShowLabelAndPercent = 5;
  xlDataLabelsShowBubbleSizes = 6;

{ XlMarkerStyle }

  xlMarkerStyleAutomatic = -4105;
  xlMarkerStyleCircle = 8;
  xlMarkerStyleDash = -4115;
  xlMarkerStyleDiamond = 2;
  xlMarkerStyleDot = -4118;
  xlMarkerStyleNone = -4142;
  xlMarkerStylePicture = -4147;
  xlMarkerStylePlus = 9;
  xlMarkerStyleSquare = 1;
  xlMarkerStyleStar = 5;
  xlMarkerStyleTriangle = 3;
  xlMarkerStyleX = -4168;

{ XlPictureConvertorType }

  xlBMP = 1;
  xlCGM = 7;
  xlDRW = 4;
  xlDXF = 5;
  xlEPS = 8;
  xlHGL = 6;
  xlPCT = 13;
  xlPCX = 10;
  xlPIC = 11;
  xlPLT = 12;
  xlTIF = 9;
  xlWMF = 2;
  xlWPG = 3;

{ XlPattern }

  xlPatternAutomatic = -4105;
  xlPatternChecker = 9;
  xlPatternCrissCross = 16;
  xlPatternDown = -4121;
  xlPatternGray16 = 17;
  xlPatternGray25 = -4124;
  xlPatternGray50 = -4125;
  xlPatternGray75 = -4126;
  xlPatternGray8 = 18;
  xlPatternGrid = 15;
  xlPatternHorizontal = -4128;
  xlPatternLightDown = 13;
  xlPatternLightHorizontal = 11;
  xlPatternLightUp = 14;
  xlPatternLightVertical = 12;
  xlPatternNone = -4142;
  xlPatternSemiGray75 = 10;
  xlPatternSolid = 1;
  xlPatternUp = -4162;
  xlPatternVertical = -4166;

{ XlChartSplitType }

  xlSplitByPosition = 1;
  xlSplitByPercentValue = 3;
  xlSplitByCustomSplit = 4;
  xlSplitByValue = 2;

{ XlDataLabelPosition }

  xlLabelPositionCenter = -4108;
  xlLabelPositionAbove = 0;
  xlLabelPositionBelow = 1;
  xlLabelPositionLeft = -4131;
  xlLabelPositionRight = -4152;
  xlLabelPositionOutsideEnd = 2;
  xlLabelPositionInsideEnd = 3;
  xlLabelPositionInsideBase = 4;
  xlLabelPositionBestFit = 5;
  xlLabelPositionMixed = 6;
  xlLabelPositionCustom = 7;

{ XlTimeUnit }

  xlDays = 0;
  xlMonths = 1;
  xlYears = 2;

{ XlCategoryType }

  xlCategoryScale = 2;
  xlTimeScale = 3;
  xlAutomaticScale = -4105;

{ XlBarShape }

  xlBox = 0;
  xlPyramidToPoint = 1;
  xlPyramidToMax = 2;
  xlCylinder = 3;
  xlConeToPoint = 4;
  xlConeToMax = 5;

{ XlChartType }

  xlColumnClustered = 51;
  xlColumnStacked = 52;
  xlColumnStacked100 = 53;
  xl3DColumnClustered = 54;
  xl3DColumnStacked = 55;
  xl3DColumnStacked100 = 56;
  xlBarClustered = 57;
  xlBarStacked = 58;
  xlBarStacked100 = 59;
  xl3DBarClustered = 60;
  xl3DBarStacked = 61;
  xl3DBarStacked100 = 62;
  xlLineStacked = 63;
  xlLineStacked100 = 64;
  xlLineMarkers = 65;
  xlLineMarkersStacked = 66;
  xlLineMarkersStacked100 = 67;
  xlPieOfPie = 68;
  xlPieExploded = 69;
  xl3DPieExploded = 70;
  xlBarOfPie = 71;
  xlXYScatterSmooth = 72;
  xlXYScatterSmoothNoMarkers = 73;
  xlXYScatterLines = 74;
  xlXYScatterLinesNoMarkers = 75;
  xlAreaStacked = 76;
  xlAreaStacked100 = 77;
  xl3DAreaStacked = 78;
  xl3DAreaStacked100 = 79;
  xlDoughnutExploded = 80;
  xlRadarMarkers = 81;
  xlRadarFilled = 82;
  xlSurface = 83;
  xlSurfaceWireframe = 84;
  xlSurfaceTopView = 85;
  xlSurfaceTopViewWireframe = 86;
  xlBubble = 15;
  xlBubble3DEffect = 87;
  xlStockHLC = 88;
  xlStockOHLC = 89;
  xlStockVHLC = 90;
  xlStockVOHLC = 91;
  xlCylinderColClustered = 92;
  xlCylinderColStacked = 93;
  xlCylinderColStacked100 = 94;
  xlCylinderBarClustered = 95;
  xlCylinderBarStacked = 96;
  xlCylinderBarStacked100 = 97;
  xlCylinderCol = 98;
  xlConeColClustered = 99;
  xlConeColStacked = 100;
  xlConeColStacked100 = 101;
  xlConeBarClustered = 102;
  xlConeBarStacked = 103;
  xlConeBarStacked100 = 104;
  xlConeCol = 105;
  xlPyramidColClustered = 106;
  xlPyramidColStacked = 107;
  xlPyramidColStacked100 = 108;
  xlPyramidBarClustered = 109;
  xlPyramidBarStacked = 110;
  xlPyramidBarStacked100 = 111;
  xlPyramidCol = 112;
  xl3DColumn = -4100;
  xlLine = 4;
  xl3DLine = -4101;
  xl3DPie = -4102;
  xlPie = 5;
  xlXYScatter = -4169;
  xl3DArea = -4098;
  xlArea = 1;
  xlDoughnut = -4120;
  xlRadar = -4151;

{ XlChartItem }

  xlDataLabel = 0;
  xlChartArea = 2;
  xlSeries = 3;
  xlChartTitle = 4;
  xlWalls = 5;
  xlCorners = 6;
  xlDataTable = 7;
  xlTrendline = 8;
  xlErrorBars = 9;
  xlXErrorBars = 10;
  xlYErrorBars = 11;
  xlLegendEntry = 12;
  xlLegendKey = 13;
  xlShape = 14;
  xlMajorGridlines = 15;
  xlMinorGridlines = 16;
  xlAxisTitle = 17;
  xlUpBars = 18;
  xlPlotArea = 19;
  xlDownBars = 20;
  xlAxis = 21;
  xlSeriesLines = 22;
  xlFloor = 23;
  xlLegend = 24;
  xlHiLoLines = 25;
  xlDropLines = 26;
  xlRadarAxisLabels = 27;
  xlNothing = 28;
  xlLeaderLines = 29;

{ XlSizeRepresents }

  xlSizeIsWidth = 2;
  xlSizeIsArea = 1;

{ XlInsertShiftDirection }

  xlShiftDown = -4121;
  xlShiftToRight = -4161;

{ XlDeleteShiftDirection }

  xlShiftToLeft = -4159;
  xlShiftUp = -4162;

{ XlDirection }

  xlDown = -4121;
  xlToLeft = -4159;
  xlToRight = -4161;
  xlUp = -4162;

{ XlConsolidationFunction }

  xlAverage = -4106;
  xlCount = -4112;
  xlCountNums = -4113;
  xlMax = -4136;
  xlMin = -4139;
  xlProduct = -4149;
  xlStDev = -4155;
  xlStDevP = -4156;
  xlSum = -4157;
  xlVar = -4164;
  xlVarP = -4165;

{ XlSheetType }

  xlChart = -4109;
  xlDialogSheet = -4116;
  xlExcel4IntlMacroSheet = 4;
  xlExcel4MacroSheet = 3;
  xlWorksheet = -4167;

{ XlLocationInTable }

  xlColumnHeader = -4110;
  xlColumnItem = 5;
  xlDataHeader = 3;
  xlDataItem = 7;
  xlPageHeader = 2;
  xlPageItem = 6;
  xlRowHeader = -4153;
  xlRowItem = 4;
  xlTableBody = 8;

{ XlFindLookIn }

  xlFormulas = -4123;
  xlComments = -4144;
  xlValues = -4163;

{ XlWindowType }

  xlChartAsWindow = 5;
  xlChartInPlace = 4;
  xlClipboard = 3;
  xlInfo = -4129;
  xlWorkbook = 1;

{ XlPivotFieldDataType }

  xlDate = 2;
  xlNumber = -4145;
  xlText = -4158;

{ XlCopyPictureFormat }

  xlBitmap = 2;
  xlPicture = -4147;

{ XlPivotTableSourceType }

  xlConsolidation = 3;
  xlDatabase = 1;
  xlExternal = 2;
  xlPivotTable = -4148;

{ XlReferenceStyle }

  xlA1 = 1;
  xlR1C1 = -4150;

{ XlMSApplication }

  xlMicrosoftAccess = 4;
  xlMicrosoftFoxPro = 5;
  xlMicrosoftMail = 3;
  xlMicrosoftPowerPoint = 2;
  xlMicrosoftProject = 6;
  xlMicrosoftSchedulePlus = 7;
  xlMicrosoftWord = 1;

{ XlMouseButton }

  xlNoButton = 0;
  xlPrimaryButton = 1;
  xlSecondaryButton = 2;

{ XlCutCopyMode }

  xlCopy = 1;
  xlCut = 2;

{ XlFillWith }

  xlFillWithAll = -4104;
  xlFillWithContents = 2;
  xlFillWithFormats = -4122;

{ XlFilterAction }

  xlFilterCopy = 2;
  xlFilterInPlace = 1;

{ XlOrder }

  xlDownThenOver = 1;
  xlOverThenDown = 2;

{ XlLinkType }

  xlLinkTypeExcelLinks = 1;
  xlLinkTypeOLELinks = 2;

{ XlApplyNamesOrder }

  xlColumnThenRow = 2;
  xlRowThenColumn = 1;

{ XlEnableCancelKey }

  xlDisabled = 0;
  xlErrorHandler = 2;
  xlInterrupt = 1;

{ XlPageBreak }

  xlPageBreakAutomatic = -4105;
  xlPageBreakManual = -4135;

{ XlOLEType }

  xlOLEControl = 2;
  xlOLEEmbed = 1;
  xlOLELink = 0;

{ XlPageOrientation }

  xlLandscape = 2;
  xlPortrait = 1;

{ XlLinkInfo }

  xlEditionDate = 2;
  xlUpdateState = 1;

{ XlCommandUnderlines }

  xlCommandUnderlinesAutomatic = -4105;
  xlCommandUnderlinesOff = -4146;
  xlCommandUnderlinesOn = 1;

{ XlOLEVerb }

  xlVerbOpen = 2;
  xlVerbPrimary = 1;

{ XlCalculation }

  xlCalculationAutomatic = -4105;
  xlCalculationManual = -4135;
  xlCalculationSemiautomatic = 2;

{ XlFileAccess }

  xlReadOnly = 3;
  xlReadWrite = 2;

{ XlEditionType }

  xlPublisher = 1;
  xlSubscriber = 2;

{ XlObjectSize }

  xlFitToPage = 2;
  xlFullPage = 3;
  xlScreenSize = 1;

{ XlLookAt }

  xlPart = 2;
  xlWhole = 1;

{ XlMailSystem }

  xlMAPI = 1;
  xlNoMailSystem = 0;
  xlPowerTalk = 2;

{ XlLinkInfoType }

  xlLinkInfoOLELinks = 2;
  xlLinkInfoPublishers = 5;
  xlLinkInfoSubscribers = 6;

{ XlCVError }

  xlErrDiv0 = 2007;
  xlErrNA = 2042;
  xlErrName = 2029;
  xlErrNull = 2000;
  xlErrNum = 2036;
  xlErrRef = 2023;
  xlErrValue = 2015;

{ XlEditionFormat }

  xlBIFF = 2;
  xlPICT = 1;
  xlRTF = 4;
  xlVALU = 8;

{ XlLink }

  xlExcelLinks = 1;
  xlOLELinks = 2;
  xlPublishers = 5;
  xlSubscribers = 6;

{ XlCellType }

  xlCellTypeBlanks = 4;
  xlCellTypeConstants = 2;
  xlCellTypeFormulas = -4123;
  xlCellTypeLastCell = 11;
  xlCellTypeComments = -4144;
  xlCellTypeVisible = 12;
  xlCellTypeAllFormatConditions = -4172;
  xlCellTypeSameFormatConditions = -4173;
  xlCellTypeAllValidation = -4174;
  xlCellTypeSameValidation = -4175;

{ XlArrangeStyle }

  xlArrangeStyleCascade = 7;
  xlArrangeStyleHorizontal = -4128;
  xlArrangeStyleTiled = 1;
  xlArrangeStyleVertical = -4166;

{ XlMousePointer }

  xlIBeam = 3;
  xlDefault = -4143;
  xlNorthwestArrow = 1;
  xlWait = 2;

{ XlEditionOptionsOption }

  xlAutomaticUpdate = 4;
  xlCancel = 1;
  xlChangeAttributes = 6;
  xlManualUpdate = 5;
  xlOpenSource = 3;
  xlSelect = 3;
  xlSendPublisher = 2;
  xlUpdateSubscriber = 2;

{ XlAutoFillType }

  xlFillCopy = 1;
  xlFillDays = 5;
  xlFillDefault = 0;
  xlFillFormats = 3;
  xlFillMonths = 7;
  xlFillSeries = 2;
  xlFillValues = 4;
  xlFillWeekdays = 6;
  xlFillYears = 8;
  xlGrowthTrend = 10;
  xlLinearTrend = 9;

{ XlAutoFilterOperator }

  xlAnd = 1;
  xlBottom10Items = 4;
  xlBottom10Percent = 6;
  xlOr = 2;
  xlTop10Items = 3;
  xlTop10Percent = 5;

{ XlClipboardFormat }

  xlClipboardFormatBIFF = 8;
  xlClipboardFormatBIFF2 = 18;
  xlClipboardFormatBIFF3 = 20;
  xlClipboardFormatBIFF4 = 30;
  xlClipboardFormatBinary = 15;
  xlClipboardFormatBitmap = 9;
  xlClipboardFormatCGM = 13;
  xlClipboardFormatCSV = 5;
  xlClipboardFormatDIF = 4;
  xlClipboardFormatDspText = 12;
  xlClipboardFormatEmbeddedObject = 21;
  xlClipboardFormatEmbedSource = 22;
  xlClipboardFormatLink = 11;
  xlClipboardFormatLinkSource = 23;
  xlClipboardFormatLinkSourceDesc = 32;
  xlClipboardFormatMovie = 24;
  xlClipboardFormatNative = 14;
  xlClipboardFormatObjectDesc = 31;
  xlClipboardFormatObjectLink = 19;
  xlClipboardFormatOwnerLink = 17;
  xlClipboardFormatPICT = 2;
  xlClipboardFormatPrintPICT = 3;
  xlClipboardFormatRTF = 7;
  xlClipboardFormatScreenPICT = 29;
  xlClipboardFormatStandardFont = 28;
  xlClipboardFormatStandardScale = 27;
  xlClipboardFormatSYLK = 6;
  xlClipboardFormatTable = 16;
  xlClipboardFormatText = 0;
  xlClipboardFormatToolFace = 25;
  xlClipboardFormatToolFacePICT = 26;
  xlClipboardFormatVALU = 1;
  xlClipboardFormatWK1 = 10;

{ XlFileFormat }

  xlAddIn = 18;
  xlCSV = 6;
  xlCSVMac = 22;
  xlCSVMSDOS = 24;
  xlCSVWindows = 23;
  xlDBF2 = 7;
  xlDBF3 = 8;
  xlDBF4 = 11;
  xlDIF = 9;
  xlExcel2 = 16;
  xlExcel2FarEast = 27;
  xlExcel3 = 29;
  xlExcel4 = 33;
  xlExcel5 = 39;
  xlExcel7 = 39;
  xlExcel9795 = 43;
  xlExcel4Workbook = 35;
  xlIntlAddIn = 26;
  xlIntlMacro = 25;
  xlWorkbookNormal = -4143;
  xlSYLK = 2;
  xlTemplate = 17;
  xlCurrentPlatformText = -4158;
  xlTextMac = 19;
  xlTextMSDOS = 21;
  xlTextPrinter = 36;
  xlTextWindows = 20;
  xlWJ2WD1 = 14;
  xlWK1 = 5;
  xlWK1ALL = 31;
  xlWK1FMT = 30;
  xlWK3 = 15;
  xlWK4 = 38;
  xlWK3FM3 = 32;
  xlWKS = 4;
  xlWorks2FarEast = 28;
  xlWQ1 = 34;
  xlWJ3 = 40;
  xlWJ3FJ3 = 41;

{ XlApplicationInternational }

  xl24HourClock = 33;
  xl4DigitYears = 43;
  xlAlternateArraySeparator = 16;
  xlColumnSeparator = 14;
  xlCountryCode = 1;
  xlCountrySetting = 2;
  xlCurrencyBefore = 37;
  xlCurrencyCode = 25;
  xlCurrencyDigits = 27;
  xlCurrencyLeadingZeros = 40;
  xlCurrencyMinusSign = 38;
  xlCurrencyNegative = 28;
  xlCurrencySpaceBefore = 36;
  xlCurrencyTrailingZeros = 39;
  xlDateOrder = 32;
  xlDateSeparator = 17;
  xlDayCode = 21;
  xlDayLeadingZero = 42;
  xlDecimalSeparator = 3;
  xlGeneralFormatName = 26;
  xlHourCode = 22;
  xlLeftBrace = 12;
  xlLeftBracket = 10;
  xlListSeparator = 5;
  xlLowerCaseColumnLetter = 9;
  xlLowerCaseRowLetter = 8;
  xlMDY = 44;
  xlMetric = 35;
  xlMinuteCode = 23;
  xlMonthCode = 20;
  xlMonthLeadingZero = 41;
  xlMonthNameChars = 30;
  xlNoncurrencyDigits = 29;
  xlNonEnglishFunctions = 34;
  xlRightBrace = 13;
  xlRightBracket = 11;
  xlRowSeparator = 15;
  xlSecondCode = 24;
  xlThousandsSeparator = 4;
  xlTimeLeadingZero = 45;
  xlTimeSeparator = 18;
  xlUpperCaseColumnLetter = 7;
  xlUpperCaseRowLetter = 6;
  xlWeekdayNameChars = 31;
  xlYearCode = 19;

{ XlPageBreakExtent }

  xlPageBreakFull = 1;
  xlPageBreakPartial = 2;

{ XlCellInsertionMode }

  xlOverwriteCells = 0;
  xlInsertDeleteCells = 1;
  xlInsertEntireRows = 2;

{ XlFormulaLabel }

  xlNoLabels = -4142;
  xlRowLabels = 1;
  xlColumnLabels = 2;
  xlMixedLabels = 3;

{ XlHighlightChangesTime }

  xlSinceMyLastSave = 1;
  xlAllChanges = 2;
  xlNotYetReviewed = 3;

{ XlCommentDisplayMode }

  xlNoIndicator = 0;
  xlCommentIndicatorOnly = -1;
  xlCommentAndIndicator = 1;

{ XlFormatConditionType }

  xlCellValue = 1;
  xlExpression = 2;

{ XlFormatConditionOperator }

  xlBetween = 1;
  xlNotBetween = 2;
  xlEqual = 3;
  xlNotEqual = 4;
  xlGreater = 5;
  xlLess = 6;
  xlGreaterEqual = 7;
  xlLessEqual = 8;

{ XlEnableSelection }

  xlNoRestrictions = 0;
  xlUnlockedCells = 1;
  xlNoSelection = -4142;

{ XlDVType }

  xlValidateInputOnly = 0;
  xlValidateWholeNumber = 1;
  xlValidateDecimal = 2;
  xlValidateList = 3;
  xlValidateDate = 4;
  xlValidateTime = 5;
  xlValidateTextLength = 6;
  xlValidateCustom = 7;

{ XlIMEMode }

  xlIMEModeNoControl = 0;
  xlIMEModeOn = 1;
  xlIMEModeOff = 2;
  xlIMEModeDisable = 3;
  xlIMEModeHiragana = 4;
  xlIMEModeKatakana = 5;
  xlIMEModeKatakanaHalf = 6;
  xlIMEModeAlphaFull = 7;
  xlIMEModeAlpha = 8;
  xlIMEModeHangulFull = 9;
  xlIMEModeHangul = 10;

{ XlDVAlertStyle }

  xlValidAlertStop = 1;
  xlValidAlertWarning = 2;
  xlValidAlertInformation = 3;

{ XlChartLocation }

  xlLocationAsNewSheet = 1;
  xlLocationAsObject = 2;
  xlLocationAutomatic = 3;

{ XlPaperSize }

  xlPaper10x14 = 16;
  xlPaper11x17 = 17;
  xlPaperA3 = 8;
  xlPaperA4 = 9;
  xlPaperA4Small = 10;
  xlPaperA5 = 11;
  xlPaperB4 = 12;
  xlPaperB5 = 13;
  xlPaperCsheet = 24;
  xlPaperDsheet = 25;
  xlPaperEnvelope10 = 20;
  xlPaperEnvelope11 = 21;
  xlPaperEnvelope12 = 22;
  xlPaperEnvelope14 = 23;
  xlPaperEnvelope9 = 19;
  xlPaperEnvelopeB4 = 33;
  xlPaperEnvelopeB5 = 34;
  xlPaperEnvelopeB6 = 35;
  xlPaperEnvelopeC3 = 29;
  xlPaperEnvelopeC4 = 30;
  xlPaperEnvelopeC5 = 28;
  xlPaperEnvelopeC6 = 31;
  xlPaperEnvelopeC65 = 32;
  xlPaperEnvelopeDL = 27;
  xlPaperEnvelopeItaly = 36;
  xlPaperEnvelopeMonarch = 37;
  xlPaperEnvelopePersonal = 38;
  xlPaperEsheet = 26;
  xlPaperExecutive = 7;
  xlPaperFanfoldLegalGerman = 41;
  xlPaperFanfoldStdGerman = 40;
  xlPaperFanfoldUS = 39;
  xlPaperFolio = 14;
  xlPaperLedger = 4;
  xlPaperLegal = 5;
  xlPaperLetter = 1;
  xlPaperLetterSmall = 2;
  xlPaperNote = 18;
  xlPaperQuarto = 15;
  xlPaperStatement = 6;
  xlPaperTabloid = 3;
  xlPaperUser = 256;

{ XlPasteSpecialOperation }

  xlPasteSpecialOperationAdd = 2;
  xlPasteSpecialOperationDivide = 5;
  xlPasteSpecialOperationMultiply = 4;
  xlPasteSpecialOperationNone = -4142;
  xlPasteSpecialOperationSubtract = 3;

{ XlPasteType }

  xlPasteAll = -4104;
  xlPasteAllExceptBorders = 6;
  xlPasteFormats = -4122;
  xlPasteFormulas = -4123;
  xlPasteComments = -4144;
  xlPasteValues = -4163;

{ XlPhoneticCharacterType }

  xlKatakanaHalf = 0;
  xlKatakana = 1;
  xlHiragana = 2;
  xlNoConversion = 3;

{ XlPhoneticAlignment }

  xlPhoneticAlignNoControl = 0;
  xlPhoneticAlignLeft = 1;
  xlPhoneticAlignCenter = 2;
  xlPhoneticAlignDistributed = 3;

{ XlPictureAppearance }

  xlPrinter = 2;
  xlScreen = 1;

{ XlPivotFieldOrientation }

  xlColumnField = 2;
  xlDataField = 4;
  xlHidden = 0;
  xlPageField = 3;
  xlRowField = 1;

{ XlPivotFieldCalculation }

  xlDifferenceFrom = 2;
  xlIndex = 9;
  xlNoAdditionalCalculation = -4143;
  xlPercentDifferenceFrom = 4;
  xlPercentOf = 3;
  xlPercentOfColumn = 7;
  xlPercentOfRow = 6;
  xlPercentOfTotal = 8;
  xlRunningTotal = 5;

{ XlPlacement }

  xlFreeFloating = 3;
  xlMove = 2;
  xlMoveAndSize = 1;

{ XlPlatform }

  xlMacintosh = 1;
  xlMSDOS = 3;
  xlWindows = 2;

{ XlPrintLocation }

  xlPrintSheetEnd = 1;
  xlPrintInPlace = 16;
  xlPrintNoComments = -4142;

{ XlPriority }

  xlPriorityHigh = -4127;
  xlPriorityLow = -4134;
  xlPriorityNormal = -4143;

{ XlPTSelectionMode }

  xlLabelOnly = 1;
  xlDataAndLabel = 0;
  xlDataOnly = 2;
  xlOrigin = 3;
  xlButton = 15;
  xlBlanks = 4;

{ XlRangeAutoFormat }

  xlRangeAutoFormat3DEffects1 = 13;
  xlRangeAutoFormat3DEffects2 = 14;
  xlRangeAutoFormatAccounting1 = 4;
  xlRangeAutoFormatAccounting2 = 5;
  xlRangeAutoFormatAccounting3 = 6;
  xlRangeAutoFormatAccounting4 = 17;
  xlRangeAutoFormatClassic1 = 1;
  xlRangeAutoFormatClassic2 = 2;
  xlRangeAutoFormatClassic3 = 3;
  xlRangeAutoFormatColor1 = 7;
  xlRangeAutoFormatColor2 = 8;
  xlRangeAutoFormatColor3 = 9;
  xlRangeAutoFormatList1 = 10;
  xlRangeAutoFormatList2 = 11;
  xlRangeAutoFormatList3 = 12;
  xlRangeAutoFormatLocalFormat1 = 15;
  xlRangeAutoFormatLocalFormat2 = 16;
  xlRangeAutoFormatLocalFormat3 = 19;
  xlRangeAutoFormatLocalFormat4 = 20;
  xlRangeAutoFormatNone = -4142;
  xlRangeAutoFormatSimple = -4154;

{ XlReferenceType }

  xlAbsolute = 1;
  xlAbsRowRelColumn = 2;
  xlRelative = 4;
  xlRelRowAbsColumn = 3;

{ XlRoutingSlipDelivery }

  xlAllAtOnce = 2;
  xlOneAfterAnother = 1;

{ XlRoutingSlipStatus }

  xlNotYetRouted = 0;
  xlRoutingComplete = 2;
  xlRoutingInProgress = 1;

{ XlRunAutoMacro }

  xlAutoActivate = 3;
  xlAutoClose = 2;
  xlAutoDeactivate = 4;
  xlAutoOpen = 1;

{ XlSaveAction }

  xlDoNotSaveChanges = 2;
  xlSaveChanges = 1;

{ XlSaveAsAccessMode }

  xlExclusive = 3;
  xlNoChange = 1;
  xlShared = 2;

{ XlSaveConflictResolution }

  xlLocalSessionChanges = 2;
  xlOtherSessionChanges = 3;
  xlUserResolution = 1;

{ XlSearchDirection }

  xlNext = 1;
  xlPrevious = 2;

{ XlSearchOrder }

  xlByColumns = 2;
  xlByRows = 1;

{ XlSheetVisibility }

  xlSheetVisible = -1;
  xlSheetHidden = 0;
  xlSheetVeryHidden = 2;

{ XlSortMethod }

  xlPinYin = 1;
  xlStroke = 2;

{ XlSortMethodOld }

  xlCodePage = 2;
  xlSyllabary = 1;

{ XlSortOrder }

  xlAscending = 1;
  xlDescending = 2;

{ XlSortOrientation }

  xlSortRows = 2;
  xlSortColumns = 1;

{ XlSortType }

  xlSortLabels = 2;
  xlSortValues = 1;

{ XlSpecialCellsValue }

  xlErrors = 16;
  xlLogical = 4;
  xlNumbers = 1;
  xlTextValues = 2;

{ XlSubscribeToFormat }

  xlSubscribeToPicture = -4147;
  xlSubscribeToText = -4158;

{ XlSummaryRow }

  xlSummaryAbove = 0;
  xlSummaryBelow = 1;

{ XlSummaryColumn }

  xlSummaryOnLeft = -4131;
  xlSummaryOnRight = -4152;

{ XlSummaryReportType }

  xlSummaryPivotTable = -4148;
  xlStandardSummary = 1;

{ XlTabPosition }

  xlTabPositionFirst = 0;
  xlTabPositionLast = 1;

{ XlTextParsingType }

  xlDelimited = 1;
  xlFixedWidth = 2;

{ XlTextQualifier }

  xlTextQualifierDoubleQuote = 1;
  xlTextQualifierNone = -4142;
  xlTextQualifierSingleQuote = 2;

{ XlWBATemplate }

  xlWBATChart = -4109;
  xlWBATExcel4IntlMacroSheet = 4;
  xlWBATExcel4MacroSheet = 3;
  xlWBATWorksheet = -4167;

{ XlWindowView }

  xlNormalView = 1;
  xlPageBreakPreview = 2;

{ XlXLMMacroType }

  xlCommand = 2;
  xlFunction = 1;
  xlNotXLM = 3;

{ XlYesNoGuess }

  xlGuess = 0;
  xlNo = 2;
  xlYes = 1;

{ XlDisplayShapes }

  XlDisplayShapes__ = -4104;
  xlHide = 3;
  xlPlaceholders = 2;

{ XlBordersIndex }

  xlInsideHorizontal = 12;
  xlInsideVertical = 11;
  xlDiagonalDown = 5;
  xlDiagonalUp = 6;
  xlEdgeBottom = 9;
  xlEdgeLeft = 7;
  xlEdgeRight = 10;
  xlEdgeTop = 8;

{ XlToolbarProtection }

  xlNoButtonChanges = 1;
  xlNoChanges = 4;
  xlNoDockingChanges = 3;
  xlToolbarProtectionNone = -4143;
  xlNoShapeChanges = 2;

{ XlBuiltInDialog }

  xlDialogOpen = 1;
  xlDialogOpenLinks = 2;
  xlDialogSaveAs = 5;
  xlDialogFileDelete = 6;
  xlDialogPageSetup = 7;
  xlDialogPrint = 8;
  xlDialogPrinterSetup = 9;
  xlDialogArrangeAll = 12;
  xlDialogWindowSize = 13;
  xlDialogWindowMove = 14;
  xlDialogRun = 17;
  xlDialogSetPrintTitles = 23;
  xlDialogFont = 26;
  xlDialogDisplay = 27;
  xlDialogProtectDocument = 28;
  xlDialogCalculation = 32;
  xlDialogExtract = 35;
  xlDialogDataDelete = 36;
  xlDialogSort = 39;
  xlDialogDataSeries = 40;
  xlDialogTable = 41;
  xlDialogFormatNumber = 42;
  xlDialogAlignment = 43;
  xlDialogStyle = 44;
  xlDialogBorder = 45;
  xlDialogCellProtection = 46;
  xlDialogColumnWidth = 47;
  xlDialogClear = 52;
  xlDialogPasteSpecial = 53;
  xlDialogEditDelete = 54;
  xlDialogInsert = 55;
  xlDialogPasteNames = 58;
  xlDialogDefineName = 61;
  xlDialogCreateNames = 62;
  xlDialogFormulaGoto = 63;
  xlDialogFormulaFind = 64;
  xlDialogGalleryArea = 67;
  xlDialogGalleryBar = 68;
  xlDialogGalleryColumn = 69;
  xlDialogGalleryLine = 70;
  xlDialogGalleryPie = 71;
  xlDialogGalleryScatter = 72;
  xlDialogCombination = 73;
  xlDialogGridlines = 76;
  xlDialogAxes = 78;
  xlDialogAttachText = 80;
  xlDialogPatterns = 84;
  xlDialogMainChart = 85;
  xlDialogOverlay = 86;
  xlDialogScale = 87;
  xlDialogFormatLegend = 88;
  xlDialogFormatText = 89;
  xlDialogParse = 91;
  xlDialogUnhide = 94;
  xlDialogWorkspace = 95;
  xlDialogActivate = 103;
  xlDialogCopyPicture = 108;
  xlDialogDeleteName = 110;
  xlDialogDeleteFormat = 111;
  xlDialogNew = 119;
  xlDialogRowHeight = 127;
  xlDialogFormatMove = 128;
  xlDialogFormatSize = 129;
  xlDialogFormulaReplace = 130;
  xlDialogSelectSpecial = 132;
  xlDialogApplyNames = 133;
  xlDialogReplaceFont = 134;
  xlDialogSplit = 137;
  xlDialogOutline = 142;
  xlDialogSaveWorkbook = 145;
  xlDialogCopyChart = 147;
  xlDialogFormatFont = 150;
  xlDialogNote = 154;
  xlDialogSetUpdateStatus = 159;
  xlDialogColorPalette = 161;
  xlDialogChangeLink = 166;
  xlDialogAppMove = 170;
  xlDialogAppSize = 171;
  xlDialogMainChartType = 185;
  xlDialogOverlayChartType = 186;
  xlDialogOpenMail = 188;
  xlDialogSendMail = 189;
  xlDialogStandardFont = 190;
  xlDialogConsolidate = 191;
  xlDialogSortSpecial = 192;
  xlDialogGallery3dArea = 193;
  xlDialogGallery3dColumn = 194;
  xlDialogGallery3dLine = 195;
  xlDialogGallery3dPie = 196;
  xlDialogView3d = 197;
  xlDialogGoalSeek = 198;
  xlDialogWorkgroup = 199;
  xlDialogFillGroup = 200;
  xlDialogUpdateLink = 201;
  xlDialogPromote = 202;
  xlDialogDemote = 203;
  xlDialogShowDetail = 204;
  xlDialogObjectProperties = 207;
  xlDialogSaveNewObject = 208;
  xlDialogApplyStyle = 212;
  xlDialogAssignToObject = 213;
  xlDialogObjectProtection = 214;
  xlDialogCreatePublisher = 217;
  xlDialogSubscribeTo = 218;
  xlDialogShowToolbar = 220;
  xlDialogPrintPreview = 222;
  xlDialogEditColor = 223;
  xlDialogFormatMain = 225;
  xlDialogFormatOverlay = 226;
  xlDialogEditSeries = 228;
  xlDialogDefineStyle = 229;
  xlDialogGalleryRadar = 249;
  xlDialogEditionOptions = 251;
  xlDialogZoom = 256;
  xlDialogInsertObject = 259;
  xlDialogSize = 261;
  xlDialogMove = 262;
  xlDialogFormatAuto = 269;
  xlDialogGallery3dBar = 272;
  xlDialogGallery3dSurface = 273;
  xlDialogCustomizeToolbar = 276;
  xlDialogWorkbookAdd = 281;
  xlDialogWorkbookMove = 282;
  xlDialogWorkbookCopy = 283;
  xlDialogWorkbookOptions = 284;
  xlDialogSaveWorkspace = 285;
  xlDialogChartWizard = 288;
  xlDialogAssignToTool = 293;
  xlDialogPlacement = 300;
  xlDialogFillWorkgroup = 301;
  xlDialogWorkbookNew = 302;
  xlDialogScenarioCells = 305;
  xlDialogScenarioAdd = 307;
  xlDialogScenarioEdit = 308;
  xlDialogScenarioSummary = 311;
  xlDialogPivotTableWizard = 312;
  xlDialogPivotFieldProperties = 313;
  xlDialogOptionsCalculation = 318;
  xlDialogOptionsEdit = 319;
  xlDialogOptionsView = 320;
  xlDialogAddinManager = 321;
  xlDialogMenuEditor = 322;
  xlDialogAttachToolbars = 323;
  xlDialogOptionsChart = 325;
  xlDialogVbaInsertFile = 328;
  xlDialogVbaProcedureDefinition = 330;
  xlDialogRoutingSlip = 336;
  xlDialogMailLogon = 339;
  xlDialogInsertPicture = 342;
  xlDialogGalleryDoughnut = 344;
  xlDialogChartTrend = 350;
  xlDialogWorkbookInsert = 354;
  xlDialogOptionsTransition = 355;
  xlDialogOptionsGeneral = 356;
  xlDialogFilterAdvanced = 370;
  xlDialogMailNextLetter = 378;
  xlDialogDataLabel = 379;
  xlDialogInsertTitle = 380;
  xlDialogFontProperties = 381;
  xlDialogMacroOptions = 382;
  xlDialogWorkbookUnhide = 384;
  xlDialogWorkbookName = 386;
  xlDialogGalleryCustom = 388;
  xlDialogAddChartAutoformat = 390;
  xlDialogChartAddData = 392;
  xlDialogTabOrder = 394;
  xlDialogSubtotalCreate = 398;
  xlDialogWorkbookTabSplit = 415;
  xlDialogWorkbookProtect = 417;
  xlDialogScrollbarProperties = 420;
  xlDialogPivotShowPages = 421;
  xlDialogTextToColumns = 422;
  xlDialogFormatCharttype = 423;
  xlDialogPivotFieldGroup = 433;
  xlDialogPivotFieldUngroup = 434;
  xlDialogCheckboxProperties = 435;
  xlDialogLabelProperties = 436;
  xlDialogListboxProperties = 437;
  xlDialogEditboxProperties = 438;
  xlDialogOpenText = 441;
  xlDialogPushbuttonProperties = 445;
  xlDialogFilter = 447;
  xlDialogFunctionWizard = 450;
  xlDialogSaveCopyAs = 456;
  xlDialogOptionsListsAdd = 458;
  xlDialogSeriesAxes = 460;
  xlDialogSeriesX = 461;
  xlDialogSeriesY = 462;
  xlDialogErrorbarX = 463;
  xlDialogErrorbarY = 464;
  xlDialogFormatChart = 465;
  xlDialogSeriesOrder = 466;
  xlDialogMailEditMailer = 470;
  xlDialogStandardWidth = 472;
  xlDialogScenarioMerge = 473;
  xlDialogProperties = 474;
  xlDialogSummaryInfo = 474;
  xlDialogFindFile = 475;
  xlDialogActiveCellFont = 476;
  xlDialogVbaMakeAddin = 478;
  xlDialogFileSharing = 481;
  xlDialogAutoCorrect = 485;
  xlDialogCustomViews = 493;
  xlDialogInsertNameLabel = 496;
  xlDialogSeriesShape = 504;
  xlDialogChartOptionsDataLabels = 505;
  xlDialogChartOptionsDataTable = 506;
  xlDialogSetBackgroundPicture = 509;
  xlDialogDataValidation = 525;
  xlDialogChartType = 526;
  xlDialogChartLocation = 527;
  xlDialogPhonetic = 538;
  xlDialogChartSourceData = 541;
  xlDialogSeriesOptions = 557;
  xlDialogPivotTableOptions = 567;
  xlDialogPivotSolveOrder = 568;
  xlDialogPivotCalculatedField = 570;
  xlDialogPivotCalculatedItem = 572;
  xlDialogConditionalFormatting = 583;
  xlDialogInsertHyperlink = 596;
  xlDialogProtectSharing = 620;

{ XlParameterType }

  xlPrompt = 0;
  xlConstant = 1;
  xlRange = 2;

{ XlParameterDataType }

  xlParamTypeUnknown = 0;
  xlParamTypeChar = 1;
  xlParamTypeNumeric = 2;
  xlParamTypeDecimal = 3;
  xlParamTypeInteger = 4;
  xlParamTypeSmallInt = 5;
  xlParamTypeFloat = 6;
  xlParamTypeReal = 7;
  xlParamTypeDouble = 8;
  xlParamTypeVarChar = 12;
  xlParamTypeDate = 9;
  xlParamTypeTime = 10;
  xlParamTypeTimestamp = 11;
  xlParamTypeLongVarChar = -1;
  xlParamTypeBinary = -2;
  xlParamTypeVarBinary = -3;
  xlParamTypeLongVarBinary = -4;
  xlParamTypeBigInt = -5;
  xlParamTypeTinyInt = -6;
  xlParamTypeBit = -7;

{ XlFormControl }

  xlButtonControl = 0;
  xlCheckBox = 1;
  xlDropDown = 2;
  xlEditBox = 3;
  xlGroupBox = 4;
  xlLabel = 5;
  xlListBox = 6;
  xlOptionButton = 7;
  xlScrollBar = 8;
  xlSpinner = 9;

const

{ Component class GUIDs }
  Class_QueryTable: TGUID = '{59191DA1-EA47-11CE-A51F-00AA0061507F}';
  Class_Application: TGUID = '{00024500-0000-0000-C000-000000000046}';
  Class_Chart: TGUID = '{00020821-0000-0000-C000-000000000046}';
  Class_Worksheet: TGUID = '{00020820-0000-0000-C000-000000000046}';
  Class_Global: TGUID = '{00020812-0000-0000-C000-000000000046}';
  Class_Workbook: TGUID = '{00020819-0000-0000-C000-000000000046}';
  Class_OLEObject: TGUID = '{00020818-0000-0000-C000-000000000046}';

type

{ Forward declarations: Interfaces }
  Adjustments = interface;
  AdjustmentsDisp = dispinterface;
  CalloutFormat = interface;
  CalloutFormatDisp = dispinterface;
  ColorFormat = interface;
  ColorFormatDisp = dispinterface;
  LineFormat = interface;
  LineFormatDisp = dispinterface;
  ShapeNode = interface;
  ShapeNodeDisp = dispinterface;
  ShapeNodes = interface;
  ShapeNodesDisp = dispinterface;
  PictureFormat = interface;
  PictureFormatDisp = dispinterface;
  ShadowFormat = interface;
  ShadowFormatDisp = dispinterface;
  TextEffectFormat = interface;
  TextEffectFormatDisp = dispinterface;
  ThreeDFormat = interface;
  ThreeDFormatDisp = dispinterface;
  FillFormat = interface;
  FillFormatDisp = dispinterface;
  IFont = interface;
  IWindow = interface;
  IWindows = interface;
  IAppEvents = interface;
  _Application = interface;
  _ApplicationDisp = dispinterface;
  IWorksheetFunction = interface;
  IRange = interface;
  IChartEvents = interface;
  _Chart = interface;
  _ChartDisp = dispinterface;
  Sheets = interface;
  SheetsDisp = dispinterface;
  IVPageBreak = interface;
  IHPageBreak = interface;
  IHPageBreaks = interface;
  IVPageBreaks = interface;
  IRecentFile = interface;
  IRecentFiles = interface;
  IDocEvents = interface;
  _Worksheet = interface;
  _WorksheetDisp = dispinterface;
  IStyle = interface;
  IStyles = interface;
  IBorders = interface;
  _Global = interface;
  _GlobalDisp = dispinterface;
  IAddIn = interface;
  IAddIns = interface;
  IToolbar = interface;
  IToolbars = interface;
  IToolbarButton = interface;
  IToolbarButtons = interface;
  IAreas = interface;
  IWorkbookEvents = interface;
  _Workbook = interface;
  _WorkbookDisp = dispinterface;
  Workbooks = interface;
  WorkbooksDisp = dispinterface;
  IMenuBars = interface;
  IMenuBar = interface;
  IMenus = interface;
  IMenu = interface;
  IMenuItems = interface;
  IMenuItem = interface;
  ICharts = interface;
  IDrawingObjects = interface;
  IPivotCache = interface;
  IPivotCaches = interface;
  IPivotFormula = interface;
  IPivotFormulas = interface;
  IPivotTable = interface;
  IPivotTables = interface;
  IPivotField = interface;
  IPivotFields = interface;
  ICalculatedFields = interface;
  IPivotItem = interface;
  IPivotItems = interface;
  ICalculatedItems = interface;
  ICharacters = interface;
  IDialogs = interface;
  IDialog = interface;
  ISoundNote = interface;
  IButton = interface;
  IButtons = interface;
  ICheckBox = interface;
  ICheckBoxes = interface;
  IOptionButton = interface;
  IOptionButtons = interface;
  IEditBox = interface;
  IEditBoxes = interface;
  IScrollBar = interface;
  IScrollBars = interface;
  IListBox = interface;
  IListBoxes = interface;
  IGroupBox = interface;
  IGroupBoxes = interface;
  IDropDown = interface;
  IDropDowns = interface;
  ISpinner = interface;
  ISpinners = interface;
  IDialogFrame = interface;
  ILabel = interface;
  ILabels = interface;
  IPanes = interface;
  IPane = interface;
  IScenarios = interface;
  IScenario = interface;
  IGroupObject = interface;
  IGroupObjects = interface;
  ILine = interface;
  ILines = interface;
  IRectangle = interface;
  IRectangles = interface;
  IOval = interface;
  IOvals = interface;
  IArc = interface;
  IArcs = interface;
  IOLEObjectEvents = interface;
  _IOLEObject = interface;
  IOLEObjects = interface;
  ITextBox = interface;
  ITextBoxes = interface;
  IPicture = interface;
  IPictures = interface;
  IDrawing = interface;
  IDrawings = interface;
  IRoutingSlip = interface;
  IOutline = interface;
  IModule = interface;
  IModules = interface;
  IDialogSheet = interface;
  IDialogSheets = interface;
  IWorksheets = interface;
  IPageSetup = interface;
  INames = interface;
  IName = interface;
  IChartObject = interface;
  IChartObjects = interface;
  IMailer = interface;
  ICustomViews = interface;
  ICustomView = interface;
  IFormatConditions = interface;
  IFormatCondition = interface;
  IComments = interface;
  IComment = interface;
  IRefreshEvents = interface;
  _IQueryTable = interface;
  IQueryTables = interface;
  IParameter = interface;
  IParameters = interface;
  IODBCError = interface;
  IODBCErrors = interface;
  IValidation = interface;
  IHyperlinks = interface;
  IHyperlink = interface;
  IAutoFilter = interface;
  IFilters = interface;
  IFilter = interface;
  IAutoCorrect = interface;
  IBorder = interface;
  IInterior = interface;
  IChartFillFormat = interface;
  IChartColorFormat = interface;
  IAxis = interface;
  IChartTitle = interface;
  IAxisTitle = interface;
  IChartGroup = interface;
  IChartGroups = interface;
  IAxes = interface;
  IPoints = interface;
  IPoint = interface;
  ISeries = interface;
  ISeriesCollection = interface;
  IDataLabel = interface;
  IDataLabels = interface;
  ILegendEntry = interface;
  ILegendEntries = interface;
  ILegendKey = interface;
  ITrendlines = interface;
  ITrendline = interface;
  ICorners = interface;
  ISeriesLines = interface;
  IHiLoLines = interface;
  IGridlines = interface;
  IDropLines = interface;
  ILeaderLines = interface;
  IUpBars = interface;
  IDownBars = interface;
  IFloor = interface;
  IWalls = interface;
  ITickLabels = interface;
  IPlotArea = interface;
  IChartArea = interface;
  ILegend = interface;
  IErrorBars = interface;
  IDataTable = interface;
  IPhonetic = interface;
  IShape = interface;
  IShapes = interface;
  IShapeRange = interface;
  IGroupShapes = interface;
  ITextFrame = interface;
  IConnectorFormat = interface;
  IFreeformBuilder = interface;
  IControlFormat = interface;
  IOLEFormat = interface;
  ILinkFormat = interface;
  Font = dispinterface;
  Window = dispinterface;
  Windows = dispinterface;
  AppEvents = dispinterface;
  WorksheetFunction = dispinterface;
  Range = dispinterface;
  ChartEvents = dispinterface;
  VPageBreak = dispinterface;
  HPageBreak = dispinterface;
  HPageBreaks = dispinterface;
  VPageBreaks = dispinterface;
  RecentFile = dispinterface;
  RecentFiles = dispinterface;
  DocEvents = dispinterface;
  Style = dispinterface;
  Styles = dispinterface;
  Borders = dispinterface;
  AddIn = dispinterface;
  AddIns = dispinterface;
  Toolbar = dispinterface;
  Toolbars = dispinterface;
  ToolbarButton = dispinterface;
  ToolbarButtons = dispinterface;
  Areas = dispinterface;
  WorkbookEvents = dispinterface;
  MenuBars = dispinterface;
  MenuBar = dispinterface;
  Menus = dispinterface;
  Menu = dispinterface;
  MenuItems = dispinterface;
  MenuItem = dispinterface;
  Charts = dispinterface;
  DrawingObjects = dispinterface;
  PivotCache = dispinterface;
  PivotCaches = dispinterface;
  PivotFormula = dispinterface;
  PivotFormulas = dispinterface;
  PivotTable = dispinterface;
  PivotTables = dispinterface;
  PivotField = dispinterface;
  PivotFields = dispinterface;
  CalculatedFields = dispinterface;
  PivotItem = dispinterface;
  PivotItems = dispinterface;
  CalculatedItems = dispinterface;
  Characters = dispinterface;
  Dialogs = dispinterface;
  Dialog = dispinterface;
  SoundNote = dispinterface;
  Button = dispinterface;
  Buttons = dispinterface;
  CheckBox = dispinterface;
  CheckBoxes = dispinterface;
  OptionButton = dispinterface;
  OptionButtons = dispinterface;
  EditBox = dispinterface;
  EditBoxes = dispinterface;
  ScrollBar = dispinterface;
  ScrollBars = dispinterface;
  ListBox = dispinterface;
  ListBoxes = dispinterface;
  GroupBox = dispinterface;
  GroupBoxes = dispinterface;
  DropDown = dispinterface;
  DropDowns = dispinterface;
  Spinner = dispinterface;
  Spinners = dispinterface;
  DialogFrame = dispinterface;
  Label_ = dispinterface;
  Labels = dispinterface;
  Panes = dispinterface;
  Pane = dispinterface;
  Scenarios = dispinterface;
  Scenario = dispinterface;
  GroupObject = dispinterface;
  GroupObjects = dispinterface;
  Line = dispinterface;
  Lines = dispinterface;
  Rectangle = dispinterface;
  Rectangles = dispinterface;
  Oval = dispinterface;
  Ovals = dispinterface;
  Arc = dispinterface;
  Arcs = dispinterface;
  OLEObjectEvents = dispinterface;
  _OLEObject = dispinterface;
  OLEObjects = dispinterface;
  TextBox = dispinterface;
  TextBoxes = dispinterface;
  Picture = dispinterface;
  Pictures = dispinterface;
  Drawing = dispinterface;
  Drawings = dispinterface;
  RoutingSlip = dispinterface;
  Outline = dispinterface;
  Module = dispinterface;
  Modules = dispinterface;
  DialogSheet = dispinterface;
  DialogSheets = dispinterface;
  Worksheets = dispinterface;
  PageSetup = dispinterface;
  Names = dispinterface;
  Name = dispinterface;
  ChartObject = dispinterface;
  ChartObjects = dispinterface;
  Mailer = dispinterface;
  CustomViews = dispinterface;
  CustomView = dispinterface;
  FormatConditions = dispinterface;
  FormatCondition = dispinterface;
  Comments = dispinterface;
  Comment = dispinterface;
  RefreshEvents = dispinterface;
  _QueryTable = dispinterface;
  QueryTables = dispinterface;
  Parameter = dispinterface;
  Parameters = dispinterface;
  ODBCError = dispinterface;
  ODBCErrors = dispinterface;
  Validation = dispinterface;
  Hyperlinks = dispinterface;
  Hyperlink = dispinterface;
  AutoFilter = dispinterface;
  Filters = dispinterface;
  Filter = dispinterface;
  AutoCorrect = dispinterface;
  Border = dispinterface;
  Interior = dispinterface;
  ChartFillFormat = dispinterface;
  ChartColorFormat = dispinterface;
  Axis = dispinterface;
  ChartTitle = dispinterface;
  AxisTitle = dispinterface;
  ChartGroup = dispinterface;
  ChartGroups = dispinterface;
  Axes = dispinterface;
  Points = dispinterface;
  Point = dispinterface;
  Series = dispinterface;
  SeriesCollection = dispinterface;
  DataLabel = dispinterface;
  DataLabels = dispinterface;
  LegendEntry = dispinterface;
  LegendEntries = dispinterface;
  LegendKey = dispinterface;
  Trendlines = dispinterface;
  Trendline = dispinterface;
  Corners = dispinterface;
  SeriesLines = dispinterface;
  HiLoLines = dispinterface;
  Gridlines = dispinterface;
  DropLines = dispinterface;
  LeaderLines = dispinterface;
  UpBars = dispinterface;
  DownBars = dispinterface;
  Floor = dispinterface;
  Walls = dispinterface;
  TickLabels = dispinterface;
  PlotArea = dispinterface;
  ChartArea = dispinterface;
  Legend = dispinterface;
  ErrorBars = dispinterface;
  DataTable = dispinterface;
  Phonetic = dispinterface;
  Shape = dispinterface;
  Shapes = dispinterface;
  ShapeRange = dispinterface;
  GroupShapes = dispinterface;
  TextFrame = dispinterface;
  ConnectorFormat = dispinterface;
  FreeformBuilder = dispinterface;
  ControlFormat = dispinterface;
  OLEFormat = dispinterface;
  LinkFormat = dispinterface;
  IDummy = interface;

{ Forward declarations: CoClasses }
  QueryTable = _QueryTable;
  Application = _Application;
  Chart = _Chart;
  Worksheet = _Worksheet;
  Global = _Global;
  Workbook = _Workbook;
  OLEObject = _OLEObject;

{ Forward declarations: Enums }
  Constants = TOleEnum;
  XlCreator = TOleEnum;
  XlChartGallery = TOleEnum;
  XlColorIndex = TOleEnum;
  XlEndStyleCap = TOleEnum;
  XlRowCol = TOleEnum;
  XlScaleType = TOleEnum;
  XlDataSeriesType = TOleEnum;
  XlAxisCrosses = TOleEnum;
  XlAxisGroup = TOleEnum;
  XlBackground = TOleEnum;
  XlWindowState = TOleEnum;
  XlAxisType = TOleEnum;
  XlArrowHeadLength = TOleEnum;
  XlVAlign = TOleEnum;
  XlTickMark = TOleEnum;
  XlErrorBarDirection = TOleEnum;
  XlErrorBarInclude = TOleEnum;
  XlDisplayBlanksAs = TOleEnum;
  XlArrowHeadStyle = TOleEnum;
  XlArrowHeadWidth = TOleEnum;
  XlHAlign = TOleEnum;
  XlTickLabelPosition = TOleEnum;
  XlLegendPosition = TOleEnum;
  XlChartPictureType = TOleEnum;
  XlChartPicturePlacement = TOleEnum;
  XlOrientation = TOleEnum;
  XlTickLabelOrientation = TOleEnum;
  XlBorderWeight = TOleEnum;
  XlDataSeriesDate = TOleEnum;
  XlUnderlineStyle = TOleEnum;
  XlErrorBarType = TOleEnum;
  XlTrendlineType = TOleEnum;
  XlLineStyle = TOleEnum;
  XlDataLabelsType = TOleEnum;
  XlMarkerStyle = TOleEnum;
  XlPictureConvertorType = TOleEnum;
  XlPattern = TOleEnum;
  XlChartSplitType = TOleEnum;
  XlDataLabelPosition = TOleEnum;
  XlTimeUnit = TOleEnum;
  XlCategoryType = TOleEnum;
  XlBarShape = TOleEnum;
  XlChartType = TOleEnum;
  XlChartItem = TOleEnum;
  XlSizeRepresents = TOleEnum;
  XlInsertShiftDirection = TOleEnum;
  XlDeleteShiftDirection = TOleEnum;
  XlDirection = TOleEnum;
  XlConsolidationFunction = TOleEnum;
  XlSheetType = TOleEnum;
  XlLocationInTable = TOleEnum;
  XlFindLookIn = TOleEnum;
  XlWindowType = TOleEnum;
  XlPivotFieldDataType = TOleEnum;
  XlCopyPictureFormat = TOleEnum;
  XlPivotTableSourceType = TOleEnum;
  XlReferenceStyle = TOleEnum;
  XlMSApplication = TOleEnum;
  XlMouseButton = TOleEnum;
  XlCutCopyMode = TOleEnum;
  XlFillWith = TOleEnum;
  XlFilterAction = TOleEnum;
  XlOrder = TOleEnum;
  XlLinkType = TOleEnum;
  XlApplyNamesOrder = TOleEnum;
  XlEnableCancelKey = TOleEnum;
  XlPageBreak = TOleEnum;
  XlOLEType = TOleEnum;
  XlPageOrientation = TOleEnum;
  XlLinkInfo = TOleEnum;
  XlCommandUnderlines = TOleEnum;
  XlOLEVerb = TOleEnum;
  XlCalculation = TOleEnum;
  XlFileAccess = TOleEnum;
  XlEditionType = TOleEnum;
  XlObjectSize = TOleEnum;
  XlLookAt = TOleEnum;
  XlMailSystem = TOleEnum;
  XlLinkInfoType = TOleEnum;
  XlCVError = TOleEnum;
  XlEditionFormat = TOleEnum;
  XlLink = TOleEnum;
  XlCellType = TOleEnum;
  XlArrangeStyle = TOleEnum;
  XlMousePointer = TOleEnum;
  XlEditionOptionsOption = TOleEnum;
  XlAutoFillType = TOleEnum;
  XlAutoFilterOperator = TOleEnum;
  XlClipboardFormat = TOleEnum;
  XlFileFormat = TOleEnum;
  XlApplicationInternational = TOleEnum;
  XlPageBreakExtent = TOleEnum;
  XlCellInsertionMode = TOleEnum;
  XlFormulaLabel = TOleEnum;
  XlHighlightChangesTime = TOleEnum;
  XlCommentDisplayMode = TOleEnum;
  XlFormatConditionType = TOleEnum;
  XlFormatConditionOperator = TOleEnum;
  XlEnableSelection = TOleEnum;
  XlDVType = TOleEnum;
  XlIMEMode = TOleEnum;
  XlDVAlertStyle = TOleEnum;
  XlChartLocation = TOleEnum;
  XlPaperSize = TOleEnum;
  XlPasteSpecialOperation = TOleEnum;
  XlPasteType = TOleEnum;
  XlPhoneticCharacterType = TOleEnum;
  XlPhoneticAlignment = TOleEnum;
  XlPictureAppearance = TOleEnum;
  XlPivotFieldOrientation = TOleEnum;
  XlPivotFieldCalculation = TOleEnum;
  XlPlacement = TOleEnum;
  XlPlatform = TOleEnum;
  XlPrintLocation = TOleEnum;
  XlPriority = TOleEnum;
  XlPTSelectionMode = TOleEnum;
  XlRangeAutoFormat = TOleEnum;
  XlReferenceType = TOleEnum;
  XlRoutingSlipDelivery = TOleEnum;
  XlRoutingSlipStatus = TOleEnum;
  XlRunAutoMacro = TOleEnum;
  XlSaveAction = TOleEnum;
  XlSaveAsAccessMode = TOleEnum;
  XlSaveConflictResolution = TOleEnum;
  XlSearchDirection = TOleEnum;
  XlSearchOrder = TOleEnum;
  XlSheetVisibility = TOleEnum;
  XlSortMethod = TOleEnum;
  XlSortMethodOld = TOleEnum;
  XlSortOrder = TOleEnum;
  XlSortOrientation = TOleEnum;
  XlSortType = TOleEnum;
  XlSpecialCellsValue = TOleEnum;
  XlSubscribeToFormat = TOleEnum;
  XlSummaryRow = TOleEnum;
  XlSummaryColumn = TOleEnum;
  XlSummaryReportType = TOleEnum;
  XlTabPosition = TOleEnum;
  XlTextParsingType = TOleEnum;
  XlTextQualifier = TOleEnum;
  XlWBATemplate = TOleEnum;
  XlWindowView = TOleEnum;
  XlXLMMacroType = TOleEnum;
  XlYesNoGuess = TOleEnum;
  XlDisplayShapes = TOleEnum;
  XlBordersIndex = TOleEnum;
  XlToolbarProtection = TOleEnum;
  XlBuiltInDialog = TOleEnum;
  XlParameterType = TOleEnum;
  XlParameterDataType = TOleEnum;
  XlFormControl = TOleEnum;

  Adjustments = interface(_IMsoDispObj)
    ['{000C0310-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_Count: SYSINT; safecall;
    function Get_Item(Index: SYSINT): Single; safecall;
    procedure Set_Item(Index: SYSINT; Value: Single); safecall;
    property Parent: IDispatch read Get_Parent;
    property Count: SYSINT read Get_Count;
    property Item[Index: SYSINT]: Single read Get_Item write Set_Item; default;
  end;

{ DispInterface declaration for Dual Interface Adjustments }

  AdjustmentsDisp = dispinterface
    ['{000C0310-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property Count: SYSINT readonly dispid 2;
    property Item[Index: SYSINT]: Single dispid 0; default;
  end;

  CalloutFormat = interface(_IMsoDispObj)
    ['{000C0311-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure AutomaticLength; safecall;
    procedure CustomDrop(Drop: Single); safecall;
    procedure CustomLength(Length: Single); safecall;
    procedure PresetDrop(DropType: MsoCalloutDropType); safecall;
    function Get_Accent: MsoTriState; safecall;
    procedure Set_Accent(Value: MsoTriState); safecall;
    function Get_Angle: MsoCalloutAngleType; safecall;
    procedure Set_Angle(Value: MsoCalloutAngleType); safecall;
    function Get_AutoAttach: MsoTriState; safecall;
    procedure Set_AutoAttach(Value: MsoTriState); safecall;
    function Get_AutoLength: MsoTriState; safecall;
    function Get_Border: MsoTriState; safecall;
    procedure Set_Border(Value: MsoTriState); safecall;
    function Get_Drop: Single; safecall;
    function Get_DropType: MsoCalloutDropType; safecall;
    function Get_Gap: Single; safecall;
    procedure Set_Gap(Value: Single); safecall;
    function Get_Length: Single; safecall;
    function Get_Type_: MsoCalloutType; safecall;
    procedure Set_Type_(Value: MsoCalloutType); safecall;
    property Parent: IDispatch read Get_Parent;
    property Accent: MsoTriState read Get_Accent write Set_Accent;
    property Angle: MsoCalloutAngleType read Get_Angle write Set_Angle;
    property AutoAttach: MsoTriState read Get_AutoAttach write Set_AutoAttach;
    property AutoLength: MsoTriState read Get_AutoLength;
    property Border: MsoTriState read Get_Border write Set_Border;
    property Drop: Single read Get_Drop;
    property DropType: MsoCalloutDropType read Get_DropType;
    property Gap: Single read Get_Gap write Set_Gap;
    property Length: Single read Get_Length;
    property Type_: MsoCalloutType read Get_Type_ write Set_Type_;
  end;

{ DispInterface declaration for Dual Interface CalloutFormat }

  CalloutFormatDisp = dispinterface
    ['{000C0311-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure AutomaticLength; dispid 10;
    procedure CustomDrop(Drop: Single); dispid 11;
    procedure CustomLength(Length: Single); dispid 12;
    procedure PresetDrop(DropType: MsoCalloutDropType); dispid 13;
    property Accent: MsoTriState dispid 100;
    property Angle: MsoCalloutAngleType dispid 101;
    property AutoAttach: MsoTriState dispid 102;
    property AutoLength: MsoTriState readonly dispid 103;
    property Border: MsoTriState dispid 104;
    property Drop: Single readonly dispid 105;
    property DropType: MsoCalloutDropType readonly dispid 106;
    property Gap: Single dispid 107;
    property Length: Single readonly dispid 108;
    property Type_: MsoCalloutType dispid 109;
  end;

  ColorFormat = interface(_IMsoDispObj)
    ['{000C0312-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_RGB: MsoRGBType; safecall;
    procedure Set_RGB(Value: MsoRGBType); safecall;
    function Get_SchemeColor: SYSINT; safecall;
    procedure Set_SchemeColor(Value: SYSINT); safecall;
    function Get_Type_: MsoColorType; safecall;
    property Parent: IDispatch read Get_Parent;
    property RGB: MsoRGBType read Get_RGB write Set_RGB;
    property SchemeColor: SYSINT read Get_SchemeColor write Set_SchemeColor;
    property Type_: MsoColorType read Get_Type_;
  end;

{ DispInterface declaration for Dual Interface ColorFormat }

  ColorFormatDisp = dispinterface
    ['{000C0312-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property RGB: MsoRGBType dispid 0;
    property SchemeColor: SYSINT dispid 100;
    property Type_: MsoColorType readonly dispid 101;
  end;

  LineFormat = interface(_IMsoDispObj)
    ['{000C0317-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_BackColor: ColorFormat; safecall;
    procedure Set_BackColor(const Value: ColorFormat); safecall;
    function Get_BeginArrowheadLength: MsoArrowheadLength; safecall;
    procedure Set_BeginArrowheadLength(Value: MsoArrowheadLength); safecall;
    function Get_BeginArrowheadStyle: MsoArrowheadStyle; safecall;
    procedure Set_BeginArrowheadStyle(Value: MsoArrowheadStyle); safecall;
    function Get_BeginArrowheadWidth: MsoArrowheadWidth; safecall;
    procedure Set_BeginArrowheadWidth(Value: MsoArrowheadWidth); safecall;
    function Get_DashStyle: MsoLineDashStyle; safecall;
    procedure Set_DashStyle(Value: MsoLineDashStyle); safecall;
    function Get_EndArrowheadLength: MsoArrowheadLength; safecall;
    procedure Set_EndArrowheadLength(Value: MsoArrowheadLength); safecall;
    function Get_EndArrowheadStyle: MsoArrowheadStyle; safecall;
    procedure Set_EndArrowheadStyle(Value: MsoArrowheadStyle); safecall;
    function Get_EndArrowheadWidth: MsoArrowheadWidth; safecall;
    procedure Set_EndArrowheadWidth(Value: MsoArrowheadWidth); safecall;
    function Get_ForeColor: ColorFormat; safecall;
    procedure Set_ForeColor(const Value: ColorFormat); safecall;
    function Get_Pattern: MsoPatternType; safecall;
    procedure Set_Pattern(Value: MsoPatternType); safecall;
    function Get_Style: MsoLineStyle; safecall;
    procedure Set_Style(Value: MsoLineStyle); safecall;
    function Get_Transparency: Single; safecall;
    procedure Set_Transparency(Value: Single); safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Value: MsoTriState); safecall;
    function Get_Weight: Single; safecall;
    procedure Set_Weight(Value: Single); safecall;
    property Parent: IDispatch read Get_Parent;
    property BackColor: ColorFormat read Get_BackColor write Set_BackColor;
    property BeginArrowheadLength: MsoArrowheadLength read Get_BeginArrowheadLength write Set_BeginArrowheadLength;
    property BeginArrowheadStyle: MsoArrowheadStyle read Get_BeginArrowheadStyle write Set_BeginArrowheadStyle;
    property BeginArrowheadWidth: MsoArrowheadWidth read Get_BeginArrowheadWidth write Set_BeginArrowheadWidth;
    property DashStyle: MsoLineDashStyle read Get_DashStyle write Set_DashStyle;
    property EndArrowheadLength: MsoArrowheadLength read Get_EndArrowheadLength write Set_EndArrowheadLength;
    property EndArrowheadStyle: MsoArrowheadStyle read Get_EndArrowheadStyle write Set_EndArrowheadStyle;
    property EndArrowheadWidth: MsoArrowheadWidth read Get_EndArrowheadWidth write Set_EndArrowheadWidth;
    property ForeColor: ColorFormat read Get_ForeColor write Set_ForeColor;
    property Pattern: MsoPatternType read Get_Pattern write Set_Pattern;
    property Style: MsoLineStyle read Get_Style write Set_Style;
    property Transparency: Single read Get_Transparency write Set_Transparency;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
    property Weight: Single read Get_Weight write Set_Weight;
  end;

{ DispInterface declaration for Dual Interface LineFormat }

  LineFormatDisp = dispinterface
    ['{000C0317-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property BackColor: ColorFormat dispid 100;
    property BeginArrowheadLength: MsoArrowheadLength dispid 101;
    property BeginArrowheadStyle: MsoArrowheadStyle dispid 102;
    property BeginArrowheadWidth: MsoArrowheadWidth dispid 103;
    property DashStyle: MsoLineDashStyle dispid 104;
    property EndArrowheadLength: MsoArrowheadLength dispid 105;
    property EndArrowheadStyle: MsoArrowheadStyle dispid 106;
    property EndArrowheadWidth: MsoArrowheadWidth dispid 107;
    property ForeColor: ColorFormat dispid 108;
    property Pattern: MsoPatternType dispid 109;
    property Style: MsoLineStyle dispid 110;
    property Transparency: Single dispid 111;
    property Visible: MsoTriState dispid 112;
    property Weight: Single dispid 113;
  end;

  ShapeNode = interface(_IMsoDispObj)
    ['{000C0318-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_EditingType: MsoEditingType; safecall;
    function Get_Points: OleVariant; safecall;
    function Get_SegmentType: MsoSegmentType; safecall;
    property Parent: IDispatch read Get_Parent;
    property EditingType: MsoEditingType read Get_EditingType;
    property Points: OleVariant read Get_Points;
    property SegmentType: MsoSegmentType read Get_SegmentType;
  end;

{ DispInterface declaration for Dual Interface ShapeNode }

  ShapeNodeDisp = dispinterface
    ['{000C0318-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property EditingType: MsoEditingType readonly dispid 100;
    property Points: OleVariant readonly dispid 101;
    property SegmentType: MsoSegmentType readonly dispid 102;
  end;

  ShapeNodes = interface(_IMsoDispObj)
    ['{000C0319-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_Count: SYSINT; safecall;
    function Item(Index: OleVariant): ShapeNode; safecall;
    function Get__NewEnum: IUnknown; safecall;
    procedure Delete(Index: SYSINT); safecall;
    procedure Insert(Index: SYSINT; SegmentType: MsoSegmentType; EditingType: MsoEditingType; X1, Y1, X2, Y2, X3, Y3: Single); safecall;
    procedure SetEditingType(Index: SYSINT; EditingType: MsoEditingType); safecall;
    procedure SetPosition(Index: SYSINT; X1, Y1: Single); safecall;
    procedure SetSegmentType(Index: SYSINT; SegmentType: MsoSegmentType); safecall;
    property Parent: IDispatch read Get_Parent;
    property Count: SYSINT read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

{ DispInterface declaration for Dual Interface ShapeNodes }

  ShapeNodesDisp = dispinterface
    ['{000C0319-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property Count: SYSINT readonly dispid 2;
    function Item(Index: OleVariant): ShapeNode; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Delete(Index: SYSINT); dispid 11;
    procedure Insert(Index: SYSINT; SegmentType: MsoSegmentType; EditingType: MsoEditingType; X1, Y1, X2, Y2, X3, Y3: Single); dispid 12;
    procedure SetEditingType(Index: SYSINT; EditingType: MsoEditingType); dispid 13;
    procedure SetPosition(Index: SYSINT; X1, Y1: Single); dispid 14;
    procedure SetSegmentType(Index: SYSINT; SegmentType: MsoSegmentType); dispid 15;
  end;

  PictureFormat = interface(_IMsoDispObj)
    ['{000C031A-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure IncrementBrightness(Increment: Single); safecall;
    procedure IncrementContrast(Increment: Single); safecall;
    function Get_Brightness: Single; safecall;
    procedure Set_Brightness(Value: Single); safecall;
    function Get_ColorType: MsoPictureColorType; safecall;
    procedure Set_ColorType(Value: MsoPictureColorType); safecall;
    function Get_Contrast: Single; safecall;
    procedure Set_Contrast(Value: Single); safecall;
    function Get_CropBottom: Single; safecall;
    procedure Set_CropBottom(Value: Single); safecall;
    function Get_CropLeft: Single; safecall;
    procedure Set_CropLeft(Value: Single); safecall;
    function Get_CropRight: Single; safecall;
    procedure Set_CropRight(Value: Single); safecall;
    function Get_CropTop: Single; safecall;
    procedure Set_CropTop(Value: Single); safecall;
    function Get_TransparencyColor: MsoRGBType; safecall;
    procedure Set_TransparencyColor(Value: MsoRGBType); safecall;
    function Get_TransparentBackground: MsoTriState; safecall;
    procedure Set_TransparentBackground(Value: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property Brightness: Single read Get_Brightness write Set_Brightness;
    property ColorType: MsoPictureColorType read Get_ColorType write Set_ColorType;
    property Contrast: Single read Get_Contrast write Set_Contrast;
    property CropBottom: Single read Get_CropBottom write Set_CropBottom;
    property CropLeft: Single read Get_CropLeft write Set_CropLeft;
    property CropRight: Single read Get_CropRight write Set_CropRight;
    property CropTop: Single read Get_CropTop write Set_CropTop;
    property TransparencyColor: MsoRGBType read Get_TransparencyColor write Set_TransparencyColor;
    property TransparentBackground: MsoTriState read Get_TransparentBackground write Set_TransparentBackground;
  end;

{ DispInterface declaration for Dual Interface PictureFormat }

  PictureFormatDisp = dispinterface
    ['{000C031A-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure IncrementBrightness(Increment: Single); dispid 10;
    procedure IncrementContrast(Increment: Single); dispid 11;
    property Brightness: Single dispid 100;
    property ColorType: MsoPictureColorType dispid 101;
    property Contrast: Single dispid 102;
    property CropBottom: Single dispid 103;
    property CropLeft: Single dispid 104;
    property CropRight: Single dispid 105;
    property CropTop: Single dispid 106;
    property TransparencyColor: MsoRGBType dispid 107;
    property TransparentBackground: MsoTriState dispid 108;
  end;

  ShadowFormat = interface(_IMsoDispObj)
    ['{000C031B-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure IncrementOffsetX(Increment: Single); safecall;
    procedure IncrementOffsetY(Increment: Single); safecall;
    function Get_ForeColor: ColorFormat; safecall;
    procedure Set_ForeColor(const Value: ColorFormat); safecall;
    function Get_Obscured: MsoTriState; safecall;
    procedure Set_Obscured(Value: MsoTriState); safecall;
    function Get_OffsetX: Single; safecall;
    procedure Set_OffsetX(Value: Single); safecall;
    function Get_OffsetY: Single; safecall;
    procedure Set_OffsetY(Value: Single); safecall;
    function Get_Transparency: Single; safecall;
    procedure Set_Transparency(Value: Single); safecall;
    function Get_Type_: MsoShadowType; safecall;
    procedure Set_Type_(Value: MsoShadowType); safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Value: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property ForeColor: ColorFormat read Get_ForeColor write Set_ForeColor;
    property Obscured: MsoTriState read Get_Obscured write Set_Obscured;
    property OffsetX: Single read Get_OffsetX write Set_OffsetX;
    property OffsetY: Single read Get_OffsetY write Set_OffsetY;
    property Transparency: Single read Get_Transparency write Set_Transparency;
    property Type_: MsoShadowType read Get_Type_ write Set_Type_;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
  end;

{ DispInterface declaration for Dual Interface ShadowFormat }

  ShadowFormatDisp = dispinterface
    ['{000C031B-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure IncrementOffsetX(Increment: Single); dispid 10;
    procedure IncrementOffsetY(Increment: Single); dispid 11;
    property ForeColor: ColorFormat dispid 100;
    property Obscured: MsoTriState dispid 101;
    property OffsetX: Single dispid 102;
    property OffsetY: Single dispid 103;
    property Transparency: Single dispid 104;
    property Type_: MsoShadowType dispid 105;
    property Visible: MsoTriState dispid 106;
  end;

  TextEffectFormat = interface(_IMsoDispObj)
    ['{000C031F-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure ToggleVerticalText; safecall;
    function Get_Alignment: MsoTextEffectAlignment; safecall;
    procedure Set_Alignment(Value: MsoTextEffectAlignment); safecall;
    function Get_FontBold: MsoTriState; safecall;
    procedure Set_FontBold(Value: MsoTriState); safecall;
    function Get_FontItalic: MsoTriState; safecall;
    procedure Set_FontItalic(Value: MsoTriState); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const Value: WideString); safecall;
    function Get_FontSize: Single; safecall;
    procedure Set_FontSize(Value: Single); safecall;
    function Get_KernedPairs: MsoTriState; safecall;
    procedure Set_KernedPairs(Value: MsoTriState); safecall;
    function Get_NormalizedHeight: MsoTriState; safecall;
    procedure Set_NormalizedHeight(Value: MsoTriState); safecall;
    function Get_PresetShape: MsoPresetTextEffectShape; safecall;
    procedure Set_PresetShape(Value: MsoPresetTextEffectShape); safecall;
    function Get_PresetTextEffect: MsoPresetTextEffect; safecall;
    procedure Set_PresetTextEffect(Value: MsoPresetTextEffect); safecall;
    function Get_RotatedChars: MsoTriState; safecall;
    procedure Set_RotatedChars(Value: MsoTriState); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Value: WideString); safecall;
    function Get_Tracking: Single; safecall;
    procedure Set_Tracking(Value: Single); safecall;
    property Parent: IDispatch read Get_Parent;
    property Alignment: MsoTextEffectAlignment read Get_Alignment write Set_Alignment;
    property FontBold: MsoTriState read Get_FontBold write Set_FontBold;
    property FontItalic: MsoTriState read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Single read Get_FontSize write Set_FontSize;
    property KernedPairs: MsoTriState read Get_KernedPairs write Set_KernedPairs;
    property NormalizedHeight: MsoTriState read Get_NormalizedHeight write Set_NormalizedHeight;
    property PresetShape: MsoPresetTextEffectShape read Get_PresetShape write Set_PresetShape;
    property PresetTextEffect: MsoPresetTextEffect read Get_PresetTextEffect write Set_PresetTextEffect;
    property RotatedChars: MsoTriState read Get_RotatedChars write Set_RotatedChars;
    property Text: WideString read Get_Text write Set_Text;
    property Tracking: Single read Get_Tracking write Set_Tracking;
  end;

{ DispInterface declaration for Dual Interface TextEffectFormat }

  TextEffectFormatDisp = dispinterface
    ['{000C031F-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure ToggleVerticalText; dispid 10;
    property Alignment: MsoTextEffectAlignment dispid 100;
    property FontBold: MsoTriState dispid 101;
    property FontItalic: MsoTriState dispid 102;
    property FontName: WideString dispid 103;
    property FontSize: Single dispid 104;
    property KernedPairs: MsoTriState dispid 105;
    property NormalizedHeight: MsoTriState dispid 106;
    property PresetShape: MsoPresetTextEffectShape dispid 107;
    property PresetTextEffect: MsoPresetTextEffect dispid 108;
    property RotatedChars: MsoTriState dispid 109;
    property Text: WideString dispid 110;
    property Tracking: Single dispid 111;
  end;

  ThreeDFormat = interface(_IMsoDispObj)
    ['{000C0321-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure IncrementRotationX(Increment: Single); safecall;
    procedure IncrementRotationY(Increment: Single); safecall;
    procedure ResetRotation; safecall;
    procedure SetThreeDFormat(PresetThreeDFormat: MsoPresetThreeDFormat); safecall;
    procedure SetExtrusionDirection(PresetExtrusionDirection: MsoPresetExtrusionDirection); safecall;
    function Get_Depth: Single; safecall;
    procedure Set_Depth(Value: Single); safecall;
    function Get_ExtrusionColor: ColorFormat; safecall;
    function Get_ExtrusionColorType: MsoExtrusionColorType; safecall;
    procedure Set_ExtrusionColorType(Value: MsoExtrusionColorType); safecall;
    function Get_Perspective: MsoTriState; safecall;
    procedure Set_Perspective(Value: MsoTriState); safecall;
    function Get_PresetExtrusionDirection: MsoPresetExtrusionDirection; safecall;
    function Get_PresetLightingDirection: MsoPresetLightingDirection; safecall;
    procedure Set_PresetLightingDirection(Value: MsoPresetLightingDirection); safecall;
    function Get_PresetLightingSoftness: MsoPresetLightingSoftness; safecall;
    procedure Set_PresetLightingSoftness(Value: MsoPresetLightingSoftness); safecall;
    function Get_PresetMaterial: MsoPresetMaterial; safecall;
    procedure Set_PresetMaterial(Value: MsoPresetMaterial); safecall;
    function Get_PresetThreeDFormat: MsoPresetThreeDFormat; safecall;
    function Get_RotationX: Single; safecall;
    procedure Set_RotationX(Value: Single); safecall;
    function Get_RotationY: Single; safecall;
    procedure Set_RotationY(Value: Single); safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Value: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property Depth: Single read Get_Depth write Set_Depth;
    property ExtrusionColor: ColorFormat read Get_ExtrusionColor;
    property ExtrusionColorType: MsoExtrusionColorType read Get_ExtrusionColorType write Set_ExtrusionColorType;
    property Perspective: MsoTriState read Get_Perspective write Set_Perspective;
    property PresetExtrusionDirection: MsoPresetExtrusionDirection read Get_PresetExtrusionDirection;
    property PresetLightingDirection: MsoPresetLightingDirection read Get_PresetLightingDirection write Set_PresetLightingDirection;
    property PresetLightingSoftness: MsoPresetLightingSoftness read Get_PresetLightingSoftness write Set_PresetLightingSoftness;
    property PresetMaterial: MsoPresetMaterial read Get_PresetMaterial write Set_PresetMaterial;
    property PresetThreeDFormat: MsoPresetThreeDFormat read Get_PresetThreeDFormat;
    property RotationX: Single read Get_RotationX write Set_RotationX;
    property RotationY: Single read Get_RotationY write Set_RotationY;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
  end;

{ DispInterface declaration for Dual Interface ThreeDFormat }

  ThreeDFormatDisp = dispinterface
    ['{000C0321-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure IncrementRotationX(Increment: Single); dispid 10;
    procedure IncrementRotationY(Increment: Single); dispid 11;
    procedure ResetRotation; dispid 12;
    procedure SetThreeDFormat(PresetThreeDFormat: MsoPresetThreeDFormat); dispid 13;
    procedure SetExtrusionDirection(PresetExtrusionDirection: MsoPresetExtrusionDirection); dispid 14;
    property Depth: Single dispid 100;
    property ExtrusionColor: ColorFormat readonly dispid 101;
    property ExtrusionColorType: MsoExtrusionColorType dispid 102;
    property Perspective: MsoTriState dispid 103;
    property PresetExtrusionDirection: MsoPresetExtrusionDirection readonly dispid 104;
    property PresetLightingDirection: MsoPresetLightingDirection dispid 105;
    property PresetLightingSoftness: MsoPresetLightingSoftness dispid 106;
    property PresetMaterial: MsoPresetMaterial dispid 107;
    property PresetThreeDFormat: MsoPresetThreeDFormat readonly dispid 108;
    property RotationX: Single dispid 109;
    property RotationY: Single dispid 110;
    property Visible: MsoTriState dispid 111;
  end;

  FillFormat = interface(_IMsoDispObj)
    ['{000C0314-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure Background; safecall;
    procedure OneColorGradient(Style: MsoGradientStyle; Variant: SYSINT; Degree: Single); safecall;
    procedure Patterned(Pattern: MsoPatternType); safecall;
    procedure PresetGradient(Style: MsoGradientStyle; Variant: SYSINT; PresetGradientType: MsoPresetGradientType); safecall;
    procedure PresetTextured(PresetTexture: MsoPresetTexture); safecall;
    procedure Solid; safecall;
    procedure TwoColorGradient(Style: MsoGradientStyle; Variant: SYSINT); safecall;
    procedure UserPicture(const PictureFile: WideString); safecall;
    procedure UserTextured(const TextureFile: WideString); safecall;
    function Get_BackColor: ColorFormat; safecall;
    procedure Set_BackColor(const Value: ColorFormat); safecall;
    function Get_ForeColor: ColorFormat; safecall;
    procedure Set_ForeColor(const Value: ColorFormat); safecall;
    function Get_GradientColorType: MsoGradientColorType; safecall;
    function Get_GradientDegree: Single; safecall;
    function Get_GradientStyle: MsoGradientStyle; safecall;
    function Get_GradientVariant: SYSINT; safecall;
    function Get_Pattern: MsoPatternType; safecall;
    function Get_PresetGradientType: MsoPresetGradientType; safecall;
    function Get_PresetTexture: MsoPresetTexture; safecall;
    function Get_TextureName: WideString; safecall;
    function Get_TextureType: MsoTextureType; safecall;
    function Get_Transparency: Single; safecall;
    procedure Set_Transparency(Value: Single); safecall;
    function Get_Type_: MsoFillType; safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Value: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property BackColor: ColorFormat read Get_BackColor write Set_BackColor;
    property ForeColor: ColorFormat read Get_ForeColor write Set_ForeColor;
    property GradientColorType: MsoGradientColorType read Get_GradientColorType;
    property GradientDegree: Single read Get_GradientDegree;
    property GradientStyle: MsoGradientStyle read Get_GradientStyle;
    property GradientVariant: SYSINT read Get_GradientVariant;
    property Pattern: MsoPatternType read Get_Pattern;
    property PresetGradientType: MsoPresetGradientType read Get_PresetGradientType;
    property PresetTexture: MsoPresetTexture read Get_PresetTexture;
    property TextureName: WideString read Get_TextureName;
    property TextureType: MsoTextureType read Get_TextureType;
    property Transparency: Single read Get_Transparency write Set_Transparency;
    property Type_: MsoFillType read Get_Type_;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
  end;

{ DispInterface declaration for Dual Interface FillFormat }

  FillFormatDisp = dispinterface
    ['{000C0314-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure Background; dispid 10;
    procedure OneColorGradient(Style: MsoGradientStyle; Variant: SYSINT; Degree: Single); dispid 11;
    procedure Patterned(Pattern: MsoPatternType); dispid 12;
    procedure PresetGradient(Style: MsoGradientStyle; Variant: SYSINT; PresetGradientType: MsoPresetGradientType); dispid 13;
    procedure PresetTextured(PresetTexture: MsoPresetTexture); dispid 14;
    procedure Solid; dispid 15;
    procedure TwoColorGradient(Style: MsoGradientStyle; Variant: SYSINT); dispid 16;
    procedure UserPicture(const PictureFile: WideString); dispid 17;
    procedure UserTextured(const TextureFile: WideString); dispid 18;
    property BackColor: ColorFormat dispid 100;
    property ForeColor: ColorFormat dispid 101;
    property GradientColorType: MsoGradientColorType readonly dispid 102;
    property GradientDegree: Single readonly dispid 103;
    property GradientStyle: MsoGradientStyle readonly dispid 104;
    property GradientVariant: SYSINT readonly dispid 105;
    property Pattern: MsoPatternType readonly dispid 106;
    property PresetGradientType: MsoPresetGradientType readonly dispid 107;
    property PresetTexture: MsoPresetTexture readonly dispid 108;
    property TextureName: WideString readonly dispid 109;
    property TextureType: MsoTextureType readonly dispid 110;
    property Transparency: Single dispid 111;
    property Type_: MsoFillType readonly dispid 112;
    property Visible: MsoTriState dispid 113;
  end;

  IFont = interface(IDispatch)
    ['{0002084D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Background(out Retval: OleVariant): HResult; stdcall;
    function Set_Background(Value: OleVariant): HResult; stdcall;
    function Get_Bold(out Retval: OleVariant): HResult; stdcall;
    function Set_Bold(Value: OleVariant): HResult; stdcall;
    function Get_Color(out Retval: OleVariant): HResult; stdcall;
    function Set_Color(Value: OleVariant): HResult; stdcall;
    function Get_ColorIndex(out Retval: OleVariant): HResult; stdcall;
    function Set_ColorIndex(Value: OleVariant): HResult; stdcall;
    function Get_FontStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_FontStyle(Value: OleVariant): HResult; stdcall;
    function Get_Italic(out Retval: OleVariant): HResult; stdcall;
    function Set_Italic(Value: OleVariant): HResult; stdcall;
    function Get_Name(out Retval: OleVariant): HResult; stdcall;
    function Set_Name(Value: OleVariant): HResult; stdcall;
    function Get_OutlineFont(out Retval: OleVariant): HResult; stdcall;
    function Set_OutlineFont(Value: OleVariant): HResult; stdcall;
    function Get_Shadow(out Retval: OleVariant): HResult; stdcall;
    function Set_Shadow(Value: OleVariant): HResult; stdcall;
    function Get_Size(out Retval: OleVariant): HResult; stdcall;
    function Set_Size(Value: OleVariant): HResult; stdcall;
    function Get_Strikethrough(out Retval: OleVariant): HResult; stdcall;
    function Set_Strikethrough(Value: OleVariant): HResult; stdcall;
    function Get_Subscript(out Retval: OleVariant): HResult; stdcall;
    function Set_Subscript(Value: OleVariant): HResult; stdcall;
    function Get_Superscript(out Retval: OleVariant): HResult; stdcall;
    function Set_Superscript(Value: OleVariant): HResult; stdcall;
    function Get_Underline(out Retval: OleVariant): HResult; stdcall;
    function Set_Underline(Value: OleVariant): HResult; stdcall;
  end;

  IWindow = interface(IDispatch)
    ['{00020893-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate: HResult; stdcall;
    function ActivateNext: HResult; stdcall;
    function ActivatePrevious: HResult; stdcall;
    function Get_ActiveCell(out Retval: Range): HResult; stdcall;
    function Get_ActiveChart(out Retval: Chart): HResult; stdcall;
    function Get_ActivePane(out Retval: Pane): HResult; stdcall;
    function Get_ActiveSheet(out Retval: IDispatch): HResult; stdcall;
    function Get_Caption(out Retval: OleVariant): HResult; stdcall;
    function Set_Caption(Value: OleVariant): HResult; stdcall;
    function Close(SaveChanges, Filename, RouteWorkbook: OleVariant): HResult; stdcall;
    function Get_DisplayFormulas(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayFormulas(Value: WordBool): HResult; stdcall;
    function Get_DisplayGridlines(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayGridlines(Value: WordBool): HResult; stdcall;
    function Get_DisplayHeadings(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayHeadings(Value: WordBool): HResult; stdcall;
    function Get_DisplayHorizontalScrollBar(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayHorizontalScrollBar(Value: WordBool): HResult; stdcall;
    function Get_DisplayOutline(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayOutline(Value: WordBool): HResult; stdcall;
    function Get_DisplayRightToLeft(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayRightToLeft(Value: WordBool): HResult; stdcall;
    function Get_DisplayVerticalScrollBar(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayVerticalScrollBar(Value: WordBool): HResult; stdcall;
    function Get_DisplayWorkbookTabs(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayWorkbookTabs(Value: WordBool): HResult; stdcall;
    function Get_DisplayZeros(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayZeros(Value: WordBool): HResult; stdcall;
    function Get_EnableResize(out Retval: WordBool): HResult; stdcall;
    function Set_EnableResize(Value: WordBool): HResult; stdcall;
    function Get_FreezePanes(out Retval: WordBool): HResult; stdcall;
    function Set_FreezePanes(Value: WordBool): HResult; stdcall;
    function Get_GridlineColor(out Retval: Integer): HResult; stdcall;
    function Set_GridlineColor(Value: Integer): HResult; stdcall;
    function Get_GridlineColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_GridlineColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function LargeScroll(Down, Up, ToRight, ToLeft: OleVariant): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function NewWindow(out Retval: Window): HResult; stdcall;
    function Get_OnWindow(out Retval: WideString): HResult; stdcall;
    function Set_OnWindow(const Value: WideString): HResult; stdcall;
    function Get_Panes(out Retval: Panes): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant): HResult; stdcall;
    function Get_RangeSelection(out Retval: Range): HResult; stdcall;
    function Get_ScrollColumn(out Retval: Integer): HResult; stdcall;
    function Set_ScrollColumn(Value: Integer): HResult; stdcall;
    function Get_ScrollRow(out Retval: Integer): HResult; stdcall;
    function Set_ScrollRow(Value: Integer): HResult; stdcall;
    function ScrollWorkbookTabs(Sheets, Position: OleVariant): HResult; stdcall;
    function Get_SelectedSheets(out Retval: Sheets): HResult; stdcall;
    function Get_Selection(out Retval: IDispatch): HResult; stdcall;
    function SmallScroll(Down, Up, ToRight, ToLeft: OleVariant): HResult; stdcall;
    function Get_Split(out Retval: WordBool): HResult; stdcall;
    function Set_Split(Value: WordBool): HResult; stdcall;
    function Get_SplitColumn(out Retval: Integer): HResult; stdcall;
    function Set_SplitColumn(Value: Integer): HResult; stdcall;
    function Get_SplitHorizontal(out Retval: Double): HResult; stdcall;
    function Set_SplitHorizontal(Value: Double): HResult; stdcall;
    function Get_SplitRow(out Retval: Integer): HResult; stdcall;
    function Set_SplitRow(Value: Integer): HResult; stdcall;
    function Get_SplitVertical(out Retval: Double): HResult; stdcall;
    function Set_SplitVertical(Value: Double): HResult; stdcall;
    function Get_TabRatio(out Retval: Double): HResult; stdcall;
    function Set_TabRatio(Value: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_Type_(out Retval: XlWindowType): HResult; stdcall;
    function Get_UsableHeight(out Retval: Double): HResult; stdcall;
    function Get_UsableWidth(out Retval: Double): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_VisibleRange(out Retval: Range): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_WindowNumber(out Retval: Integer): HResult; stdcall;
    function Get_WindowState(out Retval: XlWindowState): HResult; stdcall;
    function Set_WindowState(Value: XlWindowState): HResult; stdcall;
    function Get_Zoom(out Retval: OleVariant): HResult; stdcall;
    function Set_Zoom(Value: OleVariant): HResult; stdcall;
    function Get_View(out Retval: XlWindowView): HResult; stdcall;
    function Set_View(Value: XlWindowView): HResult; stdcall;
  end;

  IWindows = interface(IDispatch)
    ['{00020892-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Arrange(ArrangeStyle: XlArrangeStyle; ActiveWorkbook, SyncHorizontal, SyncVertical: OleVariant): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: Window): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: Window): HResult; stdcall;
  end;

  IAppEvents = interface(IDispatch)
    ['{00024413-0001-0000-C000-000000000046}']
    function NewWorkbook(const Wb: Workbook): HResult; stdcall;
    function SheetSelectionChange(Sh: IDispatch; const Target: Range): HResult; stdcall;
    function SheetBeforeDoubleClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetBeforeRightClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetActivate(Sh: IDispatch): HResult; stdcall;
    function SheetDeactivate(Sh: IDispatch): HResult; stdcall;
    function SheetCalculate(Sh: IDispatch): HResult; stdcall;
    function SheetChange(Sh: IDispatch; const Target: Range): HResult; stdcall;
    function WorkbookOpen(const Wb: Workbook): HResult; stdcall;
    function WorkbookActivate(const Wb: Workbook): HResult; stdcall;
    function WorkbookDeactivate(const Wb: Workbook): HResult; stdcall;
    function WorkbookBeforeClose(const Wb: Workbook; var Cancel: WordBool): HResult; stdcall;
    function WorkbookBeforeSave(const Wb: Workbook; SaveAsUI: WordBool; var Cancel: WordBool): HResult; stdcall;
    function WorkbookBeforePrint(const Wb: Workbook; var Cancel: WordBool): HResult; stdcall;
    function WorkbookNewSheet(const Wb: Workbook; Sh: IDispatch): HResult; stdcall;
    function WorkbookAddinInstall(const Wb: Workbook): HResult; stdcall;
    function WorkbookAddinUninstall(const Wb: Workbook): HResult; stdcall;
    function WindowResize(const Wb: Workbook; const Wn: Window): HResult; stdcall;
    function WindowActivate(const Wb: Workbook; const Wn: Window): HResult; stdcall;
    function WindowDeactivate(const Wb: Workbook; const Wn: Window): HResult; stdcall;
  end;

  _Application = interface(IDispatch)
    ['{000208D5-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: Application; safecall;
    function Get_ActiveCell: Range; safecall;
    function Get_ActiveChart: Chart; safecall;
    function Get_ActiveDialog: DialogSheet; safecall;
    function Get_ActiveMenuBar: MenuBar; safecall;
    function Get_ActivePrinter(lcid: Integer): WideString; safecall;
    procedure Set_ActivePrinter(lcid: Integer; const Value: WideString); safecall;
    function Get_ActiveSheet: IDispatch; safecall;
    function Get_ActiveWindow: Window; safecall;
    function Get_ActiveWorkbook: Workbook; safecall;
    function Get_AddIns: AddIns; safecall;
    function Get_Assistant: Assistant; safecall;
    procedure Calculate(lcid: Integer); safecall;
    function Get_Cells: Range; safecall;
    function Get_Charts: Sheets; safecall;
    function Get_Columns: Range; safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_DDEAppReturnCode(lcid: Integer): Integer; safecall;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); safecall;
    function DDEInitiate(const App, Topic: WideString; lcid: Integer): Integer; safecall;
    procedure DDEPoke(Channel: Integer; Item, Data: OleVariant; lcid: Integer); safecall;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; safecall;
    procedure DDETerminate(Channel, lcid: Integer); safecall;
    function Get_DialogSheets: Sheets; safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; safecall;
    function Intersect(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_MenuBars: MenuBars; safecall;
    function Get_Modules: Modules; safecall;
    function Get_Names: Names; safecall;
    function Get_Range(Cell1, Cell2: OleVariant): Range; safecall;
    function Get_Rows: Range; safecall;
    function Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; safecall;
    function _Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Selection(lcid: Integer): IDispatch; safecall;
    procedure SendKeys(Keys, Wait: OleVariant; lcid: Integer); safecall;
    function Get_Sheets: Sheets; safecall;
    function Get_ShortcutMenus(Index: Integer): Menu; safecall;
    function Get_ThisWorkbook(lcid: Integer): Workbook; safecall;
    function Get_Toolbars: Toolbars; safecall;
    function Union(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_Windows: Windows; safecall;
    function Get_Workbooks: Workbooks; safecall;
    function Get_WorksheetFunction: WorksheetFunction; safecall;
    function Get_Worksheets: Sheets; safecall;
    function Get_Excel4IntlMacroSheets: Sheets; safecall;
    function Get_Excel4MacroSheets: Sheets; safecall;
    procedure ActivateMicrosoftApp(Index: XlMSApplication; lcid: Integer); safecall;
    procedure AddChartAutoFormat(Chart: OleVariant; const Name: WideString; Description: OleVariant; lcid: Integer); safecall;
    procedure AddCustomList(ListArray, ByRow: OleVariant; lcid: Integer); safecall;
    function Get_AlertBeforeOverwriting(lcid: Integer): WordBool; safecall;
    procedure Set_AlertBeforeOverwriting(lcid: Integer; Value: WordBool); safecall;
    function Get_AltStartupPath(lcid: Integer): WideString; safecall;
    procedure Set_AltStartupPath(lcid: Integer; const Value: WideString); safecall;
    function Get_AskToUpdateLinks(lcid: Integer): WordBool; safecall;
    procedure Set_AskToUpdateLinks(lcid: Integer; Value: WordBool); safecall;
    function Get_EnableAnimations(lcid: Integer): WordBool; safecall;
    procedure Set_EnableAnimations(lcid: Integer; Value: WordBool); safecall;
    function Get_AutoCorrect: AutoCorrect; safecall;
    function Get_Build(lcid: Integer): Integer; safecall;
    function Get_CalculateBeforeSave(lcid: Integer): WordBool; safecall;
    procedure Set_CalculateBeforeSave(lcid: Integer; Value: WordBool); safecall;
    function Get_Calculation(lcid: Integer): XlCalculation; safecall;
    procedure Set_Calculation(lcid: Integer; Value: XlCalculation); safecall;
    function Get_Caller(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_CanPlaySounds(lcid: Integer): WordBool; safecall;
    function Get_CanRecordSounds(lcid: Integer): WordBool; safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Value: WideString); safecall;
    function Get_CellDragAndDrop(lcid: Integer): WordBool; safecall;
    procedure Set_CellDragAndDrop(lcid: Integer; Value: WordBool); safecall;
    function CentimetersToPoints(Centimeters: Double; lcid: Integer): Double; safecall;
    function CheckSpelling(const Word: WideString; CustomDictionary, IgnoreUppercase: OleVariant; lcid: Integer): WordBool; safecall;
    function Get_ClipboardFormats(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_DisplayClipboardWindow(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayClipboardWindow(lcid: Integer; Value: WordBool); safecall;
    function Get_ColorButtons: WordBool; safecall;
    procedure Set_ColorButtons(Value: WordBool); safecall;
    function Get_CommandUnderlines(lcid: Integer): XlCommandUnderlines; safecall;
    procedure Set_CommandUnderlines(lcid: Integer; Value: XlCommandUnderlines); safecall;
    function Get_ConstrainNumeric(lcid: Integer): WordBool; safecall;
    procedure Set_ConstrainNumeric(lcid: Integer; Value: WordBool); safecall;
    function ConvertFormula(Formula: OleVariant; FromReferenceStyle: XlReferenceStyle; ToReferenceStyle, ToAbsolute, RelativeTo: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_CopyObjectsWithCells(lcid: Integer): WordBool; safecall;
    procedure Set_CopyObjectsWithCells(lcid: Integer; Value: WordBool); safecall;
    function Get_Cursor(lcid: Integer): XlMousePointer; safecall;
    procedure Set_Cursor(lcid: Integer; Value: XlMousePointer); safecall;
    function Get_CustomListCount(lcid: Integer): Integer; safecall;
    function Get_CutCopyMode(lcid: Integer): XlCutCopyMode; safecall;
    procedure Set_CutCopyMode(lcid: Integer; Value: XlCutCopyMode); safecall;
    function Get_DataEntryMode(lcid: Integer): Integer; safecall;
    procedure Set_DataEntryMode(lcid: Integer; Value: Integer); safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure Dummy7; safecall;
    procedure Dummy8; safecall;
    procedure Dummy9; safecall;
    procedure Dummy10; safecall;
    procedure Dummy11; safecall;
    function Get__Default: WideString; safecall;
    function Get_DefaultFilePath(lcid: Integer): WideString; safecall;
    procedure Set_DefaultFilePath(lcid: Integer; const Value: WideString); safecall;
    procedure DeleteChartAutoFormat(const Name: WideString; lcid: Integer); safecall;
    procedure DeleteCustomList(ListNum, lcid: Integer); safecall;
    function Get_Dialogs: Dialogs; safecall;
    function Get_DisplayAlerts(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayAlerts(lcid: Integer; Value: WordBool); safecall;
    function Get_DisplayFormulaBar(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayFormulaBar(lcid: Integer; Value: WordBool); safecall;
    function Get_DisplayFullScreen(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayFullScreen(lcid: Integer; Value: WordBool); safecall;
    function Get_DisplayNoteIndicator: WordBool; safecall;
    procedure Set_DisplayNoteIndicator(Value: WordBool); safecall;
    function Get_DisplayCommentIndicator: XlCommentDisplayMode; safecall;
    procedure Set_DisplayCommentIndicator(Value: XlCommentDisplayMode); safecall;
    function Get_DisplayExcel4Menus(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayExcel4Menus(lcid: Integer; Value: WordBool); safecall;
    function Get_DisplayRecentFiles: WordBool; safecall;
    procedure Set_DisplayRecentFiles(Value: WordBool); safecall;
    function Get_DisplayScrollBars(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayScrollBars(lcid: Integer; Value: WordBool); safecall;
    function Get_DisplayStatusBar(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayStatusBar(lcid: Integer; Value: WordBool); safecall;
    procedure DoubleClick(lcid: Integer); safecall;
    function Get_EditDirectlyInCell(lcid: Integer): WordBool; safecall;
    procedure Set_EditDirectlyInCell(lcid: Integer; Value: WordBool); safecall;
    function Get_EnableAutoComplete: WordBool; safecall;
    procedure Set_EnableAutoComplete(Value: WordBool); safecall;
    function Get_EnableCancelKey(lcid: Integer): XlEnableCancelKey; safecall;
    procedure Set_EnableCancelKey(lcid: Integer; Value: XlEnableCancelKey); safecall;
    function Get_EnableSound: WordBool; safecall;
    procedure Set_EnableSound(Value: WordBool); safecall;
    function Get_EnableTipWizard(lcid: Integer): WordBool; safecall;
    procedure Set_EnableTipWizard(lcid: Integer; Value: WordBool); safecall;
    function Get_FileConverters(Index1, Index2: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_FileSearch: FileSearch; safecall;
    function Get_FileFind: IFind; safecall;
    procedure FindFile(lcid: Integer); safecall;
    function Get_FixedDecimal(lcid: Integer): WordBool; safecall;
    procedure Set_FixedDecimal(lcid: Integer; Value: WordBool); safecall;
    function Get_FixedDecimalPlaces(lcid: Integer): Integer; safecall;
    procedure Set_FixedDecimalPlaces(lcid: Integer; Value: Integer); safecall;
    function GetCustomListContents(ListNum, lcid: Integer): OleVariant; safecall;
    function GetCustomListNum(ListArray: OleVariant; lcid: Integer): Integer; safecall;
    function GetOpenFilename(FileFilter, FilterIndex, Title, ButtonText, MultiSelect: OleVariant; lcid: Integer): OleVariant; safecall;
    function GetSaveAsFilename(InitialFilename, FileFilter, FilterIndex, Title, ButtonText: OleVariant; lcid: Integer): OleVariant; safecall;
    procedure Goto_(Reference, Scroll: OleVariant; lcid: Integer); safecall;
    function Get_Height(lcid: Integer): Double; safecall;
    procedure Set_Height(lcid: Integer; Value: Double); safecall;
    procedure Help(HelpFile, HelpContextID: OleVariant; lcid: Integer); safecall;
    function Get_IgnoreRemoteRequests(lcid: Integer): WordBool; safecall;
    procedure Set_IgnoreRemoteRequests(lcid: Integer; Value: WordBool); safecall;
    function InchesToPoints(Inches: Double; lcid: Integer): Double; safecall;
    function InputBox(const Prompt: WideString; Title, Default, Left, Top, HelpFile, HelpContextID, Type_: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Interactive(lcid: Integer): WordBool; safecall;
    procedure Set_Interactive(lcid: Integer; Value: WordBool); safecall;
    function Get_International(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Iteration(lcid: Integer): WordBool; safecall;
    procedure Set_Iteration(lcid: Integer; Value: WordBool); safecall;
    function Get_LargeButtons: WordBool; safecall;
    procedure Set_LargeButtons(Value: WordBool); safecall;
    function Get_Left(lcid: Integer): Double; safecall;
    procedure Set_Left(lcid: Integer; Value: Double); safecall;
    function Get_LibraryPath(lcid: Integer): WideString; safecall;
    procedure MacroOptions(Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile: OleVariant; lcid: Integer); safecall;
    procedure MailLogoff(lcid: Integer); safecall;
    procedure MailLogon(Name, Password, DownloadNewMail: OleVariant; lcid: Integer); safecall;
    function Get_MailSession(lcid: Integer): OleVariant; safecall;
    function Get_MailSystem(lcid: Integer): XlMailSystem; safecall;
    function Get_MathCoprocessorAvailable(lcid: Integer): WordBool; safecall;
    function Get_MaxChange(lcid: Integer): Double; safecall;
    procedure Set_MaxChange(lcid: Integer; Value: Double); safecall;
    function Get_MaxIterations(lcid: Integer): Integer; safecall;
    procedure Set_MaxIterations(lcid: Integer; Value: Integer); safecall;
    function Get_MemoryFree(lcid: Integer): Integer; safecall;
    function Get_MemoryTotal(lcid: Integer): Integer; safecall;
    function Get_MemoryUsed(lcid: Integer): Integer; safecall;
    function Get_MouseAvailable(lcid: Integer): WordBool; safecall;
    function Get_MoveAfterReturn(lcid: Integer): WordBool; safecall;
    procedure Set_MoveAfterReturn(lcid: Integer; Value: WordBool); safecall;
    function Get_MoveAfterReturnDirection(lcid: Integer): XlDirection; safecall;
    procedure Set_MoveAfterReturnDirection(lcid: Integer; Value: XlDirection); safecall;
    function Get_RecentFiles: RecentFiles; safecall;
    function Get_Name: WideString; safecall;
    function NextLetter(lcid: Integer): Workbook; safecall;
    function Get_NetworkTemplatesPath(lcid: Integer): WideString; safecall;
    function Get_ODBCErrors: ODBCErrors; safecall;
    function Get_ODBCTimeout: Integer; safecall;
    procedure Set_ODBCTimeout(Value: Integer); safecall;
    function Get_OnCalculate(lcid: Integer): WideString; safecall;
    procedure Set_OnCalculate(lcid: Integer; const Value: WideString); safecall;
    function Get_OnData(lcid: Integer): WideString; safecall;
    procedure Set_OnData(lcid: Integer; const Value: WideString); safecall;
    function Get_OnDoubleClick(lcid: Integer): WideString; safecall;
    procedure Set_OnDoubleClick(lcid: Integer; const Value: WideString); safecall;
    function Get_OnEntry(lcid: Integer): WideString; safecall;
    procedure Set_OnEntry(lcid: Integer; const Value: WideString); safecall;
    procedure OnKey(const Key: WideString; Procedure_: OleVariant; lcid: Integer); safecall;
    procedure OnRepeat(const Text, Procedure_: WideString; lcid: Integer); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const Value: WideString); safecall;
    procedure OnTime(EarliestTime: OleVariant; const Procedure_: WideString; LatestTime, Schedule: OleVariant; lcid: Integer); safecall;
    procedure OnUndo(const Text, Procedure_: WideString; lcid: Integer); safecall;
    function Get_OnWindow(lcid: Integer): WideString; safecall;
    procedure Set_OnWindow(lcid: Integer; const Value: WideString); safecall;
    function Get_OperatingSystem(lcid: Integer): WideString; safecall;
    function Get_OrganizationName(lcid: Integer): WideString; safecall;
    function Get_Path(lcid: Integer): WideString; safecall;
    function Get_PathSeparator(lcid: Integer): WideString; safecall;
    function Get_PreviousSelections(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_PivotTableSelection: WordBool; safecall;
    procedure Set_PivotTableSelection(Value: WordBool); safecall;
    function Get_PromptForSummaryInfo(lcid: Integer): WordBool; safecall;
    procedure Set_PromptForSummaryInfo(lcid: Integer; Value: WordBool); safecall;
    procedure Quit; safecall;
    procedure RecordMacro(BasicCode, XlmCode: OleVariant; lcid: Integer); safecall;
    function Get_RecordRelative(lcid: Integer): WordBool; safecall;
    function Get_ReferenceStyle(lcid: Integer): XlReferenceStyle; safecall;
    procedure Set_ReferenceStyle(lcid: Integer; Value: XlReferenceStyle); safecall;
    function Get_RegisteredFunctions(Index1, Index2: OleVariant; lcid: Integer): OleVariant; safecall;
    function RegisterXLL(const Filename: WideString; lcid: Integer): WordBool; safecall;
    procedure Repeat_(lcid: Integer); safecall;
    procedure ResetTipWizard(lcid: Integer); safecall;
    function Get_RollZoom: WordBool; safecall;
    procedure Set_RollZoom(Value: WordBool); safecall;
    procedure Save(Filename: OleVariant; lcid: Integer); safecall;
    procedure SaveWorkspace(Filename: OleVariant; lcid: Integer); safecall;
    function Get_ScreenUpdating(lcid: Integer): WordBool; safecall;
    procedure Set_ScreenUpdating(lcid: Integer; Value: WordBool); safecall;
    procedure SetDefaultChart(FormatName, Gallery: OleVariant); safecall;
    function Get_SheetsInNewWorkbook(lcid: Integer): Integer; safecall;
    procedure Set_SheetsInNewWorkbook(lcid: Integer; Value: Integer); safecall;
    function Get_ShowChartTipNames: WordBool; safecall;
    procedure Set_ShowChartTipNames(Value: WordBool); safecall;
    function Get_ShowChartTipValues: WordBool; safecall;
    procedure Set_ShowChartTipValues(Value: WordBool); safecall;
    function Get_StandardFont(lcid: Integer): WideString; safecall;
    procedure Set_StandardFont(lcid: Integer; const Value: WideString); safecall;
    function Get_StandardFontSize(lcid: Integer): Double; safecall;
    procedure Set_StandardFontSize(lcid: Integer; Value: Double); safecall;
    function Get_StartupPath(lcid: Integer): WideString; safecall;
    function Get_StatusBar(lcid: Integer): OleVariant; safecall;
    procedure Set_StatusBar(lcid: Integer; Value: OleVariant); safecall;
    function Get_TemplatesPath(lcid: Integer): WideString; safecall;
    function Get_ShowToolTips: WordBool; safecall;
    procedure Set_ShowToolTips(Value: WordBool); safecall;
    function Get_Top(lcid: Integer): Double; safecall;
    procedure Set_Top(lcid: Integer; Value: Double); safecall;
    function Get_DefaultSaveFormat: XlFileFormat; safecall;
    procedure Set_DefaultSaveFormat(Value: XlFileFormat); safecall;
    function Get_TransitionMenuKey(lcid: Integer): WideString; safecall;
    procedure Set_TransitionMenuKey(lcid: Integer; const Value: WideString); safecall;
    function Get_TransitionMenuKeyAction(lcid: Integer): Integer; safecall;
    procedure Set_TransitionMenuKeyAction(lcid: Integer; Value: Integer); safecall;
    function Get_TransitionNavigKeys(lcid: Integer): WordBool; safecall;
    procedure Set_TransitionNavigKeys(lcid: Integer; Value: WordBool); safecall;
    procedure Undo(lcid: Integer); safecall;
    function Get_UsableHeight(lcid: Integer): Double; safecall;
    function Get_UsableWidth(lcid: Integer): Double; safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(Value: WordBool); safecall;
    function Get_UserName(lcid: Integer): WideString; safecall;
    procedure Set_UserName(lcid: Integer; const Value: WideString); safecall;
    function Get_Value: WideString; safecall;
    function Get_VBE: VBE; safecall;
    function Get_Version(lcid: Integer): WideString; safecall;
    function Get_Visible(lcid: Integer): WordBool; safecall;
    procedure Set_Visible(lcid: Integer; Value: WordBool); safecall;
    procedure Volatile(Volatile: OleVariant; lcid: Integer); safecall;
    procedure Wait(Time: OleVariant; lcid: Integer); safecall;
    function Get_Width(lcid: Integer): Double; safecall;
    procedure Set_Width(lcid: Integer; Value: Double); safecall;
    function Get_WindowsForPens(lcid: Integer): WordBool; safecall;
    function Get_WindowState(lcid: Integer): XlWindowState; safecall;
    procedure Set_WindowState(lcid: Integer; Value: XlWindowState); safecall;
    function Get_UILanguage(lcid: Integer): Integer; safecall;
    procedure Set_UILanguage(lcid: Integer; Value: Integer); safecall;
    function Get_DefaultSheetDirection(lcid: Integer): Integer; safecall;
    procedure Set_DefaultSheetDirection(lcid: Integer; Value: Integer); safecall;
    function Get_CursorMovement(lcid: Integer): Integer; safecall;
    procedure Set_CursorMovement(lcid: Integer; Value: Integer); safecall;
    function Get_ControlCharacters(lcid: Integer): Integer; safecall;
    procedure Set_ControlCharacters(lcid: Integer; Value: Integer); safecall;
    function _WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_EnableEvents: WordBool; safecall;
    procedure Set_EnableEvents(Value: WordBool); safecall;
    function Get_DisplayInfoWindow: WordBool; safecall;
    procedure Set_DisplayInfoWindow(Value: WordBool); safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: Application read Get_Parent;
    property ActiveCell: Range read Get_ActiveCell;
    property ActiveChart: Chart read Get_ActiveChart;
    property ActiveDialog: DialogSheet read Get_ActiveDialog;
    property ActiveMenuBar: MenuBar read Get_ActiveMenuBar;
    property ActivePrinter[lcid: Integer]: WideString read Get_ActivePrinter write Set_ActivePrinter;
    property ActiveSheet: IDispatch read Get_ActiveSheet;
    property ActiveWindow: Window read Get_ActiveWindow;
    property ActiveWorkbook: Workbook read Get_ActiveWorkbook;
    property AddIns: AddIns read Get_AddIns;
    property Assistant: Assistant read Get_Assistant;
    property Cells: Range read Get_Cells;
    property Charts: Sheets read Get_Charts;
    property Columns: Range read Get_Columns;
    property CommandBars: CommandBars read Get_CommandBars;
    property DDEAppReturnCode[lcid: Integer]: Integer read Get_DDEAppReturnCode;
    property DialogSheets: Sheets read Get_DialogSheets;
    property MenuBars: MenuBars read Get_MenuBars;
    property Modules: Modules read Get_Modules;
    property Names: Names read Get_Names;
    property Range[Cell1, Cell2: OleVariant]: Range read Get_Range;
    property Rows: Range read Get_Rows;
    property Selection[lcid: Integer]: IDispatch read Get_Selection;
    property Sheets: Sheets read Get_Sheets;
    property ShortcutMenus[Index: Integer]: Menu read Get_ShortcutMenus;
    property ThisWorkbook[lcid: Integer]: Workbook read Get_ThisWorkbook;
    property Toolbars: Toolbars read Get_Toolbars;
    property Windows: Windows read Get_Windows;
    property Workbooks: Workbooks read Get_Workbooks;
    property WorksheetFunction: WorksheetFunction read Get_WorksheetFunction;
    property Worksheets: Sheets read Get_Worksheets;
    property Excel4IntlMacroSheets: Sheets read Get_Excel4IntlMacroSheets;
    property Excel4MacroSheets: Sheets read Get_Excel4MacroSheets;
    property AlertBeforeOverwriting[lcid: Integer]: WordBool read Get_AlertBeforeOverwriting write Set_AlertBeforeOverwriting;
    property AltStartupPath[lcid: Integer]: WideString read Get_AltStartupPath write Set_AltStartupPath;
    property AskToUpdateLinks[lcid: Integer]: WordBool read Get_AskToUpdateLinks write Set_AskToUpdateLinks;
    property EnableAnimations[lcid: Integer]: WordBool read Get_EnableAnimations write Set_EnableAnimations;
    property AutoCorrect: AutoCorrect read Get_AutoCorrect;
    property Build[lcid: Integer]: Integer read Get_Build;
    property CalculateBeforeSave[lcid: Integer]: WordBool read Get_CalculateBeforeSave write Set_CalculateBeforeSave;
    property Calculation[lcid: Integer]: XlCalculation read Get_Calculation write Set_Calculation;
    property Caller[Index: OleVariant; lcid: Integer]: OleVariant read Get_Caller;
    property CanPlaySounds[lcid: Integer]: WordBool read Get_CanPlaySounds;
    property CanRecordSounds[lcid: Integer]: WordBool read Get_CanRecordSounds;
    property Caption: WideString read Get_Caption write Set_Caption;
    property CellDragAndDrop[lcid: Integer]: WordBool read Get_CellDragAndDrop write Set_CellDragAndDrop;
    property ClipboardFormats[Index: OleVariant; lcid: Integer]: OleVariant read Get_ClipboardFormats;
    property DisplayClipboardWindow[lcid: Integer]: WordBool read Get_DisplayClipboardWindow write Set_DisplayClipboardWindow;
    property ColorButtons: WordBool read Get_ColorButtons write Set_ColorButtons;
    property CommandUnderlines[lcid: Integer]: XlCommandUnderlines read Get_CommandUnderlines write Set_CommandUnderlines;
    property ConstrainNumeric[lcid: Integer]: WordBool read Get_ConstrainNumeric write Set_ConstrainNumeric;
    property CopyObjectsWithCells[lcid: Integer]: WordBool read Get_CopyObjectsWithCells write Set_CopyObjectsWithCells;
    property Cursor[lcid: Integer]: XlMousePointer read Get_Cursor write Set_Cursor;
    property CustomListCount[lcid: Integer]: Integer read Get_CustomListCount;
    property CutCopyMode[lcid: Integer]: XlCutCopyMode read Get_CutCopyMode write Set_CutCopyMode;
    property DataEntryMode[lcid: Integer]: Integer read Get_DataEntryMode write Set_DataEntryMode;
    property _Default: WideString read Get__Default;
    property DefaultFilePath[lcid: Integer]: WideString read Get_DefaultFilePath write Set_DefaultFilePath;
    property Dialogs: Dialogs read Get_Dialogs;
    property DisplayAlerts[lcid: Integer]: WordBool read Get_DisplayAlerts write Set_DisplayAlerts;
    property DisplayFormulaBar[lcid: Integer]: WordBool read Get_DisplayFormulaBar write Set_DisplayFormulaBar;
    property DisplayFullScreen[lcid: Integer]: WordBool read Get_DisplayFullScreen write Set_DisplayFullScreen;
    property DisplayNoteIndicator: WordBool read Get_DisplayNoteIndicator write Set_DisplayNoteIndicator;
    property DisplayCommentIndicator: XlCommentDisplayMode read Get_DisplayCommentIndicator write Set_DisplayCommentIndicator;
    property DisplayExcel4Menus[lcid: Integer]: WordBool read Get_DisplayExcel4Menus write Set_DisplayExcel4Menus;
    property DisplayRecentFiles: WordBool read Get_DisplayRecentFiles write Set_DisplayRecentFiles;
    property DisplayScrollBars[lcid: Integer]: WordBool read Get_DisplayScrollBars write Set_DisplayScrollBars;
    property DisplayStatusBar[lcid: Integer]: WordBool read Get_DisplayStatusBar write Set_DisplayStatusBar;
    property EditDirectlyInCell[lcid: Integer]: WordBool read Get_EditDirectlyInCell write Set_EditDirectlyInCell;
    property EnableAutoComplete: WordBool read Get_EnableAutoComplete write Set_EnableAutoComplete;
    property EnableCancelKey[lcid: Integer]: XlEnableCancelKey read Get_EnableCancelKey write Set_EnableCancelKey;
    property EnableSound: WordBool read Get_EnableSound write Set_EnableSound;
    property EnableTipWizard[lcid: Integer]: WordBool read Get_EnableTipWizard write Set_EnableTipWizard;
    property FileConverters[Index1, Index2: OleVariant; lcid: Integer]: OleVariant read Get_FileConverters;
    property FileSearch: FileSearch read Get_FileSearch;
    property FileFind: IFind read Get_FileFind;
    property FixedDecimal[lcid: Integer]: WordBool read Get_FixedDecimal write Set_FixedDecimal;
    property FixedDecimalPlaces[lcid: Integer]: Integer read Get_FixedDecimalPlaces write Set_FixedDecimalPlaces;
    property Height[lcid: Integer]: Double read Get_Height write Set_Height;
    property IgnoreRemoteRequests[lcid: Integer]: WordBool read Get_IgnoreRemoteRequests write Set_IgnoreRemoteRequests;
    property Interactive[lcid: Integer]: WordBool read Get_Interactive write Set_Interactive;
    property International[Index: OleVariant; lcid: Integer]: OleVariant read Get_International;
    property Iteration[lcid: Integer]: WordBool read Get_Iteration write Set_Iteration;
    property LargeButtons: WordBool read Get_LargeButtons write Set_LargeButtons;
    property Left[lcid: Integer]: Double read Get_Left write Set_Left;
    property LibraryPath[lcid: Integer]: WideString read Get_LibraryPath;
    property MailSession[lcid: Integer]: OleVariant read Get_MailSession;
    property MailSystem[lcid: Integer]: XlMailSystem read Get_MailSystem;
    property MathCoprocessorAvailable[lcid: Integer]: WordBool read Get_MathCoprocessorAvailable;
    property MaxChange[lcid: Integer]: Double read Get_MaxChange write Set_MaxChange;
    property MaxIterations[lcid: Integer]: Integer read Get_MaxIterations write Set_MaxIterations;
    property MemoryFree[lcid: Integer]: Integer read Get_MemoryFree;
    property MemoryTotal[lcid: Integer]: Integer read Get_MemoryTotal;
    property MemoryUsed[lcid: Integer]: Integer read Get_MemoryUsed;
    property MouseAvailable[lcid: Integer]: WordBool read Get_MouseAvailable;
    property MoveAfterReturn[lcid: Integer]: WordBool read Get_MoveAfterReturn write Set_MoveAfterReturn;
    property MoveAfterReturnDirection[lcid: Integer]: XlDirection read Get_MoveAfterReturnDirection write Set_MoveAfterReturnDirection;
    property RecentFiles: RecentFiles read Get_RecentFiles;
    property Name: WideString read Get_Name;
    property NetworkTemplatesPath[lcid: Integer]: WideString read Get_NetworkTemplatesPath;
    property ODBCErrors: ODBCErrors read Get_ODBCErrors;
    property ODBCTimeout: Integer read Get_ODBCTimeout write Set_ODBCTimeout;
    property OnCalculate[lcid: Integer]: WideString read Get_OnCalculate write Set_OnCalculate;
    property OnData[lcid: Integer]: WideString read Get_OnData write Set_OnData;
    property OnDoubleClick[lcid: Integer]: WideString read Get_OnDoubleClick write Set_OnDoubleClick;
    property OnEntry[lcid: Integer]: WideString read Get_OnEntry write Set_OnEntry;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property OnWindow[lcid: Integer]: WideString read Get_OnWindow write Set_OnWindow;
    property OperatingSystem[lcid: Integer]: WideString read Get_OperatingSystem;
    property OrganizationName[lcid: Integer]: WideString read Get_OrganizationName;
    property Path[lcid: Integer]: WideString read Get_Path;
    property PathSeparator[lcid: Integer]: WideString read Get_PathSeparator;
    property PreviousSelections[Index: OleVariant; lcid: Integer]: OleVariant read Get_PreviousSelections;
    property PivotTableSelection: WordBool read Get_PivotTableSelection write Set_PivotTableSelection;
    property PromptForSummaryInfo[lcid: Integer]: WordBool read Get_PromptForSummaryInfo write Set_PromptForSummaryInfo;
    property RecordRelative[lcid: Integer]: WordBool read Get_RecordRelative;
    property ReferenceStyle[lcid: Integer]: XlReferenceStyle read Get_ReferenceStyle write Set_ReferenceStyle;
    property RegisteredFunctions[Index1, Index2: OleVariant; lcid: Integer]: OleVariant read Get_RegisteredFunctions;
    property RollZoom: WordBool read Get_RollZoom write Set_RollZoom;
    property ScreenUpdating[lcid: Integer]: WordBool read Get_ScreenUpdating write Set_ScreenUpdating;
    property SheetsInNewWorkbook[lcid: Integer]: Integer read Get_SheetsInNewWorkbook write Set_SheetsInNewWorkbook;
    property ShowChartTipNames: WordBool read Get_ShowChartTipNames write Set_ShowChartTipNames;
    property ShowChartTipValues: WordBool read Get_ShowChartTipValues write Set_ShowChartTipValues;
    property StandardFont[lcid: Integer]: WideString read Get_StandardFont write Set_StandardFont;
    property StandardFontSize[lcid: Integer]: Double read Get_StandardFontSize write Set_StandardFontSize;
    property StartupPath[lcid: Integer]: WideString read Get_StartupPath;
    property StatusBar[lcid: Integer]: OleVariant read Get_StatusBar write Set_StatusBar;
    property TemplatesPath[lcid: Integer]: WideString read Get_TemplatesPath;
    property ShowToolTips: WordBool read Get_ShowToolTips write Set_ShowToolTips;
    property Top[lcid: Integer]: Double read Get_Top write Set_Top;
    property DefaultSaveFormat: XlFileFormat read Get_DefaultSaveFormat write Set_DefaultSaveFormat;
    property TransitionMenuKey[lcid: Integer]: WideString read Get_TransitionMenuKey write Set_TransitionMenuKey;
    property TransitionMenuKeyAction[lcid: Integer]: Integer read Get_TransitionMenuKeyAction write Set_TransitionMenuKeyAction;
    property TransitionNavigKeys[lcid: Integer]: WordBool read Get_TransitionNavigKeys write Set_TransitionNavigKeys;
    property UsableHeight[lcid: Integer]: Double read Get_UsableHeight;
    property UsableWidth[lcid: Integer]: Double read Get_UsableWidth;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property UserName[lcid: Integer]: WideString read Get_UserName write Set_UserName;
    property Value: WideString read Get_Value;
    property VBE: VBE read Get_VBE;
    property Version[lcid: Integer]: WideString read Get_Version;
    property Visible[lcid: Integer]: WordBool read Get_Visible write Set_Visible;
    property Width[lcid: Integer]: Double read Get_Width write Set_Width;
    property WindowsForPens[lcid: Integer]: WordBool read Get_WindowsForPens;
    property WindowState[lcid: Integer]: XlWindowState read Get_WindowState write Set_WindowState;
    property UILanguage[lcid: Integer]: Integer read Get_UILanguage write Set_UILanguage;
    property DefaultSheetDirection[lcid: Integer]: Integer read Get_DefaultSheetDirection write Set_DefaultSheetDirection;
    property CursorMovement[lcid: Integer]: Integer read Get_CursorMovement write Set_CursorMovement;
    property ControlCharacters[lcid: Integer]: Integer read Get_ControlCharacters write Set_ControlCharacters;
    property EnableEvents: WordBool read Get_EnableEvents write Set_EnableEvents;
    property DisplayInfoWindow: WordBool read Get_DisplayInfoWindow write Set_DisplayInfoWindow;
  end;

{ DispInterface declaration for Dual Interface _Application }

  _ApplicationDisp = dispinterface
    ['{000208D5-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Application readonly dispid 150;
    property ActiveCell: Range readonly dispid 305;
    property ActiveChart: Chart readonly dispid 183;
    property ActiveDialog: DialogSheet readonly dispid 815;
    property ActiveMenuBar: MenuBar readonly dispid 758;
    property ActivePrinter[lcid: Integer]: WideString dispid 306;
    property ActiveSheet: IDispatch readonly dispid 307;
    property ActiveWindow: Window readonly dispid 759;
    property ActiveWorkbook: Workbook readonly dispid 308;
    property AddIns: AddIns readonly dispid 549;
    property Assistant: Assistant readonly dispid 1438;
    procedure Calculate(lcid: Integer); dispid 279;
    property Cells: Range readonly dispid 238;
    property Charts: Sheets readonly dispid 121;
    property Columns: Range readonly dispid 241;
    property CommandBars: CommandBars readonly dispid 1439;
    property DDEAppReturnCode[lcid: Integer]: Integer readonly dispid 332;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); dispid 333;
    function DDEInitiate(const App, Topic: WideString; lcid: Integer): Integer; dispid 334;
    procedure DDEPoke(Channel: Integer; Item, Data: OleVariant; lcid: Integer); dispid 335;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; dispid 336;
    procedure DDETerminate(Channel, lcid: Integer); dispid 337;
    property DialogSheets: Sheets readonly dispid 764;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; dispid 350;
    function Intersect(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; dispid 766;
    property MenuBars: MenuBars readonly dispid 589;
    property Modules: Modules readonly dispid 582;
    property Names: Names readonly dispid 442;
    property Range[Cell1, Cell2: OleVariant]: Range readonly dispid 197;
    property Rows: Range readonly dispid 258;
    function Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; dispid 259;
    function _Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): OleVariant; dispid 806;
    property Selection[lcid: Integer]: IDispatch readonly dispid 147;
    procedure SendKeys(Keys, Wait: OleVariant; lcid: Integer); dispid 383;
    property Sheets: Sheets readonly dispid 485;
    property ShortcutMenus[Index: Integer]: Menu readonly dispid 776;
    property ThisWorkbook[lcid: Integer]: Workbook readonly dispid 778;
    property Toolbars: Toolbars readonly dispid 552;
    function Union(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; dispid 779;
    property Windows: Windows readonly dispid 430;
    property Workbooks: Workbooks readonly dispid 572;
    property WorksheetFunction: WorksheetFunction readonly dispid 1440;
    property Worksheets: Sheets readonly dispid 494;
    property Excel4IntlMacroSheets: Sheets readonly dispid 581;
    property Excel4MacroSheets: Sheets readonly dispid 579;
    procedure ActivateMicrosoftApp(Index: XlMSApplication; lcid: Integer); dispid 1095;
    procedure AddChartAutoFormat(Chart: OleVariant; const Name: WideString; Description: OleVariant; lcid: Integer); dispid 216;
    procedure AddCustomList(ListArray, ByRow: OleVariant; lcid: Integer); dispid 780;
    property AlertBeforeOverwriting[lcid: Integer]: WordBool dispid 930;
    property AltStartupPath[lcid: Integer]: WideString dispid 313;
    property AskToUpdateLinks[lcid: Integer]: WordBool dispid 992;
    property EnableAnimations[lcid: Integer]: WordBool dispid 1180;
    property AutoCorrect: AutoCorrect readonly dispid 1145;
    property Build[lcid: Integer]: Integer readonly dispid 314;
    property CalculateBeforeSave[lcid: Integer]: WordBool dispid 315;
    property Calculation[lcid: Integer]: XlCalculation dispid 316;
    property Caller[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 317;
    property CanPlaySounds[lcid: Integer]: WordBool readonly dispid 318;
    property CanRecordSounds[lcid: Integer]: WordBool readonly dispid 319;
    property Caption: WideString dispid 139;
    property CellDragAndDrop[lcid: Integer]: WordBool dispid 320;
    function CentimetersToPoints(Centimeters: Double; lcid: Integer): Double; dispid 1086;
    function CheckSpelling(const Word: WideString; CustomDictionary, IgnoreUppercase: OleVariant; lcid: Integer): WordBool; dispid 505;
    property ClipboardFormats[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 321;
    property DisplayClipboardWindow[lcid: Integer]: WordBool dispid 322;
    property ColorButtons: WordBool dispid 365;
    property CommandUnderlines[lcid: Integer]: XlCommandUnderlines dispid 323;
    property ConstrainNumeric[lcid: Integer]: WordBool dispid 324;
    function ConvertFormula(Formula: OleVariant; FromReferenceStyle: XlReferenceStyle; ToReferenceStyle, ToAbsolute, RelativeTo: OleVariant; lcid: Integer): OleVariant; dispid 325;
    property CopyObjectsWithCells[lcid: Integer]: WordBool dispid 991;
    property Cursor[lcid: Integer]: XlMousePointer dispid 1161;
    property CustomListCount[lcid: Integer]: Integer readonly dispid 787;
    property CutCopyMode[lcid: Integer]: XlCutCopyMode dispid 330;
    property DataEntryMode[lcid: Integer]: Integer dispid 331;
    procedure Dummy1; dispid 1767;
    procedure Dummy2; dispid 1768;
    procedure Dummy3; dispid 1769;
    procedure Dummy4; dispid 1770;
    procedure Dummy5; dispid 1771;
    procedure Dummy6; dispid 1772;
    procedure Dummy7; dispid 1773;
    procedure Dummy8; dispid 1774;
    procedure Dummy9; dispid 1775;
    procedure Dummy10; dispid 1776;
    procedure Dummy11; dispid 1777;
    property _Default: WideString readonly dispid 0;
    property DefaultFilePath[lcid: Integer]: WideString dispid 1038;
    procedure DeleteChartAutoFormat(const Name: WideString; lcid: Integer); dispid 217;
    procedure DeleteCustomList(ListNum, lcid: Integer); dispid 783;
    property Dialogs: Dialogs readonly dispid 761;
    property DisplayAlerts[lcid: Integer]: WordBool dispid 343;
    property DisplayFormulaBar[lcid: Integer]: WordBool dispid 344;
    property DisplayFullScreen[lcid: Integer]: WordBool dispid 1061;
    property DisplayNoteIndicator: WordBool dispid 345;
    property DisplayCommentIndicator: XlCommentDisplayMode dispid 1196;
    property DisplayExcel4Menus[lcid: Integer]: WordBool dispid 927;
    property DisplayRecentFiles: WordBool dispid 926;
    property DisplayScrollBars[lcid: Integer]: WordBool dispid 346;
    property DisplayStatusBar[lcid: Integer]: WordBool dispid 347;
    procedure DoubleClick(lcid: Integer); dispid 349;
    property EditDirectlyInCell[lcid: Integer]: WordBool dispid 929;
    property EnableAutoComplete: WordBool dispid 1179;
    property EnableCancelKey[lcid: Integer]: XlEnableCancelKey dispid 1096;
    property EnableSound: WordBool dispid 1197;
    property EnableTipWizard[lcid: Integer]: WordBool dispid 1064;
    property FileConverters[Index1, Index2: OleVariant; lcid: Integer]: OleVariant readonly dispid 931;
    property FileSearch: FileSearch readonly dispid 1200;
    property FileFind: IFind readonly dispid 1201;
    procedure FindFile(lcid: Integer); dispid 1068;
    property FixedDecimal[lcid: Integer]: WordBool dispid 351;
    property FixedDecimalPlaces[lcid: Integer]: Integer dispid 352;
    function GetCustomListContents(ListNum, lcid: Integer): OleVariant; dispid 786;
    function GetCustomListNum(ListArray: OleVariant; lcid: Integer): Integer; dispid 785;
    function GetOpenFilename(FileFilter, FilterIndex, Title, ButtonText, MultiSelect: OleVariant; lcid: Integer): OleVariant; dispid 1075;
    function GetSaveAsFilename(InitialFilename, FileFilter, FilterIndex, Title, ButtonText: OleVariant; lcid: Integer): OleVariant; dispid 1076;
    procedure Goto_(Reference, Scroll: OleVariant; lcid: Integer); dispid 475;
    property Height[lcid: Integer]: Double dispid 123;
    procedure Help(HelpFile, HelpContextID: OleVariant; lcid: Integer); dispid 354;
    property IgnoreRemoteRequests[lcid: Integer]: WordBool dispid 356;
    function InchesToPoints(Inches: Double; lcid: Integer): Double; dispid 1087;
    function InputBox(const Prompt: WideString; Title, Default, Left, Top, HelpFile, HelpContextID, Type_: OleVariant; lcid: Integer): OleVariant; dispid 357;
    property Interactive[lcid: Integer]: WordBool dispid 361;
    property International[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 362;
    property Iteration[lcid: Integer]: WordBool dispid 363;
    property LargeButtons: WordBool dispid 364;
    property Left[lcid: Integer]: Double dispid 127;
    property LibraryPath[lcid: Integer]: WideString readonly dispid 366;
    procedure MacroOptions(Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile: OleVariant; lcid: Integer); dispid 1135;
    procedure MailLogoff(lcid: Integer); dispid 945;
    procedure MailLogon(Name, Password, DownloadNewMail: OleVariant; lcid: Integer); dispid 943;
    property MailSession[lcid: Integer]: OleVariant readonly dispid 942;
    property MailSystem[lcid: Integer]: XlMailSystem readonly dispid 971;
    property MathCoprocessorAvailable[lcid: Integer]: WordBool readonly dispid 367;
    property MaxChange[lcid: Integer]: Double dispid 368;
    property MaxIterations[lcid: Integer]: Integer dispid 369;
    property MemoryFree[lcid: Integer]: Integer readonly dispid 370;
    property MemoryTotal[lcid: Integer]: Integer readonly dispid 371;
    property MemoryUsed[lcid: Integer]: Integer readonly dispid 372;
    property MouseAvailable[lcid: Integer]: WordBool readonly dispid 373;
    property MoveAfterReturn[lcid: Integer]: WordBool dispid 374;
    property MoveAfterReturnDirection[lcid: Integer]: XlDirection dispid 1144;
    property RecentFiles: RecentFiles readonly dispid 1202;
    property Name: WideString readonly dispid 110;
    function NextLetter(lcid: Integer): Workbook; dispid 972;
    property NetworkTemplatesPath[lcid: Integer]: WideString readonly dispid 388;
    property ODBCErrors: ODBCErrors readonly dispid 1203;
    property ODBCTimeout: Integer dispid 1204;
    property OnCalculate[lcid: Integer]: WideString dispid 625;
    property OnData[lcid: Integer]: WideString dispid 629;
    property OnDoubleClick[lcid: Integer]: WideString dispid 628;
    property OnEntry[lcid: Integer]: WideString dispid 627;
    procedure OnKey(const Key: WideString; Procedure_: OleVariant; lcid: Integer); dispid 626;
    procedure OnRepeat(const Text, Procedure_: WideString; lcid: Integer); dispid 769;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    procedure OnTime(EarliestTime: OleVariant; const Procedure_: WideString; LatestTime, Schedule: OleVariant; lcid: Integer); dispid 624;
    procedure OnUndo(const Text, Procedure_: WideString; lcid: Integer); dispid 770;
    property OnWindow[lcid: Integer]: WideString dispid 623;
    property OperatingSystem[lcid: Integer]: WideString readonly dispid 375;
    property OrganizationName[lcid: Integer]: WideString readonly dispid 376;
    property Path[lcid: Integer]: WideString readonly dispid 291;
    property PathSeparator[lcid: Integer]: WideString readonly dispid 377;
    property PreviousSelections[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 378;
    property PivotTableSelection: WordBool dispid 1205;
    property PromptForSummaryInfo[lcid: Integer]: WordBool dispid 1062;
    procedure Quit; dispid 302;
    procedure RecordMacro(BasicCode, XlmCode: OleVariant; lcid: Integer); dispid 773;
    property RecordRelative[lcid: Integer]: WordBool readonly dispid 379;
    property ReferenceStyle[lcid: Integer]: XlReferenceStyle dispid 380;
    property RegisteredFunctions[Index1, Index2: OleVariant; lcid: Integer]: OleVariant readonly dispid 775;
    function RegisterXLL(const Filename: WideString; lcid: Integer): WordBool; dispid 30;
    procedure Repeat_(lcid: Integer); dispid 301;
    procedure ResetTipWizard(lcid: Integer); dispid 928;
    property RollZoom: WordBool dispid 1206;
    procedure Save(Filename: OleVariant; lcid: Integer); dispid 283;
    procedure SaveWorkspace(Filename: OleVariant; lcid: Integer); dispid 212;
    property ScreenUpdating[lcid: Integer]: WordBool dispid 382;
    procedure SetDefaultChart(FormatName, Gallery: OleVariant); dispid 219;
    property SheetsInNewWorkbook[lcid: Integer]: Integer dispid 993;
    property ShowChartTipNames: WordBool dispid 1207;
    property ShowChartTipValues: WordBool dispid 1208;
    property StandardFont[lcid: Integer]: WideString dispid 924;
    property StandardFontSize[lcid: Integer]: Double dispid 925;
    property StartupPath[lcid: Integer]: WideString readonly dispid 385;
    property StatusBar[lcid: Integer]: OleVariant dispid 386;
    property TemplatesPath[lcid: Integer]: WideString readonly dispid 381;
    property ShowToolTips: WordBool dispid 387;
    property Top[lcid: Integer]: Double dispid 126;
    property DefaultSaveFormat: XlFileFormat dispid 1209;
    property TransitionMenuKey[lcid: Integer]: WideString dispid 310;
    property TransitionMenuKeyAction[lcid: Integer]: Integer dispid 311;
    property TransitionNavigKeys[lcid: Integer]: WordBool dispid 312;
    procedure Undo(lcid: Integer); dispid 303;
    property UsableHeight[lcid: Integer]: Double readonly dispid 389;
    property UsableWidth[lcid: Integer]: Double readonly dispid 390;
    property UserControl: WordBool dispid 1210;
    property UserName[lcid: Integer]: WideString dispid 391;
    property Value: WideString readonly dispid 6;
    property VBE: VBE readonly dispid 1211;
    property Version[lcid: Integer]: WideString readonly dispid 392;
    property Visible[lcid: Integer]: WordBool dispid 558;
    procedure Volatile(Volatile: OleVariant; lcid: Integer); dispid 788;
    procedure Wait(Time: OleVariant; lcid: Integer); dispid 393;
    property Width[lcid: Integer]: Double dispid 122;
    property WindowsForPens[lcid: Integer]: WordBool readonly dispid 395;
    property WindowState[lcid: Integer]: XlWindowState dispid 396;
    property UILanguage[lcid: Integer]: Integer dispid 2;
    property DefaultSheetDirection[lcid: Integer]: Integer dispid 229;
    property CursorMovement[lcid: Integer]: Integer dispid 232;
    property ControlCharacters[lcid: Integer]: Integer dispid 233;
    function _WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): OleVariant; dispid 169;
    property EnableEvents: WordBool dispid 1212;
    property DisplayInfoWindow: WordBool dispid 1213;
  end;

  IWorksheetFunction = interface(IDispatch)
    ['{00020845-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function _WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Count(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function IsNA(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function IsError(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function Sum(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Average(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Min(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Max(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Npv(Arg1: Double; Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function StDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Dollar(Arg1: Double; Arg2: OleVariant; out Retval: WideString): HResult; stdcall;
    function Fixed(Arg1: Double; Arg2, Arg3: OleVariant; out Retval: WideString): HResult; stdcall;
    function Pi(out Retval: Double): HResult; stdcall;
    function Ln(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Log10(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Round(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Lookup(Arg1, Arg2, Arg3: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Index(Arg1: OleVariant; Arg2: Double; Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Rept(const Arg1: WideString; Arg2: Double; out Retval: WideString): HResult; stdcall;
    function And_(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: WordBool): HResult; stdcall;
    function Or_(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: WordBool): HResult; stdcall;
    function DCount(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function DSum(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function DAverage(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function DMin(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function DMax(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function DStDev(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Var_(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function DVar(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Text(Arg1: OleVariant; const Arg2: WideString; out Retval: WideString): HResult; stdcall;
    function LinEst(Arg1, Arg2, Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Trend(Arg1, Arg2, Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function LogEst(Arg1, Arg2, Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Growth(Arg1, Arg2, Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Pv(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function Fv(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function NPer(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function Pmt(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function Rate(Arg1, Arg2, Arg3: Double; Arg4, Arg5, Arg6: OleVariant; out Retval: Double): HResult; stdcall;
    function MIrr(Arg1: OleVariant; Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Irr(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Match(Arg1, Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Weekday(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Search(const Arg1, Arg2: WideString; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Transpose(Arg1: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Atan2(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Asin(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Acos(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Choose(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function HLookup(Arg1, Arg2, Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function VLookup(Arg1, Arg2, Arg3, Arg4: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Log(Arg1: Double; Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Proper(const Arg1: WideString; out Retval: WideString): HResult; stdcall;
    function Trim(const Arg1: WideString; out Retval: WideString): HResult; stdcall;
    function Replace(const Arg1: WideString; Arg2, Arg3: Double; const Arg4: WideString; out Retval: WideString): HResult; stdcall;
    function Substitute(const Arg1, Arg2, Arg3: WideString; Arg4: OleVariant; out Retval: WideString): HResult; stdcall;
    function Find(const Arg1, Arg2: WideString; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function IsErr(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function IsText(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function IsNumber(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function Sln(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Syd(Arg1, Arg2, Arg3, Arg4: Double; out Retval: Double): HResult; stdcall;
    function Ddb(Arg1, Arg2, Arg3, Arg4: Double; Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function Clean(const Arg1: WideString; out Retval: WideString): HResult; stdcall;
    function MDeterm(Arg1: OleVariant; out Retval: Double): HResult; stdcall;
    function MInverse(Arg1: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function MMult(Arg1, Arg2: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Ipmt(Arg1, Arg2, Arg3, Arg4: Double; Arg5, Arg6: OleVariant; out Retval: Double): HResult; stdcall;
    function Ppmt(Arg1, Arg2, Arg3, Arg4: Double; Arg5, Arg6: OleVariant; out Retval: Double): HResult; stdcall;
    function CountA(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Product(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Fact(Arg1: Double; out Retval: Double): HResult; stdcall;
    function DProduct(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function IsNonText(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function StDevP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function VarP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function DStDevP(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function DVarP(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function IsLogical(Arg1: OleVariant; out Retval: WordBool): HResult; stdcall;
    function DCountA(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function USDollar(Arg1, Arg2: Double; out Retval: WideString): HResult; stdcall;
    function FindB(const Arg1, Arg2: WideString; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function SearchB(const Arg1, Arg2: WideString; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function ReplaceB(const Arg1: WideString; Arg2, Arg3: Double; const Arg4: WideString; out Retval: WideString): HResult; stdcall;
    function RoundUp(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function RoundDown(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Rank(Arg1: Double; const Arg2: Range; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Days360(Arg1, Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Vdb(Arg1, Arg2, Arg3, Arg4, Arg5: Double; Arg6, Arg7: OleVariant; out Retval: Double): HResult; stdcall;
    function Median(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function SumProduct(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Sinh(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Cosh(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Tanh(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Asinh(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Acosh(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Atanh(Arg1: Double; out Retval: Double): HResult; stdcall;
    function DGet(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Db(Arg1, Arg2, Arg3, Arg4: Double; Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function Frequency(Arg1, Arg2: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function AveDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function BetaDist(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function GammaLn(Arg1: Double; out Retval: Double): HResult; stdcall;
    function BetaInv(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant; out Retval: Double): HResult; stdcall;
    function BinomDist(Arg1, Arg2, Arg3: Double; Arg4: WordBool; out Retval: Double): HResult; stdcall;
    function ChiDist(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function ChiInv(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Combin(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Confidence(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function CritBinom(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Even(Arg1: Double; out Retval: Double): HResult; stdcall;
    function ExponDist(Arg1, Arg2: Double; Arg3: WordBool; out Retval: Double): HResult; stdcall;
    function FDist(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function FInv(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Fisher(Arg1: Double; out Retval: Double): HResult; stdcall;
    function FisherInv(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Floor(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function GammaDist(Arg1, Arg2, Arg3: Double; Arg4: WordBool; out Retval: Double): HResult; stdcall;
    function GammaInv(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Ceiling(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function HypGeomDist(Arg1, Arg2, Arg3, Arg4: Double; out Retval: Double): HResult; stdcall;
    function LogNormDist(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function LogInv(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function NegBinomDist(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function NormDist(Arg1, Arg2, Arg3: Double; Arg4: WordBool; out Retval: Double): HResult; stdcall;
    function NormSDist(Arg1: Double; out Retval: Double): HResult; stdcall;
    function NormInv(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function NormSInv(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Standardize(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Odd(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Permut(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Poisson(Arg1, Arg2: Double; Arg3: WordBool; out Retval: Double): HResult; stdcall;
    function TDist(Arg1, Arg2, Arg3: Double; out Retval: Double): HResult; stdcall;
    function Weibull(Arg1, Arg2, Arg3: Double; Arg4: WordBool; out Retval: Double): HResult; stdcall;
    function SumXMY2(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function SumX2MY2(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function SumX2PY2(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function ChiTest(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Correl(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Covar(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Forecast(Arg1: Double; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function FTest(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Intercept(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Pearson(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function RSq(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function StEyx(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function Slope(Arg1, Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function TTest(Arg1, Arg2: OleVariant; Arg3, Arg4: Double; out Retval: Double): HResult; stdcall;
    function Prob(Arg1, Arg2: OleVariant; Arg3: Double; Arg4: OleVariant; out Retval: Double): HResult; stdcall;
    function DevSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function GeoMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function HarMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function SumSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Kurt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function Skew(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function ZTest(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Large(Arg1: OleVariant; Arg2: Double; out Retval: Double): HResult; stdcall;
    function Small(Arg1: OleVariant; Arg2: Double; out Retval: Double): HResult; stdcall;
    function Quartile(Arg1: OleVariant; Arg2: Double; out Retval: Double): HResult; stdcall;
    function Percentile(Arg1: OleVariant; Arg2: Double; out Retval: Double): HResult; stdcall;
    function PercentRank(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function Mode(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function TrimMean(Arg1: OleVariant; Arg2: Double; out Retval: Double): HResult; stdcall;
    function TInv(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Power(Arg1, Arg2: Double; out Retval: Double): HResult; stdcall;
    function Radians(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Degrees(Arg1: Double; out Retval: Double): HResult; stdcall;
    function Subtotal(Arg1: Double; const Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: Double): HResult; stdcall;
    function SumIf(const Arg1: Range; Arg2, Arg3: OleVariant; out Retval: Double): HResult; stdcall;
    function CountIf(const Arg1: Range; Arg2: OleVariant; out Retval: Double): HResult; stdcall;
    function CountBlank(const Arg1: Range; out Retval: Double): HResult; stdcall;
    function Ispmt(Arg1, Arg2, Arg3, Arg4: Double; out Retval: Double): HResult; stdcall;
    function Roman(Arg1: Double; Arg2: OleVariant; out Retval: WideString): HResult; stdcall;
    function Asc(const Arg1: WideString; out Retval: WideString): HResult; stdcall;
    function Dbcs(const Arg1: WideString; out Retval: WideString): HResult; stdcall;
  end;

  IRange = interface(IDispatch)
    ['{00020846-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_AddIndent(out Retval: OleVariant): HResult; stdcall;
    function Set_AddIndent(Value: OleVariant): HResult; stdcall;
    function Get_Address(RowAbsolute, ColumnAbsolute: OleVariant; ReferenceStyle: XlReferenceStyle; External, RelativeTo: OleVariant; lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Get_AddressLocal(RowAbsolute, ColumnAbsolute: OleVariant; ReferenceStyle: XlReferenceStyle; External, RelativeTo: OleVariant; out Retval: WideString): HResult; stdcall;
    function AdvancedFilter(Action: XlFilterAction; CriteriaRange, CopyToRange, Unique: OleVariant): HResult; stdcall;
    function ApplyNames(Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow: OleVariant; Order: XlApplyNamesOrder; AppendLast: OleVariant): HResult; stdcall;
    function ApplyOutlineStyles: HResult; stdcall;
    function Get_Areas(out Retval: Areas): HResult; stdcall;
    function AutoComplete(const String_: WideString; out Retval: WideString): HResult; stdcall;
    function AutoFill(const Destination: Range; Type_: XlAutoFillType): HResult; stdcall;
    function AutoFilter(Field, Criteria1: OleVariant; Operator: XlAutoFilterOperator; Criteria2, VisibleDropDown: OleVariant): HResult; stdcall;
    function AutoFit: HResult; stdcall;
    function AutoFormat(Format: XlRangeAutoFormat; Number, Font, Alignment, Border, Pattern, Width: OleVariant): HResult; stdcall;
    function AutoOutline: HResult; stdcall;
    function BorderAround(LineStyle: OleVariant; Weight: XlBorderWeight; ColorIndex: XlColorIndex; Color: OleVariant): HResult; stdcall;
    function Get_Borders(out Retval: Borders): HResult; stdcall;
    function Calculate: HResult; stdcall;
    function Get_Cells(out Retval: Range): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function ClearContents: HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function ClearNotes: HResult; stdcall;
    function ClearOutline: HResult; stdcall;
    function Get_Column(out Retval: Integer): HResult; stdcall;
    function ColumnDifferences(Comparison: OleVariant; out Retval: Range): HResult; stdcall;
    function Get_Columns(out Retval: Range): HResult; stdcall;
    function Get_ColumnWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_ColumnWidth(Value: OleVariant): HResult; stdcall;
    function Consolidate(Sources, Function_, TopRow, LeftColumn, CreateLinks: OleVariant): HResult; stdcall;
    function Copy(Destination: OleVariant): HResult; stdcall;
    function CopyFromRecordset(Data: IUnknown; MaxRows, MaxColumns: OleVariant; out Retval: Integer): HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function CreateNames(Top, Left, Bottom, Right: OleVariant): HResult; stdcall;
    function CreatePublisher(Edition: OleVariant; Appearance: XlPictureAppearance; ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU: OleVariant): HResult; stdcall;
    function Get_CurrentArray(out Retval: Range): HResult; stdcall;
    function Get_CurrentRegion(out Retval: Range): HResult; stdcall;
    function Cut(Destination: OleVariant): HResult; stdcall;
    function DataSeries(Rowcol: OleVariant; Type_: XlDataSeriesType; Date: XlDataSeriesDate; Step, Stop, Trend: OleVariant): HResult; stdcall;
    function Get__Default(RowIndex, ColumnIndex: OleVariant; lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set__Default(RowIndex, ColumnIndex: OleVariant; lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Delete(Shift: OleVariant): HResult; stdcall;
    function Get_Dependents(out Retval: Range): HResult; stdcall;
    function DialogBox(out Retval: OleVariant): HResult; stdcall;
    function Get_DirectDependents(out Retval: Range): HResult; stdcall;
    function Get_DirectPrecedents(out Retval: Range): HResult; stdcall;
    function EditionOptions(Type_: XlEditionType; Option: XlEditionOptionsOption; Name, Reference: OleVariant; Appearance, ChartSize: XlPictureAppearance; Format: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_End_(Direction: XlDirection; out Retval: Range): HResult; stdcall;
    function Get_EntireColumn(out Retval: Range): HResult; stdcall;
    function Get_EntireRow(out Retval: Range): HResult; stdcall;
    function FillDown: HResult; stdcall;
    function FillLeft: HResult; stdcall;
    function FillRight: HResult; stdcall;
    function FillUp: HResult; stdcall;
    function Find(What, After, LookIn, LookAt, SearchOrder: OleVariant; SearchDirection: XlSearchDirection; MatchCase, MatchByte, MatchControlCharacters, MatchDiacritics, MatchKashida, MatchAlefHamza: OleVariant; out Retval: Range): HResult; stdcall;
    function FindNext(After: OleVariant; out Retval: Range): HResult; stdcall;
    function FindPrevious(After: OleVariant; out Retval: Range): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Formula(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get_FormulaArray(out Retval: OleVariant): HResult; stdcall;
    function Set_FormulaArray(Value: OleVariant): HResult; stdcall;
    function Get_FormulaLabel(out Retval: XlFormulaLabel): HResult; stdcall;
    function Set_FormulaLabel(Value: XlFormulaLabel): HResult; stdcall;
    function Get_FormulaHidden(out Retval: OleVariant): HResult; stdcall;
    function Set_FormulaHidden(Value: OleVariant): HResult; stdcall;
    function Get_FormulaLocal(out Retval: OleVariant): HResult; stdcall;
    function Set_FormulaLocal(Value: OleVariant): HResult; stdcall;
    function Get_FormulaR1C1(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_FormulaR1C1(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get_FormulaR1C1Local(out Retval: OleVariant): HResult; stdcall;
    function Set_FormulaR1C1Local(Value: OleVariant): HResult; stdcall;
    function FunctionWizard: HResult; stdcall;
    function GoalSeek(Goal: OleVariant; const ChangingCell: Range; out Retval: WordBool): HResult; stdcall;
    function Group(Start, End_, By, Periods: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_HasArray(out Retval: OleVariant): HResult; stdcall;
    function Get_HasFormula(out Retval: OleVariant): HResult; stdcall;
    function Get_Height(out Retval: OleVariant): HResult; stdcall;
    function Get_Hidden(out Retval: OleVariant): HResult; stdcall;
    function Set_Hidden(Value: OleVariant): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_IndentLevel(out Retval: OleVariant): HResult; stdcall;
    function Set_IndentLevel(Value: OleVariant): HResult; stdcall;
    function InsertIndent(InsertAmount: Integer): HResult; stdcall;
    function Insert(Shift: OleVariant): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Item(RowIndex, ColumnIndex: OleVariant; lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Item(RowIndex, ColumnIndex: OleVariant; lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Justify: HResult; stdcall;
    function Get_Left(out Retval: OleVariant): HResult; stdcall;
    function Get_ListHeaderRows(out Retval: Integer): HResult; stdcall;
    function ListNames: HResult; stdcall;
    function Get_LocationInTable(out Retval: XlLocationInTable): HResult; stdcall;
    function Get_Locked(out Retval: OleVariant): HResult; stdcall;
    function Set_Locked(Value: OleVariant): HResult; stdcall;
    function Merge(Across: OleVariant): HResult; stdcall;
    function UnMerge: HResult; stdcall;
    function Get_MergeArea(out Retval: Range): HResult; stdcall;
    function Get_MergeCells(out Retval: OleVariant): HResult; stdcall;
    function Set_MergeCells(Value: OleVariant): HResult; stdcall;
    function Get_Name(out Retval: OleVariant): HResult; stdcall;
    function Set_Name(Value: OleVariant): HResult; stdcall;
    function NavigateArrow(TowardPrecedent, ArrowNumber, LinkNumber: OleVariant): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get_Next(out Retval: Range): HResult; stdcall;
    function NoteText(Text, Start, Length: OleVariant; out Retval: WideString): HResult; stdcall;
    function Get_NumberFormat(out Retval: OleVariant): HResult; stdcall;
    function Set_NumberFormat(Value: OleVariant): HResult; stdcall;
    function Get_NumberFormatLocal(out Retval: OleVariant): HResult; stdcall;
    function Set_NumberFormatLocal(Value: OleVariant): HResult; stdcall;
    function Get_Offset(RowOffset, ColumnOffset: OleVariant; out Retval: Range): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_OutlineLevel(out Retval: OleVariant): HResult; stdcall;
    function Set_OutlineLevel(Value: OleVariant): HResult; stdcall;
    function Get_PageBreak(out Retval: Integer): HResult; stdcall;
    function Set_PageBreak(Value: Integer): HResult; stdcall;
    function Parse(ParseLine, Destination: OleVariant): HResult; stdcall;
    function PasteSpecial(Paste: XlPasteType; Operation: XlPasteSpecialOperation; SkipBlanks, Transpose: OleVariant): HResult; stdcall;
    function Get_PivotField(out Retval: PivotField): HResult; stdcall;
    function Get_PivotItem(out Retval: PivotItem): HResult; stdcall;
    function Get_PivotTable(out Retval: PivotTable): HResult; stdcall;
    function Get_Precedents(out Retval: Range): HResult; stdcall;
    function Get_PrefixCharacter(out Retval: OleVariant): HResult; stdcall;
    function Get_Previous(out Retval: Range): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant): HResult; stdcall;
    function Get_QueryTable(out Retval: QueryTable): HResult; stdcall;
    function Get_Range(Cell1, Cell2: OleVariant; out Retval: Range): HResult; stdcall;
    function RemoveSubtotal: HResult; stdcall;
    function Replace(What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, MatchControlCharacters, MatchDiacritics, MatchKashida, MatchAlefHamza: OleVariant; out Retval: WordBool): HResult; stdcall;
    function Get_Resize(RowSize, ColumnSize: OleVariant; out Retval: Range): HResult; stdcall;
    function Get_Row(out Retval: Integer): HResult; stdcall;
    function RowDifferences(Comparison: OleVariant; out Retval: Range): HResult; stdcall;
    function Get_RowHeight(out Retval: OleVariant): HResult; stdcall;
    function Set_RowHeight(Value: OleVariant): HResult; stdcall;
    function Get_Rows(out Retval: Range): HResult; stdcall;
    function Run(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Select: HResult; stdcall;
    function Show: HResult; stdcall;
    function ShowDependents(Remove: OleVariant): HResult; stdcall;
    function Get_ShowDetail(out Retval: OleVariant): HResult; stdcall;
    function Set_ShowDetail(Value: OleVariant): HResult; stdcall;
    function ShowErrors: HResult; stdcall;
    function ShowPrecedents(Remove: OleVariant): HResult; stdcall;
    function Get_ShrinkToFit(out Retval: OleVariant): HResult; stdcall;
    function Set_ShrinkToFit(Value: OleVariant): HResult; stdcall;
    function Sort(Key1: OleVariant; Order1: XlSortOrder; Key2, Type_: OleVariant; Order2: XlSortOrder; Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; OrderCustom, MatchCase: OleVariant; Orientation: XlSortOrientation; SortMethod: XlSortMethod; IgnoreControlCharacters, IgnoreDiacritics, IgnoreKashida: OleVariant): HResult; stdcall;
    function SortSpecial(SortMethod: XlSortMethod; Key1: OleVariant; Order1: XlSortOrder; Type_, Key2: OleVariant; Order2: XlSortOrder; Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; OrderCustom, MatchCase: OleVariant; Orientation: XlSortOrientation): HResult; stdcall;
    function Get_SoundNote(out Retval: SoundNote): HResult; stdcall;
    function SpecialCells(Type_: XlCellType; Value: OleVariant; out Retval: Range): HResult; stdcall;
    function Get_Style(out Retval: OleVariant): HResult; stdcall;
    function Set_Style(Value: OleVariant): HResult; stdcall;
    function SubscribeTo(const Edition: WideString; Format: XlSubscribeToFormat): HResult; stdcall;
    function Subtotal(GroupBy: Integer; Function_: XlConsolidationFunction; TotalList, Replace, PageBreaks: OleVariant; SummaryBelowData: XlSummaryRow): HResult; stdcall;
    function Get_Summary(out Retval: OleVariant): HResult; stdcall;
    function Table(RowInput, ColumnInput: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: OleVariant): HResult; stdcall;
    function TextToColumns(Destination: OleVariant; DataType: XlTextParsingType; TextQualifier: XlTextQualifier; ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo: OleVariant): HResult; stdcall;
    function Get_Top(out Retval: OleVariant): HResult; stdcall;
    function Ungroup: HResult; stdcall;
    function Get_UseStandardHeight(out Retval: OleVariant): HResult; stdcall;
    function Set_UseStandardHeight(Value: OleVariant): HResult; stdcall;
    function Get_UseStandardWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_UseStandardWidth(Value: OleVariant): HResult; stdcall;
    function Get_Validation(out Retval: Validation): HResult; stdcall;
    function Get_Value(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Value(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get_Value2(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Value2(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_Width(out Retval: OleVariant): HResult; stdcall;
    function Get_Worksheet(out Retval: Worksheet): HResult; stdcall;
    function Get_WrapText(out Retval: OleVariant): HResult; stdcall;
    function Set_WrapText(Value: OleVariant): HResult; stdcall;
    function AddComment(Text: OleVariant; out Retval: Comment): HResult; stdcall;
    function Get_Comment(out Retval: Comment): HResult; stdcall;
    function ClearComments: HResult; stdcall;
    function Get_Phonetic(out Retval: Phonetic): HResult; stdcall;
    function Get_FormatConditions(out Retval: FormatConditions): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Hyperlinks(out Retval: Hyperlinks): HResult; stdcall;
  end;

  IChartEvents = interface(IDispatch)
    ['{0002440F-0001-0000-C000-000000000046}']
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function Resize: HResult; stdcall;
    function MouseDown(Button: XlMouseButton; Shift, X, Y: Integer): HResult; stdcall;
    function MouseUp(Button: XlMouseButton; Shift, X, Y: Integer): HResult; stdcall;
    function MouseMove(Button: XlMouseButton; Shift, X, Y: Integer): HResult; stdcall;
    function BeforeRightClick(var Cancel: WordBool): HResult; stdcall;
    function DragPlot: HResult; stdcall;
    function DragOver: HResult; stdcall;
    function BeforeDoubleClick(ElementID: XlChartItem; Arg1, Arg2: Integer; var Cancel: WordBool): HResult; stdcall;
    function Select(ElementID: XlChartItem; Arg1, Arg2: Integer): HResult; stdcall;
    function SeriesChange(SeriesIndex, PointIndex: Integer): HResult; stdcall;
    function Calculate: HResult; stdcall;
  end;

  _Chart = interface(IDispatch)
    ['{000208D6-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Activate(lcid: Integer); safecall;
    procedure Copy(Before, After: OleVariant; lcid: Integer); safecall;
    procedure Delete(lcid: Integer); safecall;
    function Get_CodeName: WideString; safecall;
    function Get__CodeName: WideString; safecall;
    procedure Set__CodeName(const Value: WideString); safecall;
    function Get_Index(lcid: Integer): Integer; safecall;
    procedure Move(Before, After: OleVariant; lcid: Integer); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Value: WideString); safecall;
    function Get_Next: IDispatch; safecall;
    function Get_OnDoubleClick(lcid: Integer): WideString; safecall;
    procedure Set_OnDoubleClick(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const Value: WideString); safecall;
    function Get_PageSetup: PageSetup; safecall;
    function Get_Previous: IDispatch; safecall;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant; lcid: Integer); safecall;
    function Get_ProtectContents(lcid: Integer): WordBool; safecall;
    function Get_ProtectDrawingObjects(lcid: Integer): WordBool; safecall;
    function Get_ProtectionMode(lcid: Integer): WordBool; safecall;
    procedure _Dummy23; stdcall;
    procedure SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer); safecall;
    procedure Select(Replace: OleVariant; lcid: Integer); safecall;
    procedure Unprotect(Password: OleVariant; lcid: Integer); safecall;
    function Get_Visible(lcid: Integer): XlSheetVisibility; safecall;
    procedure Set_Visible(lcid: Integer; Value: XlSheetVisibility); safecall;
    function Get_Shapes: Shapes; safecall;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey, AutoText, HasLeaderLines: OleVariant; lcid: Integer); safecall;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Area3DGroup(lcid: Integer): ChartGroup; safecall;
    function AreaGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure AutoFormat(Gallery: Integer; Format: OleVariant); safecall;
    function Get_AutoScaling(lcid: Integer): WordBool; safecall;
    procedure Set_AutoScaling(lcid: Integer; Value: WordBool); safecall;
    function Axes(Type_: OleVariant; AxisGroup: XlAxisGroup; lcid: Integer): IDispatch; safecall;
    procedure SetBackgroundPicture(const Filename: WideString); safecall;
    function Get_Bar3DGroup(lcid: Integer): ChartGroup; safecall;
    function BarGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_ChartArea(lcid: Integer): ChartArea; safecall;
    function ChartGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_ChartTitle(lcid: Integer): ChartTitle; safecall;
    procedure ChartWizard(Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle: OleVariant; lcid: Integer); safecall;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant; lcid: Integer); safecall;
    function Get_Column3DGroup(lcid: Integer): ChartGroup; safecall;
    function ColumnGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat; Size: XlPictureAppearance; lcid: Integer); safecall;
    function Get_Corners(lcid: Integer): Corners; safecall;
    procedure CreatePublisher(Edition: OleVariant; Appearance, Size: XlPictureAppearance; ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU: OleVariant; lcid: Integer); safecall;
    function Get_DataTable: DataTable; safecall;
    function Get_DepthPercent(lcid: Integer): Integer; safecall;
    procedure Set_DepthPercent(lcid: Integer; Value: Integer); safecall;
    procedure Deselect(lcid: Integer); safecall;
    function Get_DisplayBlanksAs(lcid: Integer): XlDisplayBlanksAs; safecall;
    procedure Set_DisplayBlanksAs(lcid: Integer; Value: XlDisplayBlanksAs); safecall;
    function DoughnutGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Elevation(lcid: Integer): Integer; safecall;
    procedure Set_Elevation(lcid: Integer; Value: Integer); safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Floor(lcid: Integer): Floor; safecall;
    function Get_GapDepth(lcid: Integer): Integer; safecall;
    procedure Set_GapDepth(lcid: Integer; Value: Integer); safecall;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_HasAxis(Index1, Index2: OleVariant; lcid: Integer): OleVariant; safecall;
    procedure Set_HasAxis(Index1, Index2: OleVariant; lcid: Integer; Value: OleVariant); safecall;
    function Get_HasDataTable: WordBool; safecall;
    procedure Set_HasDataTable(Value: WordBool); safecall;
    function Get_HasLegend(lcid: Integer): WordBool; safecall;
    procedure Set_HasLegend(lcid: Integer; Value: WordBool); safecall;
    function Get_HasTitle(lcid: Integer): WordBool; safecall;
    procedure Set_HasTitle(lcid: Integer; Value: WordBool); safecall;
    function Get_HeightPercent(lcid: Integer): Integer; safecall;
    procedure Set_HeightPercent(lcid: Integer; Value: Integer); safecall;
    function Get_Hyperlinks: Hyperlinks; safecall;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Legend(lcid: Integer): Legend; safecall;
    function Get_Line3DGroup(lcid: Integer): ChartGroup; safecall;
    function LineGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Location(Where: XlChartLocation; Name: OleVariant): Chart; safecall;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Paste(Type_: OleVariant; lcid: Integer); safecall;
    function Get_Perspective(lcid: Integer): Integer; safecall;
    procedure Set_Perspective(lcid: Integer; Value: Integer); safecall;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Pie3DGroup(lcid: Integer): ChartGroup; safecall;
    function PieGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_PlotArea(lcid: Integer): PlotArea; safecall;
    function Get_PlotVisibleOnly(lcid: Integer): WordBool; safecall;
    procedure Set_PlotVisibleOnly(lcid: Integer; Value: WordBool); safecall;
    function RadarGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_RightAngleAxes(lcid: Integer): OleVariant; safecall;
    procedure Set_RightAngleAxes(lcid: Integer; Value: OleVariant); safecall;
    function Get_Rotation(lcid: Integer): OleVariant; safecall;
    procedure Set_Rotation(lcid: Integer; Value: OleVariant); safecall;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function SeriesCollection(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_SizeWithWindow(lcid: Integer): WordBool; safecall;
    procedure Set_SizeWithWindow(lcid: Integer; Value: WordBool); safecall;
    function Get_ShowWindow: WordBool; safecall;
    procedure Set_ShowWindow(Value: WordBool); safecall;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_SubType(lcid: Integer): Integer; safecall;
    procedure Set_SubType(lcid: Integer; Value: Integer); safecall;
    function Get_SurfaceGroup(lcid: Integer): ChartGroup; safecall;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Type_(lcid: Integer): Integer; safecall;
    procedure Set_Type_(lcid: Integer; Value: Integer); safecall;
    function Get_ChartType: XlChartType; safecall;
    procedure Set_ChartType(Value: XlChartType); safecall;
    procedure ApplyCustomType(ChartType: XlChartType; TypeName: OleVariant); safecall;
    function Get_Walls(lcid: Integer): Walls; safecall;
    function Get_WallsAndGridlines2D(lcid: Integer): WordBool; safecall;
    procedure Set_WallsAndGridlines2D(lcid: Integer; Value: WordBool); safecall;
    function XYGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_BarShape: XlBarShape; safecall;
    procedure Set_BarShape(Value: XlBarShape); safecall;
    function Get_PlotBy: XlRowCol; safecall;
    procedure Set_PlotBy(Value: XlRowCol); safecall;
    procedure CopyChartBuild; safecall;
    function Get_ProtectFormatting: WordBool; safecall;
    procedure Set_ProtectFormatting(Value: WordBool); safecall;
    function Get_ProtectData: WordBool; safecall;
    procedure Set_ProtectData(Value: WordBool); safecall;
    function Get_ProtectGoalSeek: WordBool; safecall;
    procedure Set_ProtectGoalSeek(Value: WordBool); safecall;
    function Get_ProtectSelection: WordBool; safecall;
    procedure Set_ProtectSelection(Value: WordBool); safecall;
    procedure GetChartElement(X, Y: Integer; var ElementID, Arg1, Arg2: Integer); safecall;
    procedure SetSourceData(const Source: Range; PlotBy: OleVariant); safecall;
    function Export(const Filename: WideString; FilterName, Interactive: OleVariant): WordBool; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property CodeName: WideString read Get_CodeName;
    property _CodeName: WideString read Get__CodeName write Set__CodeName;
    property Index[lcid: Integer]: Integer read Get_Index;
    property Name: WideString read Get_Name write Set_Name;
    property Next: IDispatch read Get_Next;
    property OnDoubleClick[lcid: Integer]: WideString read Get_OnDoubleClick write Set_OnDoubleClick;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property PageSetup: PageSetup read Get_PageSetup;
    property Previous: IDispatch read Get_Previous;
    property ProtectContents[lcid: Integer]: WordBool read Get_ProtectContents;
    property ProtectDrawingObjects[lcid: Integer]: WordBool read Get_ProtectDrawingObjects;
    property ProtectionMode[lcid: Integer]: WordBool read Get_ProtectionMode;
    property Visible[lcid: Integer]: XlSheetVisibility read Get_Visible write Set_Visible;
    property Shapes: Shapes read Get_Shapes;
    property Area3DGroup[lcid: Integer]: ChartGroup read Get_Area3DGroup;
    property AutoScaling[lcid: Integer]: WordBool read Get_AutoScaling write Set_AutoScaling;
    property Bar3DGroup[lcid: Integer]: ChartGroup read Get_Bar3DGroup;
    property ChartArea[lcid: Integer]: ChartArea read Get_ChartArea;
    property ChartTitle[lcid: Integer]: ChartTitle read Get_ChartTitle;
    property Column3DGroup[lcid: Integer]: ChartGroup read Get_Column3DGroup;
    property Corners[lcid: Integer]: Corners read Get_Corners;
    property DataTable: DataTable read Get_DataTable;
    property DepthPercent[lcid: Integer]: Integer read Get_DepthPercent write Set_DepthPercent;
    property DisplayBlanksAs[lcid: Integer]: XlDisplayBlanksAs read Get_DisplayBlanksAs write Set_DisplayBlanksAs;
    property Elevation[lcid: Integer]: Integer read Get_Elevation write Set_Elevation;
    property Floor[lcid: Integer]: Floor read Get_Floor;
    property GapDepth[lcid: Integer]: Integer read Get_GapDepth write Set_GapDepth;
    property HasAxis[Index1, Index2: OleVariant; lcid: Integer]: OleVariant read Get_HasAxis write Set_HasAxis;
    property HasDataTable: WordBool read Get_HasDataTable write Set_HasDataTable;
    property HasLegend[lcid: Integer]: WordBool read Get_HasLegend write Set_HasLegend;
    property HasTitle[lcid: Integer]: WordBool read Get_HasTitle write Set_HasTitle;
    property HeightPercent[lcid: Integer]: Integer read Get_HeightPercent write Set_HeightPercent;
    property Hyperlinks: Hyperlinks read Get_Hyperlinks;
    property Legend[lcid: Integer]: Legend read Get_Legend;
    property Line3DGroup[lcid: Integer]: ChartGroup read Get_Line3DGroup;
    property Perspective[lcid: Integer]: Integer read Get_Perspective write Set_Perspective;
    property Pie3DGroup[lcid: Integer]: ChartGroup read Get_Pie3DGroup;
    property PlotArea[lcid: Integer]: PlotArea read Get_PlotArea;
    property PlotVisibleOnly[lcid: Integer]: WordBool read Get_PlotVisibleOnly write Set_PlotVisibleOnly;
    property RightAngleAxes[lcid: Integer]: OleVariant read Get_RightAngleAxes write Set_RightAngleAxes;
    property Rotation[lcid: Integer]: OleVariant read Get_Rotation write Set_Rotation;
    property SizeWithWindow[lcid: Integer]: WordBool read Get_SizeWithWindow write Set_SizeWithWindow;
    property ShowWindow: WordBool read Get_ShowWindow write Set_ShowWindow;
    property SubType[lcid: Integer]: Integer read Get_SubType write Set_SubType;
    property SurfaceGroup[lcid: Integer]: ChartGroup read Get_SurfaceGroup;
    property Type_[lcid: Integer]: Integer read Get_Type_ write Set_Type_;
    property ChartType: XlChartType read Get_ChartType write Set_ChartType;
    property Walls[lcid: Integer]: Walls read Get_Walls;
    property WallsAndGridlines2D[lcid: Integer]: WordBool read Get_WallsAndGridlines2D write Set_WallsAndGridlines2D;
    property BarShape: XlBarShape read Get_BarShape write Set_BarShape;
    property PlotBy: XlRowCol read Get_PlotBy write Set_PlotBy;
    property ProtectFormatting: WordBool read Get_ProtectFormatting write Set_ProtectFormatting;
    property ProtectData: WordBool read Get_ProtectData write Set_ProtectData;
    property ProtectGoalSeek: WordBool read Get_ProtectGoalSeek write Set_ProtectGoalSeek;
    property ProtectSelection: WordBool read Get_ProtectSelection write Set_ProtectSelection;
  end;

{ DispInterface declaration for Dual Interface _Chart }

  _ChartDisp = dispinterface
    ['{000208D6-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate(lcid: Integer); dispid 304;
    procedure Copy(Before, After: OleVariant; lcid: Integer); dispid 551;
    procedure Delete(lcid: Integer); dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index[lcid: Integer]: Integer readonly dispid 486;
    procedure Move(Before, After: OleVariant; lcid: Integer); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick[lcid: Integer]: WideString dispid 628;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant; lcid: Integer); dispid 282;
    property ProtectContents[lcid: Integer]: WordBool readonly dispid 292;
    property ProtectDrawingObjects[lcid: Integer]: WordBool readonly dispid 293;
    property ProtectionMode[lcid: Integer]: WordBool readonly dispid 1159;
    procedure SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer); dispid 284;
    procedure Select(Replace: OleVariant; lcid: Integer); dispid 235;
    procedure Unprotect(Password: OleVariant; lcid: Integer); dispid 285;
    property Visible[lcid: Integer]: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey, AutoText, HasLeaderLines: OleVariant; lcid: Integer); dispid 151;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; dispid 760;
    property Area3DGroup[lcid: Integer]: ChartGroup readonly dispid 17;
    function AreaGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 9;
    procedure AutoFormat(Gallery: Integer; Format: OleVariant); dispid 114;
    property AutoScaling[lcid: Integer]: WordBool dispid 107;
    function Axes(Type_: OleVariant; AxisGroup: XlAxisGroup; lcid: Integer): IDispatch; dispid 23;
    procedure SetBackgroundPicture(const Filename: WideString); dispid 1188;
    property Bar3DGroup[lcid: Integer]: ChartGroup readonly dispid 18;
    function BarGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 10;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; dispid 557;
    property ChartArea[lcid: Integer]: ChartArea readonly dispid 80;
    function ChartGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 8;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1060;
    property ChartTitle[lcid: Integer]: ChartTitle readonly dispid 81;
    procedure ChartWizard(Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle: OleVariant; lcid: Integer); dispid 196;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 824;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant; lcid: Integer); dispid 505;
    property Column3DGroup[lcid: Integer]: ChartGroup readonly dispid 19;
    function ColumnGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 11;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat; Size: XlPictureAppearance; lcid: Integer); dispid 213;
    property Corners[lcid: Integer]: Corners readonly dispid 79;
    procedure CreatePublisher(Edition: OleVariant; Appearance, Size: XlPictureAppearance; ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU: OleVariant; lcid: Integer); dispid 458;
    property DataTable: DataTable readonly dispid 1395;
    property DepthPercent[lcid: Integer]: Integer dispid 48;
    procedure Deselect(lcid: Integer); dispid 1120;
    property DisplayBlanksAs[lcid: Integer]: XlDisplayBlanksAs dispid 93;
    function DoughnutGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 14;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; dispid 772;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 88;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; dispid 836;
    property Elevation[lcid: Integer]: Integer dispid 49;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    property Floor[lcid: Integer]: Floor readonly dispid 83;
    property GapDepth[lcid: Integer]: Integer dispid 50;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 834;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1113;
    property HasAxis[Index1, Index2: OleVariant; lcid: Integer]: OleVariant dispid 52;
    property HasDataTable: WordBool dispid 1396;
    property HasLegend[lcid: Integer]: WordBool dispid 53;
    property HasTitle[lcid: Integer]: WordBool dispid 54;
    property HeightPercent[lcid: Integer]: Integer dispid 55;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; dispid 841;
    property Legend[lcid: Integer]: Legend readonly dispid 84;
    property Line3DGroup[lcid: Integer]: ChartGroup readonly dispid 20;
    function LineGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 12;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; dispid 767;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 832;
    function Location(Where: XlChartLocation; Name: OleVariant): Chart; dispid 1397;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 799;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; dispid 826;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; dispid 801;
    procedure Paste(Type_: OleVariant; lcid: Integer); dispid 211;
    property Perspective[lcid: Integer]: Integer dispid 57;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; dispid 771;
    property Pie3DGroup[lcid: Integer]: ChartGroup readonly dispid 21;
    function PieGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 13;
    property PlotArea[lcid: Integer]: PlotArea readonly dispid 85;
    property PlotVisibleOnly[lcid: Integer]: WordBool dispid 92;
    function RadarGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 15;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; dispid 774;
    property RightAngleAxes[lcid: Integer]: OleVariant dispid 58;
    property Rotation[lcid: Integer]: OleVariant dispid 59;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; dispid 830;
    function SeriesCollection(Index: OleVariant; lcid: Integer): IDispatch; dispid 68;
    property SizeWithWindow[lcid: Integer]: WordBool dispid 94;
    property ShowWindow: WordBool dispid 1399;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; dispid 838;
    property SubType[lcid: Integer]: Integer dispid 109;
    property SurfaceGroup[lcid: Integer]: ChartGroup readonly dispid 22;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 777;
    property Type_[lcid: Integer]: Integer dispid 108;
    property ChartType: XlChartType dispid 1400;
    procedure ApplyCustomType(ChartType: XlChartType; TypeName: OleVariant); dispid 1401;
    property Walls[lcid: Integer]: Walls readonly dispid 86;
    property WallsAndGridlines2D[lcid: Integer]: WordBool dispid 210;
    function XYGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 16;
    property BarShape: XlBarShape dispid 1403;
    property PlotBy: XlRowCol dispid 202;
    procedure CopyChartBuild; dispid 1404;
    property ProtectFormatting: WordBool dispid 1405;
    property ProtectData: WordBool dispid 1406;
    property ProtectGoalSeek: WordBool dispid 1407;
    property ProtectSelection: WordBool dispid 1408;
    procedure GetChartElement(X, Y: Integer; var ElementID, Arg1, Arg2: Integer); dispid 1409;
    procedure SetSourceData(const Source: Range; PlotBy: OleVariant); dispid 1413;
    function Export(const Filename: WideString; FilterName, Interactive: OleVariant): WordBool; dispid 1414;
    procedure Refresh; dispid 1417;
  end;

  Sheets = interface(IDispatch)
    ['{000208D7-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    function Add(Before, After, Count, Type_: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Copy(Before, After: OleVariant; lcid: Integer); safecall;
    function Get_Count: Integer; safecall;
    procedure Delete(lcid: Integer); safecall;
    procedure FillAcrossSheets(const Range: Range; Type_: XlFillWith; lcid: Integer); safecall;
    function Get_Item(Index: OleVariant): IDispatch; safecall;
    procedure Move(Before, After: OleVariant; lcid: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Select(Replace: OleVariant; lcid: Integer); safecall;
    function Get_HPageBreaks: HPageBreaks; safecall;
    function Get_VPageBreaks: VPageBreaks; safecall;
    function Get_Visible(lcid: Integer): OleVariant; safecall;
    procedure Set_Visible(lcid: Integer; Value: OleVariant); safecall;
    function Get__Default(Index: OleVariant): IDispatch; safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property Count: Integer read Get_Count;
    property Item[Index: OleVariant]: IDispatch read Get_Item;
    property _NewEnum: IUnknown read Get__NewEnum;
    property HPageBreaks: HPageBreaks read Get_HPageBreaks;
    property VPageBreaks: VPageBreaks read Get_VPageBreaks;
    property Visible[lcid: Integer]: OleVariant read Get_Visible write Set_Visible;
    property _Default[Index: OleVariant]: IDispatch read Get__Default; default;
  end;

{ DispInterface declaration for Dual Interface Sheets }

  SheetsDisp = dispinterface
    ['{000208D7-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before, After, Count, Type_: OleVariant; lcid: Integer): IDispatch; dispid 181;
    procedure Copy(Before, After: OleVariant; lcid: Integer); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete(lcid: Integer); dispid 117;
    procedure FillAcrossSheets(const Range: Range; Type_: XlFillWith; lcid: Integer); dispid 469;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before, After: OleVariant; lcid: Integer); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Select(Replace: OleVariant; lcid: Integer); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible[lcid: Integer]: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

  IVPageBreak = interface(IDispatch)
    ['{00024402-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: Worksheet): HResult; stdcall;
    function Delete: HResult; stdcall;
    function DragOff(Direction: XlDirection; RegionIndex: Integer): HResult; stdcall;
    function Get_Type_(out Retval: XlPageBreak): HResult; stdcall;
    function Set_Type_(Value: XlPageBreak): HResult; stdcall;
    function Get_Extent(out Retval: XlPageBreakExtent): HResult; stdcall;
    function Get_Location(out Retval: Range): HResult; stdcall;
    function Set_Location(var Value: Range): HResult; stdcall;
  end;

  IHPageBreak = interface(IDispatch)
    ['{00024401-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: Worksheet): HResult; stdcall;
    function Delete: HResult; stdcall;
    function DragOff(Direction: XlDirection; RegionIndex: Integer): HResult; stdcall;
    function Get_Type_(out Retval: XlPageBreak): HResult; stdcall;
    function Set_Type_(Value: XlPageBreak): HResult; stdcall;
    function Get_Extent(out Retval: XlPageBreakExtent): HResult; stdcall;
    function Get_Location(out Retval: Range): HResult; stdcall;
    function Set_Location(var Value: Range): HResult; stdcall;
  end;

  IHPageBreaks = interface(IDispatch)
    ['{00024404-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: HPageBreak): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: HPageBreak): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Add(Before: IDispatch; out Retval: HPageBreak): HResult; stdcall;
  end;

  IVPageBreaks = interface(IDispatch)
    ['{00024405-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: VPageBreak): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: VPageBreak): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Add(Before: IDispatch; out Retval: VPageBreak): HResult; stdcall;
  end;

  IRecentFile = interface(IDispatch)
    ['{00024407-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Get_Path(out Retval: WideString): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Open(out Retval: Workbook): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IRecentFiles = interface(IDispatch)
    ['{00024406-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Maximum(out Retval: Integer): HResult; stdcall;
    function Set_Maximum(Value: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: RecentFile): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: RecentFile): HResult; stdcall;
    function Add(const Name: WideString; out Retval: RecentFile): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IDocEvents = interface(IDispatch)
    ['{00024411-0001-0000-C000-000000000046}']
    function SelectionChange(const Target: Range): HResult; stdcall;
    function BeforeDoubleClick(const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function BeforeRightClick(const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function Calculate: HResult; stdcall;
    function Change(const Target: Range): HResult; stdcall;
  end;

  _Worksheet = interface(IDispatch)
    ['{000208D8-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Activate(lcid: Integer); safecall;
    procedure Copy(Before, After: OleVariant; lcid: Integer); safecall;
    procedure Delete(lcid: Integer); safecall;
    function Get_CodeName: WideString; safecall;
    function Get__CodeName: WideString; safecall;
    procedure Set__CodeName(const Value: WideString); safecall;
    function Get_Index(lcid: Integer): Integer; safecall;
    procedure Move(Before, After: OleVariant; lcid: Integer); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Value: WideString); safecall;
    function Get_Next: IDispatch; safecall;
    function Get_OnDoubleClick(lcid: Integer): WideString; safecall;
    procedure Set_OnDoubleClick(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const Value: WideString); safecall;
    function Get_PageSetup: PageSetup; safecall;
    function Get_Previous: IDispatch; safecall;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant; lcid: Integer); safecall;
    function Get_ProtectContents(lcid: Integer): WordBool; safecall;
    function Get_ProtectDrawingObjects(lcid: Integer): WordBool; safecall;
    function Get_ProtectionMode(lcid: Integer): WordBool; safecall;
    function Get_ProtectScenarios(lcid: Integer): WordBool; safecall;
    procedure SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer); safecall;
    procedure Select(Replace: OleVariant; lcid: Integer); safecall;
    procedure Unprotect(Password: OleVariant; lcid: Integer); safecall;
    function Get_Visible(lcid: Integer): XlSheetVisibility; safecall;
    procedure Set_Visible(lcid: Integer; Value: XlSheetVisibility); safecall;
    function Get_Shapes: Shapes; safecall;
    function Get_TransitionExpEval(lcid: Integer): WordBool; safecall;
    procedure Set_TransitionExpEval(lcid: Integer; Value: WordBool); safecall;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_AutoFilterMode(lcid: Integer): WordBool; safecall;
    procedure Set_AutoFilterMode(lcid: Integer; Value: WordBool); safecall;
    procedure SetBackgroundPicture(const Filename: WideString); safecall;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Calculate(lcid: Integer); safecall;
    function Get_EnableCalculation: WordBool; safecall;
    procedure Set_EnableCalculation(Value: WordBool); safecall;
    function Get_Cells: Range; safecall;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant; lcid: Integer); safecall;
    function Get_CircularReference(lcid: Integer): Range; safecall;
    procedure ClearArrows(lcid: Integer); safecall;
    function Get_Columns: Range; safecall;
    function Get_ConsolidationFunction(lcid: Integer): XlConsolidationFunction; safecall;
    function Get_ConsolidationOptions(lcid: Integer): OleVariant; safecall;
    function Get_ConsolidationSources(lcid: Integer): OleVariant; safecall;
    function Get_DisplayAutomaticPageBreaks(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayAutomaticPageBreaks(lcid: Integer; Value: WordBool); safecall;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_EnableAutoFilter(lcid: Integer): WordBool; safecall;
    procedure Set_EnableAutoFilter(lcid: Integer; Value: WordBool); safecall;
    function Get_EnableSelection: XlEnableSelection; safecall;
    procedure Set_EnableSelection(Value: XlEnableSelection); safecall;
    function Get_EnableOutlining(lcid: Integer): WordBool; safecall;
    procedure Set_EnableOutlining(lcid: Integer; Value: WordBool); safecall;
    function Get_EnablePivotTable(lcid: Integer): WordBool; safecall;
    procedure Set_EnablePivotTable(lcid: Integer; Value: WordBool); safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_FilterMode(lcid: Integer): WordBool; safecall;
    procedure ResetAllPageBreaks; safecall;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Names: Names; safecall;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_OnCalculate(lcid: Integer): WideString; safecall;
    procedure Set_OnCalculate(lcid: Integer; const Value: WideString); safecall;
    function Get_OnData(lcid: Integer): WideString; safecall;
    procedure Set_OnData(lcid: Integer; const Value: WideString); safecall;
    function Get_OnEntry(lcid: Integer): WideString; safecall;
    procedure Set_OnEntry(lcid: Integer; const Value: WideString); safecall;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Outline: Outline; safecall;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Paste(Destination, Link: OleVariant; lcid: Integer); safecall;
    procedure PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel: OleVariant; lcid: Integer); safecall;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function PivotTables(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection: OleVariant; lcid: Integer): PivotTable; safecall;
    function Get_Range(Cell1, Cell2: OleVariant): Range; safecall;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Rows: Range; safecall;
    function Scenarios(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_ScrollArea: WideString; safecall;
    procedure Set_ScrollArea(const Value: WideString); safecall;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure ShowAllData(lcid: Integer); safecall;
    procedure ShowDataForm(lcid: Integer); safecall;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_StandardHeight(lcid: Integer): Double; safecall;
    function Get_StandardWidth(lcid: Integer): Double; safecall;
    procedure Set_StandardWidth(lcid: Integer; Value: Double); safecall;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_TransitionFormEntry(lcid: Integer): WordBool; safecall;
    procedure Set_TransitionFormEntry(lcid: Integer; Value: WordBool); safecall;
    function Get_Type_(lcid: Integer): XlSheetType; safecall;
    function Get_UsedRange(lcid: Integer): Range; safecall;
    function Get_HPageBreaks: HPageBreaks; safecall;
    function Get_VPageBreaks: VPageBreaks; safecall;
    function Get_QueryTables: QueryTables; safecall;
    function Get_DisplayPageBreaks: WordBool; safecall;
    procedure Set_DisplayPageBreaks(Value: WordBool); safecall;
    function Get_Comments: Comments; safecall;
    function Get_Hyperlinks: Hyperlinks; safecall;
    procedure ClearCircles; safecall;
    procedure CircleInvalid; safecall;
    function Get_DisplayRightToLeft(lcid: Integer): Integer; safecall;
    procedure Set_DisplayRightToLeft(lcid: Integer; Value: Integer); safecall;
    function Get_AutoFilter: AutoFilter; safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property CodeName: WideString read Get_CodeName;
    property _CodeName: WideString read Get__CodeName write Set__CodeName;
    property Index[lcid: Integer]: Integer read Get_Index;
    property Name: WideString read Get_Name write Set_Name;
    property Next: IDispatch read Get_Next;
    property OnDoubleClick[lcid: Integer]: WideString read Get_OnDoubleClick write Set_OnDoubleClick;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property PageSetup: PageSetup read Get_PageSetup;
    property Previous: IDispatch read Get_Previous;
    property ProtectContents[lcid: Integer]: WordBool read Get_ProtectContents;
    property ProtectDrawingObjects[lcid: Integer]: WordBool read Get_ProtectDrawingObjects;
    property ProtectionMode[lcid: Integer]: WordBool read Get_ProtectionMode;
    property ProtectScenarios[lcid: Integer]: WordBool read Get_ProtectScenarios;
    property Visible[lcid: Integer]: XlSheetVisibility read Get_Visible write Set_Visible;
    property Shapes: Shapes read Get_Shapes;
    property TransitionExpEval[lcid: Integer]: WordBool read Get_TransitionExpEval write Set_TransitionExpEval;
    property AutoFilterMode[lcid: Integer]: WordBool read Get_AutoFilterMode write Set_AutoFilterMode;
    property EnableCalculation: WordBool read Get_EnableCalculation write Set_EnableCalculation;
    property Cells: Range read Get_Cells;
    property CircularReference[lcid: Integer]: Range read Get_CircularReference;
    property Columns: Range read Get_Columns;
    property ConsolidationFunction[lcid: Integer]: XlConsolidationFunction read Get_ConsolidationFunction;
    property ConsolidationOptions[lcid: Integer]: OleVariant read Get_ConsolidationOptions;
    property ConsolidationSources[lcid: Integer]: OleVariant read Get_ConsolidationSources;
    property DisplayAutomaticPageBreaks[lcid: Integer]: WordBool read Get_DisplayAutomaticPageBreaks write Set_DisplayAutomaticPageBreaks;
    property EnableAutoFilter[lcid: Integer]: WordBool read Get_EnableAutoFilter write Set_EnableAutoFilter;
    property EnableSelection: XlEnableSelection read Get_EnableSelection write Set_EnableSelection;
    property EnableOutlining[lcid: Integer]: WordBool read Get_EnableOutlining write Set_EnableOutlining;
    property EnablePivotTable[lcid: Integer]: WordBool read Get_EnablePivotTable write Set_EnablePivotTable;
    property FilterMode[lcid: Integer]: WordBool read Get_FilterMode;
    property Names: Names read Get_Names;
    property OnCalculate[lcid: Integer]: WideString read Get_OnCalculate write Set_OnCalculate;
    property OnData[lcid: Integer]: WideString read Get_OnData write Set_OnData;
    property OnEntry[lcid: Integer]: WideString read Get_OnEntry write Set_OnEntry;
    property Outline: Outline read Get_Outline;
    property Range[Cell1, Cell2: OleVariant]: Range read Get_Range;
    property Rows: Range read Get_Rows;
    property ScrollArea: WideString read Get_ScrollArea write Set_ScrollArea;
    property StandardHeight[lcid: Integer]: Double read Get_StandardHeight;
    property StandardWidth[lcid: Integer]: Double read Get_StandardWidth write Set_StandardWidth;
    property TransitionFormEntry[lcid: Integer]: WordBool read Get_TransitionFormEntry write Set_TransitionFormEntry;
    property Type_[lcid: Integer]: XlSheetType read Get_Type_;
    property UsedRange[lcid: Integer]: Range read Get_UsedRange;
    property HPageBreaks: HPageBreaks read Get_HPageBreaks;
    property VPageBreaks: VPageBreaks read Get_VPageBreaks;
    property QueryTables: QueryTables read Get_QueryTables;
    property DisplayPageBreaks: WordBool read Get_DisplayPageBreaks write Set_DisplayPageBreaks;
    property Comments: Comments read Get_Comments;
    property Hyperlinks: Hyperlinks read Get_Hyperlinks;
    property DisplayRightToLeft[lcid: Integer]: Integer read Get_DisplayRightToLeft write Set_DisplayRightToLeft;
    property AutoFilter: AutoFilter read Get_AutoFilter;
  end;

{ DispInterface declaration for Dual Interface _Worksheet }

  _WorksheetDisp = dispinterface
    ['{000208D8-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate(lcid: Integer); dispid 304;
    procedure Copy(Before, After: OleVariant; lcid: Integer); dispid 551;
    procedure Delete(lcid: Integer); dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index[lcid: Integer]: Integer readonly dispid 486;
    procedure Move(Before, After: OleVariant; lcid: Integer); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick[lcid: Integer]: WideString dispid 628;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant; lcid: Integer); dispid 282;
    property ProtectContents[lcid: Integer]: WordBool readonly dispid 292;
    property ProtectDrawingObjects[lcid: Integer]: WordBool readonly dispid 293;
    property ProtectionMode[lcid: Integer]: WordBool readonly dispid 1159;
    property ProtectScenarios[lcid: Integer]: WordBool readonly dispid 294;
    procedure SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer); dispid 284;
    procedure Select(Replace: OleVariant; lcid: Integer); dispid 235;
    procedure Unprotect(Password: OleVariant; lcid: Integer); dispid 285;
    property Visible[lcid: Integer]: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    property TransitionExpEval[lcid: Integer]: WordBool dispid 401;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; dispid 760;
    property AutoFilterMode[lcid: Integer]: WordBool dispid 792;
    procedure SetBackgroundPicture(const Filename: WideString); dispid 1188;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; dispid 557;
    procedure Calculate(lcid: Integer); dispid 279;
    property EnableCalculation: WordBool dispid 1424;
    property Cells: Range readonly dispid 238;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1060;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 824;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant; lcid: Integer); dispid 505;
    property CircularReference[lcid: Integer]: Range readonly dispid 1069;
    procedure ClearArrows(lcid: Integer); dispid 970;
    property Columns: Range readonly dispid 241;
    property ConsolidationFunction[lcid: Integer]: XlConsolidationFunction readonly dispid 789;
    property ConsolidationOptions[lcid: Integer]: OleVariant readonly dispid 790;
    property ConsolidationSources[lcid: Integer]: OleVariant readonly dispid 791;
    property DisplayAutomaticPageBreaks[lcid: Integer]: WordBool dispid 643;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; dispid 772;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 88;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; dispid 836;
    property EnableAutoFilter[lcid: Integer]: WordBool dispid 1156;
    property EnableSelection: XlEnableSelection dispid 1425;
    property EnableOutlining[lcid: Integer]: WordBool dispid 1157;
    property EnablePivotTable[lcid: Integer]: WordBool dispid 1158;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    property FilterMode[lcid: Integer]: WordBool readonly dispid 800;
    procedure ResetAllPageBreaks; dispid 1426;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 834;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1113;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; dispid 841;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; dispid 767;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 832;
    property Names: Names readonly dispid 442;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 799;
    property OnCalculate[lcid: Integer]: WideString dispid 625;
    property OnData[lcid: Integer]: WideString dispid 629;
    property OnEntry[lcid: Integer]: WideString dispid 627;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; dispid 826;
    property Outline: Outline readonly dispid 102;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; dispid 801;
    procedure Paste(Destination, Link: OleVariant; lcid: Integer); dispid 211;
    procedure PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel: OleVariant; lcid: Integer); dispid 1027;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; dispid 771;
    function PivotTables(Index: OleVariant; lcid: Integer): IDispatch; dispid 690;
    function PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection: OleVariant; lcid: Integer): PivotTable; dispid 684;
    property Range[Cell1, Cell2: OleVariant]: Range readonly dispid 197;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; dispid 774;
    property Rows: Range readonly dispid 258;
    function Scenarios(Index: OleVariant; lcid: Integer): IDispatch; dispid 908;
    property ScrollArea: WideString dispid 1433;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; dispid 830;
    procedure ShowAllData(lcid: Integer); dispid 794;
    procedure ShowDataForm(lcid: Integer); dispid 409;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; dispid 838;
    property StandardHeight[lcid: Integer]: Double readonly dispid 407;
    property StandardWidth[lcid: Integer]: Double dispid 408;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 777;
    property TransitionFormEntry[lcid: Integer]: WordBool dispid 402;
    property Type_[lcid: Integer]: XlSheetType readonly dispid 108;
    property UsedRange[lcid: Integer]: Range readonly dispid 412;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property QueryTables: QueryTables readonly dispid 1434;
    property DisplayPageBreaks: WordBool dispid 1435;
    property Comments: Comments readonly dispid 575;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
    procedure ClearCircles; dispid 1436;
    procedure CircleInvalid; dispid 1437;
    property DisplayRightToLeft[lcid: Integer]: Integer dispid 648;
    property AutoFilter: AutoFilter readonly dispid 793;
  end;

  IStyle = interface(IDispatch)
    ['{00020852-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_BuiltIn(out Retval: WordBool): HResult; stdcall;
    function Get_Borders(out Retval: Borders): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_FormulaHidden(out Retval: WordBool): HResult; stdcall;
    function Set_FormulaHidden(Value: WordBool): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: XlHAlign): HResult; stdcall;
    function Set_HorizontalAlignment(Value: XlHAlign): HResult; stdcall;
    function Get_IncludeAlignment(out Retval: WordBool): HResult; stdcall;
    function Set_IncludeAlignment(Value: WordBool): HResult; stdcall;
    function Get_IncludeBorder(out Retval: WordBool): HResult; stdcall;
    function Set_IncludeBorder(Value: WordBool): HResult; stdcall;
    function Get_IncludeFont(out Retval: WordBool): HResult; stdcall;
    function Set_IncludeFont(Value: WordBool): HResult; stdcall;
    function Get_IncludeNumber(out Retval: WordBool): HResult; stdcall;
    function Set_IncludeNumber(Value: WordBool): HResult; stdcall;
    function Get_IncludePatterns(out Retval: WordBool): HResult; stdcall;
    function Set_IncludePatterns(Value: WordBool): HResult; stdcall;
    function Get_IncludeProtection(out Retval: WordBool): HResult; stdcall;
    function Set_IncludeProtection(Value: WordBool): HResult; stdcall;
    function Get_IndentLevel(out Retval: Integer): HResult; stdcall;
    function Set_IndentLevel(Value: Integer): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_MergeCells(out Retval: OleVariant): HResult; stdcall;
    function Set_MergeCells(Value: OleVariant): HResult; stdcall;
    function Get_Name(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Get_NameLocal(out Retval: WideString): HResult; stdcall;
    function Get_NumberFormat(out Retval: WideString): HResult; stdcall;
    function Set_NumberFormat(const Value: WideString): HResult; stdcall;
    function Get_NumberFormatLocal(out Retval: WideString): HResult; stdcall;
    function Set_NumberFormatLocal(const Value: WideString): HResult; stdcall;
    function Get_Orientation(out Retval: XlOrientation): HResult; stdcall;
    function Set_Orientation(Value: XlOrientation): HResult; stdcall;
    function Get_ShrinkToFit(out Retval: WordBool): HResult; stdcall;
    function Set_ShrinkToFit(Value: WordBool): HResult; stdcall;
    function Get_Value(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: XlVAlign): HResult; stdcall;
    function Set_VerticalAlignment(Value: XlVAlign): HResult; stdcall;
    function Get_WrapText(out Retval: WordBool): HResult; stdcall;
    function Set_WrapText(Value: WordBool): HResult; stdcall;
    function Get__Default(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
  end;

  IStyles = interface(IDispatch)
    ['{00020853-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(const Name: WideString; BasedOn: OleVariant; out Retval: Style): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: OleVariant; lcid: Integer; out Retval: Style): HResult; stdcall;
    function Merge(Workbook: OleVariant): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get__Default(Index: OleVariant; lcid: Integer; out Retval: Style): HResult; stdcall;
  end;

  IBorders = interface(IDispatch)
    ['{00020855-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Color(out Retval: OleVariant): HResult; stdcall;
    function Set_Color(Value: OleVariant): HResult; stdcall;
    function Get_ColorIndex(out Retval: OleVariant): HResult; stdcall;
    function Set_ColorIndex(Value: OleVariant): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: XlBordersIndex; out Retval: Border): HResult; stdcall;
    function Get_LineStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_LineStyle(Value: OleVariant): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get_Value(out Retval: OleVariant): HResult; stdcall;
    function Set_Value(Value: OleVariant): HResult; stdcall;
    function Get_Weight(out Retval: OleVariant): HResult; stdcall;
    function Set_Weight(Value: OleVariant): HResult; stdcall;
    function Get__Default(Index: XlBordersIndex; out Retval: Border): HResult; stdcall;
  end;

  _Global = interface(IDispatch)
    ['{000208D9-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: Application; safecall;
    function Get_ActiveCell: Range; safecall;
    function Get_ActiveChart: Chart; safecall;
    function Get_ActiveDialog: DialogSheet; safecall;
    function Get_ActiveMenuBar: MenuBar; safecall;
    function Get_ActivePrinter(lcid: Integer): WideString; safecall;
    procedure Set_ActivePrinter(lcid: Integer; const Value: WideString); safecall;
    function Get_ActiveSheet: IDispatch; safecall;
    function Get_ActiveWindow: Window; safecall;
    function Get_ActiveWorkbook: Workbook; safecall;
    function Get_AddIns: AddIns; safecall;
    function Get_Assistant: Assistant; safecall;
    procedure Calculate(lcid: Integer); safecall;
    function Get_Cells: Range; safecall;
    function Get_Charts: Sheets; safecall;
    function Get_Columns: Range; safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_DDEAppReturnCode(lcid: Integer): Integer; safecall;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); safecall;
    function DDEInitiate(const App, Topic: WideString; lcid: Integer): Integer; safecall;
    procedure DDEPoke(Channel: Integer; Item, Data: OleVariant; lcid: Integer); safecall;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; safecall;
    procedure DDETerminate(Channel, lcid: Integer); safecall;
    function Get_DialogSheets: Sheets; safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; safecall;
    function Intersect(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_MenuBars: MenuBars; safecall;
    function Get_Modules: Modules; safecall;
    function Get_Names: Names; safecall;
    function Get_Range(Cell1, Cell2: OleVariant): Range; safecall;
    function Get_Rows: Range; safecall;
    function Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; safecall;
    function _Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Selection(lcid: Integer): IDispatch; safecall;
    procedure SendKeys(Keys, Wait: OleVariant; lcid: Integer); safecall;
    function Get_Sheets: Sheets; safecall;
    function Get_ShortcutMenus(Index: Integer): Menu; safecall;
    function Get_ThisWorkbook(lcid: Integer): Workbook; safecall;
    function Get_Toolbars: Toolbars; safecall;
    function Union(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_Windows: Windows; safecall;
    function Get_Workbooks: Workbooks; safecall;
    function Get_WorksheetFunction: WorksheetFunction; safecall;
    function Get_Worksheets: Sheets; safecall;
    function Get_Excel4IntlMacroSheets: Sheets; safecall;
    function Get_Excel4MacroSheets: Sheets; safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: Application read Get_Parent;
    property ActiveCell: Range read Get_ActiveCell;
    property ActiveChart: Chart read Get_ActiveChart;
    property ActiveDialog: DialogSheet read Get_ActiveDialog;
    property ActiveMenuBar: MenuBar read Get_ActiveMenuBar;
    property ActivePrinter[lcid: Integer]: WideString read Get_ActivePrinter write Set_ActivePrinter;
    property ActiveSheet: IDispatch read Get_ActiveSheet;
    property ActiveWindow: Window read Get_ActiveWindow;
    property ActiveWorkbook: Workbook read Get_ActiveWorkbook;
    property AddIns: AddIns read Get_AddIns;
    property Assistant: Assistant read Get_Assistant;
    property Cells: Range read Get_Cells;
    property Charts: Sheets read Get_Charts;
    property Columns: Range read Get_Columns;
    property CommandBars: CommandBars read Get_CommandBars;
    property DDEAppReturnCode[lcid: Integer]: Integer read Get_DDEAppReturnCode;
    property DialogSheets: Sheets read Get_DialogSheets;
    property MenuBars: MenuBars read Get_MenuBars;
    property Modules: Modules read Get_Modules;
    property Names: Names read Get_Names;
    property Range[Cell1, Cell2: OleVariant]: Range read Get_Range;
    property Rows: Range read Get_Rows;
    property Selection[lcid: Integer]: IDispatch read Get_Selection;
    property Sheets: Sheets read Get_Sheets;
    property ShortcutMenus[Index: Integer]: Menu read Get_ShortcutMenus;
    property ThisWorkbook[lcid: Integer]: Workbook read Get_ThisWorkbook;
    property Toolbars: Toolbars read Get_Toolbars;
    property Windows: Windows read Get_Windows;
    property Workbooks: Workbooks read Get_Workbooks;
    property WorksheetFunction: WorksheetFunction read Get_WorksheetFunction;
    property Worksheets: Sheets read Get_Worksheets;
    property Excel4IntlMacroSheets: Sheets read Get_Excel4IntlMacroSheets;
    property Excel4MacroSheets: Sheets read Get_Excel4MacroSheets;
  end;

{ DispInterface declaration for Dual Interface _Global }

  _GlobalDisp = dispinterface
    ['{000208D9-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Application readonly dispid 150;
    property ActiveCell: Range readonly dispid 305;
    property ActiveChart: Chart readonly dispid 183;
    property ActiveDialog: DialogSheet readonly dispid 815;
    property ActiveMenuBar: MenuBar readonly dispid 758;
    property ActivePrinter[lcid: Integer]: WideString dispid 306;
    property ActiveSheet: IDispatch readonly dispid 307;
    property ActiveWindow: Window readonly dispid 759;
    property ActiveWorkbook: Workbook readonly dispid 308;
    property AddIns: AddIns readonly dispid 549;
    property Assistant: Assistant readonly dispid 1438;
    procedure Calculate(lcid: Integer); dispid 279;
    property Cells: Range readonly dispid 238;
    property Charts: Sheets readonly dispid 121;
    property Columns: Range readonly dispid 241;
    property CommandBars: CommandBars readonly dispid 1439;
    property DDEAppReturnCode[lcid: Integer]: Integer readonly dispid 332;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); dispid 333;
    function DDEInitiate(const App, Topic: WideString; lcid: Integer): Integer; dispid 334;
    procedure DDEPoke(Channel: Integer; Item, Data: OleVariant; lcid: Integer); dispid 335;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; dispid 336;
    procedure DDETerminate(Channel, lcid: Integer); dispid 337;
    property DialogSheets: Sheets readonly dispid 764;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; dispid 350;
    function Intersect(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; dispid 766;
    property MenuBars: MenuBars readonly dispid 589;
    property Modules: Modules readonly dispid 582;
    property Names: Names readonly dispid 442;
    property Range[Cell1, Cell2: OleVariant]: Range readonly dispid 197;
    property Rows: Range readonly dispid 258;
    function Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; dispid 259;
    function _Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): OleVariant; dispid 806;
    property Selection[lcid: Integer]: IDispatch readonly dispid 147;
    procedure SendKeys(Keys, Wait: OleVariant; lcid: Integer); dispid 383;
    property Sheets: Sheets readonly dispid 485;
    property ShortcutMenus[Index: Integer]: Menu readonly dispid 776;
    property ThisWorkbook[lcid: Integer]: Workbook readonly dispid 778;
    property Toolbars: Toolbars readonly dispid 552;
    function Union(const Arg1, Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; lcid: Integer): Range; dispid 779;
    property Windows: Windows readonly dispid 430;
    property Workbooks: Workbooks readonly dispid 572;
    property WorksheetFunction: WorksheetFunction readonly dispid 1440;
    property Worksheets: Sheets readonly dispid 494;
    property Excel4IntlMacroSheets: Sheets readonly dispid 581;
    property Excel4MacroSheets: Sheets readonly dispid 579;
  end;

  IAddIn = interface(IDispatch)
    ['{00020857-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Author(out Retval: WideString): HResult; stdcall;
    function Get_Comments(out Retval: WideString): HResult; stdcall;
    function Get_FullName(out Retval: WideString): HResult; stdcall;
    function Get_Installed(out Retval: WordBool): HResult; stdcall;
    function Set_Installed(Value: WordBool): HResult; stdcall;
    function Get_Keywords(out Retval: WideString): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Get_Path(out Retval: WideString): HResult; stdcall;
    function Get_Subject(out Retval: WideString): HResult; stdcall;
    function Get_Title(out Retval: WideString): HResult; stdcall;
  end;

  IAddIns = interface(IDispatch)
    ['{00020858-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(const Filename: WideString; CopyFile: OleVariant; out Retval: AddIn): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: AddIn): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: AddIn): HResult; stdcall;
  end;

  IToolbar = interface(IDispatch)
    ['{0002085C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BuiltIn(out Retval: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Height(out Retval: Integer): HResult; stdcall;
    function Set_Height(Value: Integer): HResult; stdcall;
    function Get_Left(out Retval: Integer): HResult; stdcall;
    function Set_Left(Value: Integer): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Get_Position(out Retval: Integer): HResult; stdcall;
    function Set_Position(Value: Integer): HResult; stdcall;
    function Get_Protection(out Retval: XlToolbarProtection): HResult; stdcall;
    function Set_Protection(Value: XlToolbarProtection): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Get_ToolbarButtons(out Retval: ToolbarButtons): HResult; stdcall;
    function Get_Top(out Retval: Integer): HResult; stdcall;
    function Set_Top(Value: Integer): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Integer): HResult; stdcall;
    function Set_Width(Value: Integer): HResult; stdcall;
  end;

  IToolbars = interface(IDispatch)
    ['{0002085D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Name: OleVariant; out Retval: Toolbar): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: Toolbar): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: Toolbar): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IToolbarButton = interface(IDispatch)
    ['{0002085E-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BuiltIn(out Retval: WordBool): HResult; stdcall;
    function Get_BuiltInFace(out Retval: WordBool): HResult; stdcall;
    function Set_BuiltInFace(Value: WordBool): HResult; stdcall;
    function Copy(const Toolbar: Toolbar; Before: Integer): HResult; stdcall;
    function CopyFace: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Edit: HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_HelpContextID(out Retval: Integer): HResult; stdcall;
    function Set_HelpContextID(Value: Integer): HResult; stdcall;
    function Get_HelpFile(out Retval: WideString): HResult; stdcall;
    function Set_HelpFile(const Value: WideString): HResult; stdcall;
    function Get_Id(out Retval: Integer): HResult; stdcall;
    function Get_IsGap(out Retval: WordBool): HResult; stdcall;
    function Move(const Toolbar: Toolbar; Before: Integer): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function PasteFace: HResult; stdcall;
    function Get_Pushed(out Retval: WordBool): HResult; stdcall;
    function Set_Pushed(Value: WordBool): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Get_StatusBar(out Retval: WideString): HResult; stdcall;
    function Set_StatusBar(const Value: WideString): HResult; stdcall;
    function Get_Width(out Retval: Integer): HResult; stdcall;
    function Set_Width(Value: Integer): HResult; stdcall;
  end;

  IToolbarButtons = interface(IDispatch)
    ['{0002085F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Button, Before, OnAction, Pushed, Enabled, StatusBar, HelpFile, HelpContextID: OleVariant; out Retval: ToolbarButton): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: ToolbarButton): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: ToolbarButton): HResult; stdcall;
  end;

  IAreas = interface(IDispatch)
    ['{00020860-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: Range): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: Range): HResult; stdcall;
  end;

  IWorkbookEvents = interface(IDispatch)
    ['{00024412-0001-0000-C000-000000000046}']
    function Open: HResult; stdcall;
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function BeforeClose(var Cancel: WordBool): HResult; stdcall;
    function BeforeSave(SaveAsUI: WordBool; var Cancel: WordBool): HResult; stdcall;
    function BeforePrint(var Cancel: WordBool): HResult; stdcall;
    function NewSheet(Sh: IDispatch): HResult; stdcall;
    function AddinInstall: HResult; stdcall;
    function AddinUninstall: HResult; stdcall;
    function WindowResize(const Wn: Window): HResult; stdcall;
    function WindowActivate(const Wn: Window): HResult; stdcall;
    function WindowDeactivate(const Wn: Window): HResult; stdcall;
    function SheetSelectionChange(Sh: IDispatch; const Target: Range): HResult; stdcall;
    function SheetBeforeDoubleClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetBeforeRightClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetActivate(Sh: IDispatch): HResult; stdcall;
    function SheetDeactivate(Sh: IDispatch): HResult; stdcall;
    function SheetCalculate(Sh: IDispatch): HResult; stdcall;
    function SheetChange(Sh: IDispatch; const Target: Range): HResult; stdcall;
  end;

  _Workbook = interface(IDispatch)
    ['{000208DA-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_AcceptLabelsInFormulas: WordBool; safecall;
    procedure Set_AcceptLabelsInFormulas(Value: WordBool); safecall;
    procedure Activate(lcid: Integer); safecall;
    function Get_ActiveChart: Chart; safecall;
    function Get_ActiveSheet: IDispatch; safecall;
    function Get_Author(lcid: Integer): WideString; safecall;
    procedure Set_Author(lcid: Integer; const Value: WideString); safecall;
    function Get_AutoUpdateFrequency: Integer; safecall;
    procedure Set_AutoUpdateFrequency(Value: Integer); safecall;
    function Get_AutoUpdateSaveChanges: WordBool; safecall;
    procedure Set_AutoUpdateSaveChanges(Value: WordBool); safecall;
    function Get_ChangeHistoryDuration: Integer; safecall;
    procedure Set_ChangeHistoryDuration(Value: Integer); safecall;
    function Get_BuiltinDocumentProperties: IDispatch; safecall;
    procedure ChangeFileAccess(Mode: XlFileAccess; WritePassword, Notify: OleVariant; lcid: Integer); safecall;
    procedure ChangeLink(const Name, NewName: WideString; Type_: XlLinkType; lcid: Integer); safecall;
    function Get_Charts: Sheets; safecall;
    procedure Close(SaveChanges, Filename, RouteWorkbook: OleVariant; lcid: Integer); safecall;
    function Get_CodeName: WideString; safecall;
    function Get__CodeName: WideString; safecall;
    procedure Set__CodeName(const Value: WideString); safecall;
    function Get_Colors(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    procedure Set_Colors(Index: OleVariant; lcid: Integer; Value: OleVariant); safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_Comments(lcid: Integer): WideString; safecall;
    procedure Set_Comments(lcid: Integer; const Value: WideString); safecall;
    function Get_ConflictResolution: Integer; safecall;
    procedure Set_ConflictResolution(Value: Integer); safecall;
    function Get_Container: IDispatch; safecall;
    function Get_CreateBackup(lcid: Integer): WordBool; safecall;
    function Get_CustomDocumentProperties: IDispatch; safecall;
    function Get_Date1904(lcid: Integer): WordBool; safecall;
    procedure Set_Date1904(lcid: Integer; Value: WordBool); safecall;
    procedure DeleteNumberFormat(const NumberFormat: WideString; lcid: Integer); safecall;
    function Get_DialogSheets: Sheets; safecall;
    function Get_DisplayDrawingObjects(lcid: Integer): XlDisplayShapes; safecall;
    procedure Set_DisplayDrawingObjects(lcid: Integer; Value: XlDisplayShapes); safecall;
    function ExclusiveAccess(lcid: Integer): WordBool; safecall;
    function Get_FileFormat(lcid: Integer): XlFileFormat; safecall;
    procedure ForwardMailer(lcid: Integer); safecall;
    function Get_FullName(lcid: Integer): WideString; safecall;
    function Get_HasMailer(lcid: Integer): WordBool; safecall;
    procedure Set_HasMailer(lcid: Integer; Value: WordBool); safecall;
    function Get_HasPassword(lcid: Integer): WordBool; safecall;
    function Get_HasRoutingSlip(lcid: Integer): WordBool; safecall;
    procedure Set_HasRoutingSlip(lcid: Integer; Value: WordBool); safecall;
    function Get_IsAddin: WordBool; safecall;
    procedure Set_IsAddin(Value: WordBool); safecall;
    function Get_Keywords(lcid: Integer): WideString; safecall;
    procedure Set_Keywords(lcid: Integer; const Value: WideString); safecall;
    function LinkInfo(const Name: WideString; LinkInfo: XlLinkInfo; Type_, EditionRef: OleVariant; lcid: Integer): OleVariant; safecall;
    function LinkSources(Type_: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Mailer: Mailer; safecall;
    procedure MergeWorkbook(Filename: OleVariant); safecall;
    function Get_Modules: Sheets; safecall;
    function Get_MultiUserEditing(lcid: Integer): WordBool; safecall;
    function Get_Name: WideString; safecall;
    function Get_Names: Names; safecall;
    function NewWindow(lcid: Integer): Window; safecall;
    function Get_OnSave(lcid: Integer): WideString; safecall;
    procedure Set_OnSave(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const Value: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const Value: WideString); safecall;
    procedure OpenLinks(const Name: WideString; ReadOnly, Type_: OleVariant; lcid: Integer); safecall;
    function Get_Path(lcid: Integer): WideString; safecall;
    function Get_PersonalViewListSettings: WordBool; safecall;
    procedure Set_PersonalViewListSettings(Value: WordBool); safecall;
    function Get_PersonalViewPrintSettings: WordBool; safecall;
    procedure Set_PersonalViewPrintSettings(Value: WordBool); safecall;
    function PivotCaches: PivotCaches; safecall;
    procedure Post(DestName: OleVariant; lcid: Integer); safecall;
    function Get_PrecisionAsDisplayed(lcid: Integer): WordBool; safecall;
    procedure Set_PrecisionAsDisplayed(lcid: Integer; Value: WordBool); safecall;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Protect(Password, Structure, Windows: OleVariant); safecall;
    procedure ProtectSharing(Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword: OleVariant); safecall;
    function Get_ProtectStructure: WordBool; safecall;
    function Get_ProtectWindows: WordBool; safecall;
    function Get_ReadOnly(lcid: Integer): WordBool; safecall;
    function Get_ReadOnlyRecommended(lcid: Integer): WordBool; safecall;
    procedure RefreshAll; safecall;
    procedure Reply(lcid: Integer); safecall;
    procedure ReplyAll(lcid: Integer); safecall;
    procedure RemoveUser(Index: Integer); safecall;
    function Get_RevisionNumber(lcid: Integer): Integer; safecall;
    procedure Route(lcid: Integer); safecall;
    function Get_Routed(lcid: Integer): WordBool; safecall;
    function Get_RoutingSlip: RoutingSlip; safecall;
    procedure RunAutoMacros(Which: XlRunAutoMacro; lcid: Integer); safecall;
    procedure Save(lcid: Integer); safecall;
    procedure SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup: OleVariant; AccessMode: XlSaveAsAccessMode; ConflictResolution, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer); safecall;
    procedure SaveCopyAs(Filename: OleVariant; lcid: Integer); safecall;
    function Get_Saved(lcid: Integer): WordBool; safecall;
    procedure Set_Saved(lcid: Integer; Value: WordBool); safecall;
    function Get_SaveLinkValues(lcid: Integer): WordBool; safecall;
    procedure Set_SaveLinkValues(lcid: Integer; Value: WordBool); safecall;
    procedure SendMail(Recipients, Subject, ReturnReceipt: OleVariant; lcid: Integer); safecall;
    procedure SendMailer(FileFormat: OleVariant; Priority: XlPriority; lcid: Integer); safecall;
    procedure SetLinkOnData(const Name: WideString; Procedure_: OleVariant; lcid: Integer); safecall;
    function Get_Sheets: Sheets; safecall;
    function Get_ShowConflictHistory(lcid: Integer): WordBool; safecall;
    procedure Set_ShowConflictHistory(lcid: Integer; Value: WordBool); safecall;
    function Get_Styles: Styles; safecall;
    function Get_Subject(lcid: Integer): WideString; safecall;
    procedure Set_Subject(lcid: Integer; const Value: WideString); safecall;
    function Get_Title(lcid: Integer): WideString; safecall;
    procedure Set_Title(lcid: Integer; const Value: WideString); safecall;
    procedure Unprotect(Password: OleVariant; lcid: Integer); safecall;
    procedure UnprotectSharing(SharingPassword: OleVariant); safecall;
    procedure UpdateFromFile(lcid: Integer); safecall;
    procedure UpdateLink(Name, Type_: OleVariant; lcid: Integer); safecall;
    function Get_UpdateRemoteReferences(lcid: Integer): WordBool; safecall;
    procedure Set_UpdateRemoteReferences(lcid: Integer; Value: WordBool); safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(Value: WordBool); safecall;
    function Get_UserStatus(lcid: Integer): OleVariant; safecall;
    function Get_CustomViews: CustomViews; safecall;
    function Get_Windows: Windows; safecall;
    function Get_Worksheets: Sheets; safecall;
    function Get_WriteReserved(lcid: Integer): WordBool; safecall;
    function Get_WriteReservedBy(lcid: Integer): WideString; safecall;
    function Get_Excel4IntlMacroSheets: Sheets; safecall;
    function Get_Excel4MacroSheets: Sheets; safecall;
    function Get_TemplateRemoveExtData: WordBool; safecall;
    procedure Set_TemplateRemoveExtData(Value: WordBool); safecall;
    procedure HighlightChangesOptions(When, Who, Where: OleVariant); safecall;
    function Get_HighlightChangesOnScreen: WordBool; safecall;
    procedure Set_HighlightChangesOnScreen(Value: WordBool); safecall;
    function Get_KeepChangeHistory: WordBool; safecall;
    procedure Set_KeepChangeHistory(Value: WordBool); safecall;
    function Get_ListChangesOnNewSheet: WordBool; safecall;
    procedure Set_ListChangesOnNewSheet(Value: WordBool); safecall;
    procedure PurgeChangeHistoryNow(Days: Integer; SharingPassword: OleVariant); safecall;
    procedure AcceptAllChanges(When, Who, Where: OleVariant); safecall;
    procedure RejectAllChanges(When, Who, Where: OleVariant); safecall;
    procedure PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection: OleVariant; lcid: Integer); safecall;
    procedure ResetColors; safecall;
    function Get_VBProject: VBProject; safecall;
    procedure FollowHyperlink(const Address: WideString; SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo: OleVariant); safecall;
    procedure AddToFavorites; safecall;
    function Get_IsInplace: WordBool; safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property AcceptLabelsInFormulas: WordBool read Get_AcceptLabelsInFormulas write Set_AcceptLabelsInFormulas;
    property ActiveChart: Chart read Get_ActiveChart;
    property ActiveSheet: IDispatch read Get_ActiveSheet;
    property Author[lcid: Integer]: WideString read Get_Author write Set_Author;
    property AutoUpdateFrequency: Integer read Get_AutoUpdateFrequency write Set_AutoUpdateFrequency;
    property AutoUpdateSaveChanges: WordBool read Get_AutoUpdateSaveChanges write Set_AutoUpdateSaveChanges;
    property ChangeHistoryDuration: Integer read Get_ChangeHistoryDuration write Set_ChangeHistoryDuration;
    property BuiltinDocumentProperties: IDispatch read Get_BuiltinDocumentProperties;
    property Charts: Sheets read Get_Charts;
    property CodeName: WideString read Get_CodeName;
    property _CodeName: WideString read Get__CodeName write Set__CodeName;
    property Colors[Index: OleVariant; lcid: Integer]: OleVariant read Get_Colors write Set_Colors;
    property CommandBars: CommandBars read Get_CommandBars;
    property Comments[lcid: Integer]: WideString read Get_Comments write Set_Comments;
    property ConflictResolution: Integer read Get_ConflictResolution write Set_ConflictResolution;
    property Container: IDispatch read Get_Container;
    property CreateBackup[lcid: Integer]: WordBool read Get_CreateBackup;
    property CustomDocumentProperties: IDispatch read Get_CustomDocumentProperties;
    property Date1904[lcid: Integer]: WordBool read Get_Date1904 write Set_Date1904;
    property DialogSheets: Sheets read Get_DialogSheets;
    property DisplayDrawingObjects[lcid: Integer]: XlDisplayShapes read Get_DisplayDrawingObjects write Set_DisplayDrawingObjects;
    property FileFormat[lcid: Integer]: XlFileFormat read Get_FileFormat;
    property FullName[lcid: Integer]: WideString read Get_FullName;
    property HasMailer[lcid: Integer]: WordBool read Get_HasMailer write Set_HasMailer;
    property HasPassword[lcid: Integer]: WordBool read Get_HasPassword;
    property HasRoutingSlip[lcid: Integer]: WordBool read Get_HasRoutingSlip write Set_HasRoutingSlip;
    property IsAddin: WordBool read Get_IsAddin write Set_IsAddin;
    property Keywords[lcid: Integer]: WideString read Get_Keywords write Set_Keywords;
    property Mailer: Mailer read Get_Mailer;
    property Modules: Sheets read Get_Modules;
    property MultiUserEditing[lcid: Integer]: WordBool read Get_MultiUserEditing;
    property Name: WideString read Get_Name;
    property Names: Names read Get_Names;
    property OnSave[lcid: Integer]: WideString read Get_OnSave write Set_OnSave;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property Path[lcid: Integer]: WideString read Get_Path;
    property PersonalViewListSettings: WordBool read Get_PersonalViewListSettings write Set_PersonalViewListSettings;
    property PersonalViewPrintSettings: WordBool read Get_PersonalViewPrintSettings write Set_PersonalViewPrintSettings;
    property PrecisionAsDisplayed[lcid: Integer]: WordBool read Get_PrecisionAsDisplayed write Set_PrecisionAsDisplayed;
    property ProtectStructure: WordBool read Get_ProtectStructure;
    property ProtectWindows: WordBool read Get_ProtectWindows;
    property ReadOnly[lcid: Integer]: WordBool read Get_ReadOnly;
    property ReadOnlyRecommended[lcid: Integer]: WordBool read Get_ReadOnlyRecommended;
    property RevisionNumber[lcid: Integer]: Integer read Get_RevisionNumber;
    property Routed[lcid: Integer]: WordBool read Get_Routed;
    property RoutingSlip: RoutingSlip read Get_RoutingSlip;
    property Saved[lcid: Integer]: WordBool read Get_Saved write Set_Saved;
    property SaveLinkValues[lcid: Integer]: WordBool read Get_SaveLinkValues write Set_SaveLinkValues;
    property Sheets: Sheets read Get_Sheets;
    property ShowConflictHistory[lcid: Integer]: WordBool read Get_ShowConflictHistory write Set_ShowConflictHistory;
    property Styles: Styles read Get_Styles;
    property Subject[lcid: Integer]: WideString read Get_Subject write Set_Subject;
    property Title[lcid: Integer]: WideString read Get_Title write Set_Title;
    property UpdateRemoteReferences[lcid: Integer]: WordBool read Get_UpdateRemoteReferences write Set_UpdateRemoteReferences;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property UserStatus[lcid: Integer]: OleVariant read Get_UserStatus;
    property CustomViews: CustomViews read Get_CustomViews;
    property Windows: Windows read Get_Windows;
    property Worksheets: Sheets read Get_Worksheets;
    property WriteReserved[lcid: Integer]: WordBool read Get_WriteReserved;
    property WriteReservedBy[lcid: Integer]: WideString read Get_WriteReservedBy;
    property Excel4IntlMacroSheets: Sheets read Get_Excel4IntlMacroSheets;
    property Excel4MacroSheets: Sheets read Get_Excel4MacroSheets;
    property TemplateRemoveExtData: WordBool read Get_TemplateRemoveExtData write Set_TemplateRemoveExtData;
    property HighlightChangesOnScreen: WordBool read Get_HighlightChangesOnScreen write Set_HighlightChangesOnScreen;
    property KeepChangeHistory: WordBool read Get_KeepChangeHistory write Set_KeepChangeHistory;
    property ListChangesOnNewSheet: WordBool read Get_ListChangesOnNewSheet write Set_ListChangesOnNewSheet;
    property VBProject: VBProject read Get_VBProject;
    property IsInplace: WordBool read Get_IsInplace;
  end;

{ DispInterface declaration for Dual Interface _Workbook }

  _WorkbookDisp = dispinterface
    ['{000208DA-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AcceptLabelsInFormulas: WordBool dispid 1441;
    procedure Activate(lcid: Integer); dispid 304;
    property ActiveChart: Chart readonly dispid 183;
    property ActiveSheet: IDispatch readonly dispid 307;
    property Author[lcid: Integer]: WideString dispid 574;
    property AutoUpdateFrequency: Integer dispid 1442;
    property AutoUpdateSaveChanges: WordBool dispid 1443;
    property ChangeHistoryDuration: Integer dispid 1444;
    property BuiltinDocumentProperties: IDispatch readonly dispid 1176;
    procedure ChangeFileAccess(Mode: XlFileAccess; WritePassword, Notify: OleVariant; lcid: Integer); dispid 989;
    procedure ChangeLink(const Name, NewName: WideString; Type_: XlLinkType; lcid: Integer); dispid 802;
    property Charts: Sheets readonly dispid 121;
    procedure Close(SaveChanges, Filename, RouteWorkbook: OleVariant; lcid: Integer); dispid 277;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Colors[Index: OleVariant; lcid: Integer]: OleVariant dispid 286;
    property CommandBars: CommandBars readonly dispid 1439;
    property Comments[lcid: Integer]: WideString dispid 575;
    property ConflictResolution: Integer dispid 1175;
    property Container: IDispatch readonly dispid 1190;
    property CreateBackup[lcid: Integer]: WordBool readonly dispid 287;
    property CustomDocumentProperties: IDispatch readonly dispid 1177;
    property Date1904[lcid: Integer]: WordBool dispid 403;
    procedure DeleteNumberFormat(const NumberFormat: WideString; lcid: Integer); dispid 397;
    property DialogSheets: Sheets readonly dispid 764;
    property DisplayDrawingObjects[lcid: Integer]: XlDisplayShapes dispid 404;
    function ExclusiveAccess(lcid: Integer): WordBool; dispid 1168;
    property FileFormat[lcid: Integer]: XlFileFormat readonly dispid 288;
    procedure ForwardMailer(lcid: Integer); dispid 973;
    property FullName[lcid: Integer]: WideString readonly dispid 289;
    property HasMailer[lcid: Integer]: WordBool dispid 976;
    property HasPassword[lcid: Integer]: WordBool readonly dispid 290;
    property HasRoutingSlip[lcid: Integer]: WordBool dispid 950;
    property IsAddin: WordBool dispid 1445;
    property Keywords[lcid: Integer]: WideString dispid 577;
    function LinkInfo(const Name: WideString; LinkInfo: XlLinkInfo; Type_, EditionRef: OleVariant; lcid: Integer): OleVariant; dispid 807;
    function LinkSources(Type_: OleVariant; lcid: Integer): OleVariant; dispid 808;
    property Mailer: Mailer readonly dispid 979;
    procedure MergeWorkbook(Filename: OleVariant); dispid 1446;
    property Modules: Sheets readonly dispid 582;
    property MultiUserEditing[lcid: Integer]: WordBool readonly dispid 1169;
    property Name: WideString readonly dispid 110;
    property Names: Names readonly dispid 442;
    function NewWindow(lcid: Integer): Window; dispid 280;
    property OnSave[lcid: Integer]: WideString dispid 1178;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    procedure OpenLinks(const Name: WideString; ReadOnly, Type_: OleVariant; lcid: Integer); dispid 803;
    property Path[lcid: Integer]: WideString readonly dispid 291;
    property PersonalViewListSettings: WordBool dispid 1447;
    property PersonalViewPrintSettings: WordBool dispid 1448;
    function PivotCaches: PivotCaches; dispid 1449;
    procedure Post(DestName: OleVariant; lcid: Integer); dispid 1166;
    property PrecisionAsDisplayed[lcid: Integer]: WordBool dispid 405;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Protect(Password, Structure, Windows: OleVariant); dispid 282;
    procedure ProtectSharing(Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword: OleVariant); dispid 1450;
    property ProtectStructure: WordBool readonly dispid 588;
    property ProtectWindows: WordBool readonly dispid 295;
    property ReadOnly[lcid: Integer]: WordBool readonly dispid 296;
    property ReadOnlyRecommended[lcid: Integer]: WordBool readonly dispid 297;
    procedure RefreshAll; dispid 1452;
    procedure Reply(lcid: Integer); dispid 977;
    procedure ReplyAll(lcid: Integer); dispid 978;
    procedure RemoveUser(Index: Integer); dispid 1453;
    property RevisionNumber[lcid: Integer]: Integer readonly dispid 1172;
    procedure Route(lcid: Integer); dispid 946;
    property Routed[lcid: Integer]: WordBool readonly dispid 951;
    property RoutingSlip: RoutingSlip readonly dispid 949;
    procedure RunAutoMacros(Which: XlRunAutoMacro; lcid: Integer); dispid 634;
    procedure Save(lcid: Integer); dispid 283;
    procedure SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup: OleVariant; AccessMode: XlSaveAsAccessMode; ConflictResolution, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer); dispid 284;
    procedure SaveCopyAs(Filename: OleVariant; lcid: Integer); dispid 175;
    property Saved[lcid: Integer]: WordBool dispid 298;
    property SaveLinkValues[lcid: Integer]: WordBool dispid 406;
    procedure SendMail(Recipients, Subject, ReturnReceipt: OleVariant; lcid: Integer); dispid 947;
    procedure SendMailer(FileFormat: OleVariant; Priority: XlPriority; lcid: Integer); dispid 980;
    procedure SetLinkOnData(const Name: WideString; Procedure_: OleVariant; lcid: Integer); dispid 809;
    property Sheets: Sheets readonly dispid 485;
    property ShowConflictHistory[lcid: Integer]: WordBool dispid 1171;
    property Styles: Styles readonly dispid 493;
    property Subject[lcid: Integer]: WideString dispid 953;
    property Title[lcid: Integer]: WideString dispid 199;
    procedure Unprotect(Password: OleVariant; lcid: Integer); dispid 285;
    procedure UnprotectSharing(SharingPassword: OleVariant); dispid 1455;
    procedure UpdateFromFile(lcid: Integer); dispid 995;
    procedure UpdateLink(Name, Type_: OleVariant; lcid: Integer); dispid 804;
    property UpdateRemoteReferences[lcid: Integer]: WordBool dispid 411;
    property UserControl: WordBool dispid 1210;
    property UserStatus[lcid: Integer]: OleVariant readonly dispid 1173;
    property CustomViews: CustomViews readonly dispid 1456;
    property Windows: Windows readonly dispid 430;
    property Worksheets: Sheets readonly dispid 494;
    property WriteReserved[lcid: Integer]: WordBool readonly dispid 299;
    property WriteReservedBy[lcid: Integer]: WideString readonly dispid 300;
    property Excel4IntlMacroSheets: Sheets readonly dispid 581;
    property Excel4MacroSheets: Sheets readonly dispid 579;
    property TemplateRemoveExtData: WordBool dispid 1457;
    procedure HighlightChangesOptions(When, Who, Where: OleVariant); dispid 1458;
    property HighlightChangesOnScreen: WordBool dispid 1461;
    property KeepChangeHistory: WordBool dispid 1462;
    property ListChangesOnNewSheet: WordBool dispid 1463;
    procedure PurgeChangeHistoryNow(Days: Integer; SharingPassword: OleVariant); dispid 1464;
    procedure AcceptAllChanges(When, Who, Where: OleVariant); dispid 1466;
    procedure RejectAllChanges(When, Who, Where: OleVariant); dispid 1467;
    procedure PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection: OleVariant; lcid: Integer); dispid 684;
    procedure ResetColors; dispid 1468;
    property VBProject: VBProject readonly dispid 1469;
    procedure FollowHyperlink(const Address: WideString; SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo: OleVariant); dispid 1470;
    procedure AddToFavorites; dispid 1476;
    property IsInplace: WordBool readonly dispid 1780;
  end;

  Workbooks = interface(IDispatch)
    ['{000208DB-0000-0000-C000-000000000046}']
    function Get_Application: Application; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    function Add(Template: OleVariant; lcid: Integer): Workbook; safecall;
    procedure Close(lcid: Integer); safecall;
    function Get_Count: Integer; safecall;
    function Get_Item(Index: OleVariant): Workbook; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Open(const Filename: WideString; UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru: OleVariant; lcid: Integer): Workbook; safecall;
    procedure OpenText(const Filename: WideString; Origin, StartRow, DataType: OleVariant; TextQualifier: XlTextQualifier; ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout: OleVariant; lcid: Integer); safecall;
    function Get__Default(Index: OleVariant): Workbook; safecall;
    property Application: Application read Get_Application;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property Count: Integer read Get_Count;
    property Item[Index: OleVariant]: Workbook read Get_Item;
    property _NewEnum: IUnknown read Get__NewEnum;
    property _Default[Index: OleVariant]: Workbook read Get__Default; default;
  end;

{ DispInterface declaration for Dual Interface Workbooks }

  WorkbooksDisp = dispinterface
    ['{000208DB-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Template: OleVariant; lcid: Integer): Workbook; dispid 181;
    procedure Close(lcid: Integer); dispid 277;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Workbook readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    function Open(const Filename: WideString; UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru: OleVariant; lcid: Integer): Workbook; dispid 682;
    procedure OpenText(const Filename: WideString; Origin, StartRow, DataType: OleVariant; TextQualifier: XlTextQualifier; ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout: OleVariant; lcid: Integer); dispid 683;
    property _Default[Index: OleVariant]: Workbook readonly dispid 0; default;
  end;

  IMenuBars = interface(IDispatch)
    ['{00020863-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Name: OleVariant; out Retval: MenuBar): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: MenuBar): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: MenuBar): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IMenuBar = interface(IDispatch)
    ['{00020864-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_BuiltIn(out Retval: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Menus(out Retval: Menus): HResult; stdcall;
    function Reset: HResult; stdcall;
  end;

  IMenus = interface(IDispatch)
    ['{00020865-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(const Caption: WideString; Before, Restore: OleVariant; out Retval: Menu): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: Menu): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: Menu): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IMenu = interface(IDispatch)
    ['{00020866-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_MenuItems(out Retval: MenuItems): HResult; stdcall;
  end;

  IMenuItems = interface(IDispatch)
    ['{00020867-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(const Caption: WideString; OnAction, ShortcutKey, Before, Restore, StatusBar, HelpFile, HelpContextID: OleVariant; out Retval: MenuItem): HResult; stdcall;
    function AddMenu(const Caption: WideString; Before, Restore: OleVariant; out Retval: Menu): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IMenuItem = interface(IDispatch)
    ['{00020868-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Checked(out Retval: WordBool): HResult; stdcall;
    function Set_Checked(Value: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_HelpContextID(out Retval: Integer): HResult; stdcall;
    function Set_HelpContextID(Value: Integer): HResult; stdcall;
    function Get_HelpFile(out Retval: WideString): HResult; stdcall;
    function Set_HelpFile(const Value: WideString): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_StatusBar(out Retval: WideString): HResult; stdcall;
    function Set_StatusBar(const Value: WideString): HResult; stdcall;
  end;

  ICharts = interface(IDispatch)
    ['{0002086D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Before, After, Count: OleVariant; out Retval: Chart): HResult; stdcall;
    function Copy(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    procedure _Dummy7; stdcall;
    function Get_Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Move(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks(out Retval: HPageBreaks): HResult; stdcall;
    function Get_VPageBreaks(out Retval: VPageBreaks): HResult; stdcall;
    function Get_Visible(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Visible(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
  end;

  IDrawingObjects = interface(IDispatch)
    ['{0002086F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    procedure _Dummy28; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function AddItem(Text, Index: OleVariant): HResult; stdcall;
    function Get_ArrowHeadLength(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadLength(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadStyle(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadWidth(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_CancelButton(out Retval: WordBool): HResult; stdcall;
    function Set_CancelButton(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_DefaultButton(out Retval: WordBool): HResult; stdcall;
    function Set_DefaultButton(Value: WordBool): HResult; stdcall;
    function Get_DismissButton(out Retval: WordBool): HResult; stdcall;
    function Set_DismissButton(Value: WordBool): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_DisplayVerticalScrollBar(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayVerticalScrollBar(Value: WordBool): HResult; stdcall;
    function Get_DropDownLines(out Retval: Integer): HResult; stdcall;
    function Set_DropDownLines(Value: Integer): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    procedure _Dummy47; stdcall;
    function Get_HelpButton(out Retval: WordBool): HResult; stdcall;
    function Set_HelpButton(Value: WordBool): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_InputType(out Retval: Integer): HResult; stdcall;
    function Set_InputType(Value: Integer): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_LargeChange(out Retval: Integer): HResult; stdcall;
    function Set_LargeChange(Value: Integer): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    procedure _Dummy54; stdcall;
    function List(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    procedure _Dummy56; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ListIndex(out Retval: Integer): HResult; stdcall;
    function Set_ListIndex(Value: Integer): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Max(out Retval: Integer): HResult; stdcall;
    function Set_Max(Value: Integer): HResult; stdcall;
    function Get_Min(out Retval: Integer): HResult; stdcall;
    function Set_Min(Value: Integer): HResult; stdcall;
    function Get_MultiLine(out Retval: WordBool): HResult; stdcall;
    function Set_MultiLine(Value: WordBool): HResult; stdcall;
    function Get_MultiSelect(out Retval: WordBool): HResult; stdcall;
    function Set_MultiSelect(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Reshape(Vertex: Integer; Insert, Left, Top: OleVariant): HResult; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    function Selected(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_SmallChange(out Retval: Integer): HResult; stdcall;
    function Set_SmallChange(Value: Integer): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Ungroup(out Retval: IDispatch): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Vertices(Index1, Index2: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function LinkCombo(Link: OleVariant): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPivotCache = interface(IDispatch)
    ['{0002441C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BackgroundQuery(out Retval: WordBool): HResult; stdcall;
    function Set_BackgroundQuery(Value: WordBool): HResult; stdcall;
    function Get_Connection(out Retval: OleVariant): HResult; stdcall;
    function Set_Connection(Value: OleVariant): HResult; stdcall;
    function Get_EnableRefresh(out Retval: WordBool): HResult; stdcall;
    function Set_EnableRefresh(Value: WordBool): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_MemoryUsed(out Retval: Integer): HResult; stdcall;
    function Get_OptimizeCache(out Retval: WordBool): HResult; stdcall;
    function Set_OptimizeCache(Value: WordBool): HResult; stdcall;
    function Get_RecordCount(out Retval: Integer): HResult; stdcall;
    function Refresh: HResult; stdcall;
    function Get_RefreshDate(out Retval: TDateTime): HResult; stdcall;
    function Get_RefreshName(out Retval: WideString): HResult; stdcall;
    function Get_RefreshOnFileOpen(out Retval: WordBool): HResult; stdcall;
    function Set_RefreshOnFileOpen(Value: WordBool): HResult; stdcall;
    function Get_Sql(out Retval: OleVariant): HResult; stdcall;
    function Set_Sql(Value: OleVariant): HResult; stdcall;
    function Get_SavePassword(out Retval: WordBool): HResult; stdcall;
    function Set_SavePassword(Value: WordBool): HResult; stdcall;
    function Get_SourceData(out Retval: OleVariant): HResult; stdcall;
    function Set_SourceData(Value: OleVariant): HResult; stdcall;
  end;

  IPivotCaches = interface(IDispatch)
    ['{0002441D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: PivotCache): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: PivotCache): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPivotFormula = interface(IDispatch)
    ['{0002441E-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get__Default(out Retval: WideString): HResult; stdcall;
    function Set__Default(const Value: WideString): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_Value(out Retval: WideString): HResult; stdcall;
    function Set_Value(const Value: WideString): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Set_Index(Value: Integer): HResult; stdcall;
  end;

  IPivotFormulas = interface(IDispatch)
    ['{0002441F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Add(const Formula: WideString; out Retval: PivotFormula): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: PivotFormula): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: PivotFormula): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPivotTable = interface(IDispatch)
    ['{00020872-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function AddFields(RowFields, ColumnFields, PageFields, AddToTable: OleVariant): HResult; stdcall;
    function Get_ColumnFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_ColumnGrand(out Retval: WordBool): HResult; stdcall;
    function Set_ColumnGrand(Value: WordBool): HResult; stdcall;
    function Get_ColumnRange(out Retval: Range): HResult; stdcall;
    function ShowPages(PageField: OleVariant): HResult; stdcall;
    function Get_DataBodyRange(out Retval: Range): HResult; stdcall;
    function Get_DataFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_DataLabelRange(out Retval: Range): HResult; stdcall;
    function Get__Default(out Retval: WideString): HResult; stdcall;
    function Set__Default(const Value: WideString): HResult; stdcall;
    function Get_HasAutoFormat(out Retval: WordBool): HResult; stdcall;
    function Set_HasAutoFormat(Value: WordBool): HResult; stdcall;
    function Get_HiddenFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_InnerDetail(out Retval: WideString): HResult; stdcall;
    function Set_InnerDetail(const Value: WideString): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_PageFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_PageRange(out Retval: Range): HResult; stdcall;
    function Get_PageRangeCells(out Retval: Range): HResult; stdcall;
    function PivotFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_RefreshDate(out Retval: TDateTime): HResult; stdcall;
    function Get_RefreshName(out Retval: WideString): HResult; stdcall;
    function RefreshTable(out Retval: WordBool): HResult; stdcall;
    function Get_RowFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_RowGrand(out Retval: WordBool): HResult; stdcall;
    function Set_RowGrand(Value: WordBool): HResult; stdcall;
    function Get_RowRange(out Retval: Range): HResult; stdcall;
    function Get_SaveData(out Retval: WordBool): HResult; stdcall;
    function Set_SaveData(Value: WordBool): HResult; stdcall;
    function Get_SourceData(out Retval: OleVariant): HResult; stdcall;
    function Set_SourceData(Value: OleVariant): HResult; stdcall;
    function Get_TableRange1(out Retval: Range): HResult; stdcall;
    function Get_TableRange2(out Retval: Range): HResult; stdcall;
    function Get_Value(out Retval: WideString): HResult; stdcall;
    function Set_Value(const Value: WideString): HResult; stdcall;
    function Get_VisibleFields(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_CacheIndex(out Retval: Integer): HResult; stdcall;
    function Set_CacheIndex(Value: Integer): HResult; stdcall;
    function CalculatedFields(out Retval: CalculatedFields): HResult; stdcall;
    function Get_DisplayErrorString(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayErrorString(Value: WordBool): HResult; stdcall;
    function Get_DisplayNullString(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayNullString(Value: WordBool): HResult; stdcall;
    function Get_EnableDrilldown(out Retval: WordBool): HResult; stdcall;
    function Set_EnableDrilldown(Value: WordBool): HResult; stdcall;
    function Get_EnableFieldDialog(out Retval: WordBool): HResult; stdcall;
    function Set_EnableFieldDialog(Value: WordBool): HResult; stdcall;
    function Get_EnableWizard(out Retval: WordBool): HResult; stdcall;
    function Set_EnableWizard(Value: WordBool): HResult; stdcall;
    function Get_ErrorString(out Retval: WideString): HResult; stdcall;
    function Set_ErrorString(const Value: WideString): HResult; stdcall;
    function GetData(const Name: WideString; out Retval: Double): HResult; stdcall;
    function ListFormulas: HResult; stdcall;
    function Get_ManualUpdate(out Retval: WordBool): HResult; stdcall;
    function Set_ManualUpdate(Value: WordBool): HResult; stdcall;
    function Get_MergeLabels(out Retval: WordBool): HResult; stdcall;
    function Set_MergeLabels(Value: WordBool): HResult; stdcall;
    function Get_NullString(out Retval: WideString): HResult; stdcall;
    function Set_NullString(const Value: WideString): HResult; stdcall;
    function PivotCache(out Retval: PivotCache): HResult; stdcall;
    function PivotFormulas(out Retval: PivotFormulas): HResult; stdcall;
    function PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection: OleVariant): HResult; stdcall;
    function Get_SubtotalHiddenPageItems(out Retval: WordBool): HResult; stdcall;
    function Set_SubtotalHiddenPageItems(Value: WordBool): HResult; stdcall;
    function Get_PageFieldOrder(out Retval: Integer): HResult; stdcall;
    function Set_PageFieldOrder(Value: Integer): HResult; stdcall;
    function Get_PageFieldStyle(out Retval: WideString): HResult; stdcall;
    function Set_PageFieldStyle(const Value: WideString): HResult; stdcall;
    function Get_PageFieldWrapCount(out Retval: Integer): HResult; stdcall;
    function Set_PageFieldWrapCount(Value: Integer): HResult; stdcall;
    function Get_PreserveFormatting(out Retval: WordBool): HResult; stdcall;
    function Set_PreserveFormatting(Value: WordBool): HResult; stdcall;
    function PivotSelect(const Name: WideString; Mode: XlPTSelectionMode): HResult; stdcall;
    function Get_PivotSelection(out Retval: WideString): HResult; stdcall;
    function Set_PivotSelection(const Value: WideString): HResult; stdcall;
    function Get_SelectionMode(out Retval: XlPTSelectionMode): HResult; stdcall;
    function Set_SelectionMode(Value: XlPTSelectionMode): HResult; stdcall;
    function Get_TableStyle(out Retval: WideString): HResult; stdcall;
    function Set_TableStyle(const Value: WideString): HResult; stdcall;
    function Get_Tag(out Retval: WideString): HResult; stdcall;
    function Set_Tag(const Value: WideString): HResult; stdcall;
    function Update: HResult; stdcall;
    function Get_VacatedStyle(out Retval: WideString): HResult; stdcall;
    function Set_VacatedStyle(const Value: WideString): HResult; stdcall;
  end;

  IPivotTables = interface(IDispatch)
    ['{00020873-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: PivotTable): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPivotField = interface(IDispatch)
    ['{00020874-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: PivotTable): HResult; stdcall;
    function Get_Calculation(out Retval: XlPivotFieldCalculation): HResult; stdcall;
    function Set_Calculation(Value: XlPivotFieldCalculation): HResult; stdcall;
    function Get_ChildField(out Retval: PivotField): HResult; stdcall;
    function Get_ChildItems(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_CurrentPage(out Retval: WideString): HResult; stdcall;
    function Set_CurrentPage(const Value: WideString): HResult; stdcall;
    function Get_DataRange(out Retval: Range): HResult; stdcall;
    function Get_DataType(out Retval: XlPivotFieldDataType): HResult; stdcall;
    function Get__Default(out Retval: WideString): HResult; stdcall;
    function Set__Default(const Value: WideString): HResult; stdcall;
    function Get_Function_(out Retval: XlConsolidationFunction): HResult; stdcall;
    function Set_Function_(Value: XlConsolidationFunction): HResult; stdcall;
    function Get_GroupLevel(out Retval: OleVariant): HResult; stdcall;
    function Get_HiddenItems(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_LabelRange(out Retval: Range): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_NumberFormat(out Retval: WideString): HResult; stdcall;
    function Set_NumberFormat(const Value: WideString): HResult; stdcall;
    function Get_Orientation(out Retval: XlPivotFieldOrientation): HResult; stdcall;
    function Set_Orientation(Value: XlPivotFieldOrientation): HResult; stdcall;
    function Get_ShowAllItems(out Retval: WordBool): HResult; stdcall;
    function Set_ShowAllItems(Value: WordBool): HResult; stdcall;
    function Get_ParentField(out Retval: PivotField): HResult; stdcall;
    function Get_ParentItems(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function PivotItems(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_Position(out Retval: OleVariant): HResult; stdcall;
    function Set_Position(Value: OleVariant): HResult; stdcall;
    function Get_SourceName(out Retval: WideString): HResult; stdcall;
    function Subtotals(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_BaseField(out Retval: OleVariant): HResult; stdcall;
    function Set_BaseField(Value: OleVariant): HResult; stdcall;
    function Get_BaseItem(out Retval: OleVariant): HResult; stdcall;
    function Set_BaseItem(Value: OleVariant): HResult; stdcall;
    function Get_TotalLevels(out Retval: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: WideString): HResult; stdcall;
    function Set_Value(const Value: WideString): HResult; stdcall;
    function Get_VisibleItems(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function CalculatedItems(out Retval: CalculatedItems): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_DragToColumn(out Retval: WordBool): HResult; stdcall;
    function Set_DragToColumn(Value: WordBool): HResult; stdcall;
    function Get_DragToHide(out Retval: WordBool): HResult; stdcall;
    function Set_DragToHide(Value: WordBool): HResult; stdcall;
    function Get_DragToPage(out Retval: WordBool): HResult; stdcall;
    function Set_DragToPage(Value: WordBool): HResult; stdcall;
    function Get_DragToRow(out Retval: WordBool): HResult; stdcall;
    function Set_DragToRow(Value: WordBool): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_IsCalculated(out Retval: WordBool): HResult; stdcall;
    function Get_MemoryUsed(out Retval: Integer): HResult; stdcall;
    function Get_ServerBased(out Retval: WordBool): HResult; stdcall;
    function Set_ServerBased(Value: WordBool): HResult; stdcall;
    function AutoSort(Order: Integer; const Field: WideString): HResult; stdcall;
    function AutoShow(Type_, Range, Count: Integer; const Field: WideString): HResult; stdcall;
    function Get_AutoSortOrder(out Retval: Integer): HResult; stdcall;
    function Get_AutoSortField(out Retval: WideString): HResult; stdcall;
    function Get_AutoShowType(out Retval: Integer): HResult; stdcall;
    function Get_AutoShowRange(out Retval: Integer): HResult; stdcall;
    function Get_AutoShowCount(out Retval: Integer): HResult; stdcall;
    function Get_AutoShowField(out Retval: WideString): HResult; stdcall;
  end;

  IPivotFields = interface(IDispatch)
    ['{00020875-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: PivotTable): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ICalculatedFields = interface(IDispatch)
    ['{00024420-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Add(const Name, Formula: WideString; out Retval: PivotField): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: PivotField): HResult; stdcall;
    function Get__Default(Field: OleVariant; out Retval: PivotField): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPivotItem = interface(IDispatch)
    ['{00020876-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: PivotField): HResult; stdcall;
    function Get_ChildItems(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_DataRange(out Retval: Range): HResult; stdcall;
    function Get__Default(out Retval: WideString): HResult; stdcall;
    function Set__Default(const Value: WideString): HResult; stdcall;
    function Get_LabelRange(out Retval: Range): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_ParentItem(out Retval: PivotItem): HResult; stdcall;
    function Get_ParentShowDetail(out Retval: WordBool): HResult; stdcall;
    function Get_Position(out Retval: Integer): HResult; stdcall;
    function Set_Position(Value: Integer): HResult; stdcall;
    function Get_ShowDetail(out Retval: WordBool): HResult; stdcall;
    function Set_ShowDetail(Value: WordBool): HResult; stdcall;
    function Get_SourceName(out Retval: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: WideString): HResult; stdcall;
    function Set_Value(const Value: WideString): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_IsCalculated(out Retval: WordBool): HResult; stdcall;
    function Get_RecordCount(out Retval: Integer): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
  end;

  IPivotItems = interface(IDispatch)
    ['{00020877-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: PivotField): HResult; stdcall;
    function Add(const Name: WideString): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ICalculatedItems = interface(IDispatch)
    ['{00024421-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Add(const Name, Formula: WideString; out Retval: PivotItem): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: PivotItem): HResult; stdcall;
    function Get__Default(Field: OleVariant; out Retval: PivotItem): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ICharacters = interface(IDispatch)
    ['{00020878-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Insert(const String_: WideString): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_PhoneticCharacters(out Retval: WideString): HResult; stdcall;
    function Set_PhoneticCharacters(const Value: WideString): HResult; stdcall;
  end;

  IDialogs = interface(IDispatch)
    ['{00020879-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: XlBuiltInDialog; out Retval: Dialog): HResult; stdcall;
    function Get__Default(Index: XlBuiltInDialog; out Retval: Dialog): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IDialog = interface(IDispatch)
    ['{0002087A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Show(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant; out Retval: WordBool): HResult; stdcall;
  end;

  ISoundNote = interface(IDispatch)
    ['{0002087B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Import(const Filename: WideString): HResult; stdcall;
    function Play: HResult; stdcall;
    function Record_: HResult; stdcall;
  end;

  IButton = interface(IDispatch)
    ['{0002087D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_CancelButton(out Retval: WordBool): HResult; stdcall;
    function Set_CancelButton(Value: WordBool): HResult; stdcall;
    function Get_DefaultButton(out Retval: WordBool): HResult; stdcall;
    function Set_DefaultButton(Value: WordBool): HResult; stdcall;
    function Get_DismissButton(out Retval: WordBool): HResult; stdcall;
    function Set_DismissButton(Value: WordBool): HResult; stdcall;
    function Get_HelpButton(out Retval: WordBool): HResult; stdcall;
    function Set_HelpButton(Value: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
  end;

  IButtons = interface(IDispatch)
    ['{0002087E-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_CancelButton(out Retval: WordBool): HResult; stdcall;
    function Set_CancelButton(Value: WordBool): HResult; stdcall;
    function Get_DefaultButton(out Retval: WordBool): HResult; stdcall;
    function Set_DefaultButton(Value: WordBool): HResult; stdcall;
    function Get_DismissButton(out Retval: WordBool): HResult; stdcall;
    function Set_DismissButton(Value: WordBool): HResult; stdcall;
    function Get_HelpButton(out Retval: WordBool): HResult; stdcall;
    function Set_HelpButton(Value: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: Button): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ICheckBox = interface(IDispatch)
    ['{0002087F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: OleVariant): HResult; stdcall;
    function Set_Value(Value: OleVariant): HResult; stdcall;
  end;

  ICheckBoxes = interface(IDispatch)
    ['{00020880-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: OleVariant): HResult; stdcall;
    function Set_Value(Value: OleVariant): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: CheckBox): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IOptionButton = interface(IDispatch)
    ['{00020881-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: OleVariant): HResult; stdcall;
    function Set_Value(Value: OleVariant): HResult; stdcall;
    function Get_GroupBox(out Retval: GroupBox): HResult; stdcall;
  end;

  IOptionButtons = interface(IDispatch)
    ['{00020882-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: OleVariant): HResult; stdcall;
    function Set_Value(Value: OleVariant): HResult; stdcall;
    function Get_GroupBox(out Retval: GroupBox): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: OptionButton): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IEditBox = interface(IDispatch)
    ['{00020883-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_DisplayVerticalScrollBar(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayVerticalScrollBar(Value: WordBool): HResult; stdcall;
    function Get_InputType(out Retval: Integer): HResult; stdcall;
    function Set_InputType(Value: Integer): HResult; stdcall;
    function Get_LinkedObject(out Retval: WideString): HResult; stdcall;
    function Get_MultiLine(out Retval: WordBool): HResult; stdcall;
    function Set_MultiLine(Value: WordBool): HResult; stdcall;
    function Get_PasswordEdit(out Retval: WordBool): HResult; stdcall;
    function Set_PasswordEdit(Value: WordBool): HResult; stdcall;
  end;

  IEditBoxes = interface(IDispatch)
    ['{00020884-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_DisplayVerticalScrollBar(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayVerticalScrollBar(Value: WordBool): HResult; stdcall;
    function Get_InputType(out Retval: Integer): HResult; stdcall;
    function Set_InputType(Value: Integer): HResult; stdcall;
    procedure _Dummy34; stdcall;
    function Get_MultiLine(out Retval: WordBool): HResult; stdcall;
    function Set_MultiLine(Value: WordBool): HResult; stdcall;
    function Get_PasswordEdit(out Retval: WordBool): HResult; stdcall;
    function Set_PasswordEdit(Value: WordBool): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: EditBox): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IScrollBar = interface(IDispatch)
    ['{00020885-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_Max(out Retval: Integer): HResult; stdcall;
    function Set_Max(Value: Integer): HResult; stdcall;
    function Get_Min(out Retval: Integer): HResult; stdcall;
    function Set_Min(Value: Integer): HResult; stdcall;
    function Get_SmallChange(out Retval: Integer): HResult; stdcall;
    function Set_SmallChange(Value: Integer): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Get_LargeChange(out Retval: Integer): HResult; stdcall;
    function Set_LargeChange(Value: Integer): HResult; stdcall;
  end;

  IScrollBars = interface(IDispatch)
    ['{00020886-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_Max(out Retval: Integer): HResult; stdcall;
    function Set_Max(Value: Integer): HResult; stdcall;
    function Get_Min(out Retval: Integer): HResult; stdcall;
    function Set_Min(Value: Integer): HResult; stdcall;
    function Get_SmallChange(out Retval: Integer): HResult; stdcall;
    function Set_SmallChange(Value: Integer): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Get_LargeChange(out Retval: Integer): HResult; stdcall;
    function Set_LargeChange(Value: Integer): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: ScrollBar): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IListBox = interface(IDispatch)
    ['{00020887-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function AddItem(Text, Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_LinkedObject(out Retval: OleVariant): HResult; stdcall;
    function List(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_ListCount(out Retval: Integer): HResult; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ListIndex(out Retval: Integer): HResult; stdcall;
    function Set_ListIndex(Value: Integer): HResult; stdcall;
    function Get_MultiSelect(out Retval: Integer): HResult; stdcall;
    function Set_MultiSelect(Value: Integer): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
  end;

  IListBoxes = interface(IDispatch)
    ['{00020888-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function AddItem(Text, Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    procedure _Dummy31; stdcall;
    function List(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    procedure _Dummy33; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ListIndex(out Retval: Integer): HResult; stdcall;
    function Set_ListIndex(Value: Integer): HResult; stdcall;
    function Get_MultiSelect(out Retval: Integer): HResult; stdcall;
    function Set_MultiSelect(Value: Integer): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: ListBox): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IGroupBox = interface(IDispatch)
    ['{00020889-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
  end;

  IGroupBoxes = interface(IDispatch)
    ['{0002088A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: GroupBox): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IDropDown = interface(IDispatch)
    ['{0002088B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function AddItem(Text, Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_LinkedObject(out Retval: OleVariant): HResult; stdcall;
    function List(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_ListCount(out Retval: Integer): HResult; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ListIndex(out Retval: Integer): HResult; stdcall;
    function Set_ListIndex(Value: Integer): HResult; stdcall;
    procedure _Dummy36; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function Get_DropDownLines(out Retval: Integer): HResult; stdcall;
    function Set_DropDownLines(Value: Integer): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
  end;

  IDropDowns = interface(IDispatch)
    ['{0002088C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function AddItem(Text, Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    procedure _Dummy31; stdcall;
    function List(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    procedure _Dummy33; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ListIndex(out Retval: Integer): HResult; stdcall;
    function Set_ListIndex(Value: Integer): HResult; stdcall;
    procedure _Dummy36; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function Get_DropDownLines(out Retval: Integer): HResult; stdcall;
    function Set_DropDownLines(Value: Integer): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; Editable: OleVariant; out Retval: DropDown): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ISpinner = interface(IDispatch)
    ['{0002088D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_Max(out Retval: Integer): HResult; stdcall;
    function Set_Max(Value: Integer): HResult; stdcall;
    function Get_Min(out Retval: Integer): HResult; stdcall;
    function Set_Min(Value: Integer): HResult; stdcall;
    function Get_SmallChange(out Retval: Integer): HResult; stdcall;
    function Set_SmallChange(Value: Integer): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
  end;

  ISpinners = interface(IDispatch)
    ['{0002088E-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Display3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Display3DShading(Value: WordBool): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_Max(out Retval: Integer): HResult; stdcall;
    function Set_Max(Value: Integer): HResult; stdcall;
    function Get_Min(out Retval: Integer): HResult; stdcall;
    function Set_Min(Value: Integer): HResult; stdcall;
    function Get_SmallChange(out Retval: Integer): HResult; stdcall;
    function Set_SmallChange(Value: Integer): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: Spinner): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IDialogFrame = interface(IDispatch)
    ['{0002088F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    procedure _Dummy4; stdcall;
    procedure _Dummy5; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    procedure _Dummy7; stdcall;
    procedure _Dummy8; stdcall;
    procedure _Dummy9; stdcall;
    procedure _Dummy10; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    procedure _Dummy17; stdcall;
    procedure _Dummy18; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    procedure _Dummy20; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    procedure _Dummy23; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    procedure _Dummy25; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
  end;

  ILabel = interface(IDispatch)
    ['{00020890-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    procedure _Dummy33; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
  end;

  ILabels = interface(IDispatch)
    ['{00020891-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Accelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_Accelerator(Value: OleVariant): HResult; stdcall;
    procedure _Dummy33; stdcall;
    function Get_PhoneticAccelerator(out Retval: OleVariant): HResult; stdcall;
    function Set_PhoneticAccelerator(Value: OleVariant): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: Label_): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPanes = interface(IDispatch)
    ['{00020894-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: Pane): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: Pane): HResult; stdcall;
  end;

  IPane = interface(IDispatch)
    ['{00020895-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function LargeScroll(Down, Up, ToRight, ToLeft: OleVariant): HResult; stdcall;
    function Get_ScrollColumn(out Retval: Integer): HResult; stdcall;
    function Set_ScrollColumn(Value: Integer): HResult; stdcall;
    function Get_ScrollRow(out Retval: Integer): HResult; stdcall;
    function Set_ScrollRow(Value: Integer): HResult; stdcall;
    function SmallScroll(Down, Up, ToRight, ToLeft: OleVariant): HResult; stdcall;
    function Get_VisibleRange(out Retval: Range): HResult; stdcall;
  end;

  IScenarios = interface(IDispatch)
    ['{00020896-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(const Name: WideString; ChangingCells, Values, Comment, Locked, Hidden: OleVariant; out Retval: Scenario): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function CreateSummary(ReportType: XlSummaryReportType; ResultCells: OleVariant): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Scenario): HResult; stdcall;
    function Merge(Source: OleVariant): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IScenario = interface(IDispatch)
    ['{00020897-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function ChangeScenario(ChangingCells, Values: OleVariant): HResult; stdcall;
    function Get_ChangingCells(out Retval: Range): HResult; stdcall;
    function Get_Comment(out Retval: WideString): HResult; stdcall;
    function Set_Comment(const Value: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Hidden(out Retval: WordBool): HResult; stdcall;
    function Set_Hidden(Value: WordBool): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Show: HResult; stdcall;
    function Get_Values(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
  end;

  IGroupObject = interface(IDispatch)
    ['{00020898-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    procedure _Dummy27; stdcall;
    procedure _Dummy28; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    procedure _Dummy30; stdcall;
    function Get_ArrowHeadLength(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadLength(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadStyle(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadWidth(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    procedure _Dummy36; stdcall;
    procedure _Dummy37; stdcall;
    procedure _Dummy38; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    procedure _Dummy41; stdcall;
    procedure _Dummy42; stdcall;
    procedure _Dummy43; stdcall;
    procedure _Dummy44; stdcall;
    procedure _Dummy45; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    procedure _Dummy47; stdcall;
    procedure _Dummy48; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    procedure _Dummy50; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    procedure _Dummy52; stdcall;
    procedure _Dummy53; stdcall;
    procedure _Dummy54; stdcall;
    procedure _Dummy55; stdcall;
    procedure _Dummy56; stdcall;
    procedure _Dummy57; stdcall;
    procedure _Dummy58; stdcall;
    procedure _Dummy59; stdcall;
    procedure _Dummy60; stdcall;
    procedure _Dummy61; stdcall;
    procedure _Dummy62; stdcall;
    procedure _Dummy63; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    procedure _Dummy65; stdcall;
    procedure _Dummy66; stdcall;
    procedure _Dummy67; stdcall;
    procedure _Dummy68; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    procedure _Dummy70; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    procedure _Dummy72; stdcall;
    procedure _Dummy73; stdcall;
    function Ungroup(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy75; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    procedure _Dummy77; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
  end;

  IGroupObjects = interface(IDispatch)
    ['{00020899-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    procedure _Dummy27; stdcall;
    procedure _Dummy28; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    procedure _Dummy30; stdcall;
    function Get_ArrowHeadLength(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadLength(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadStyle(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadWidth(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    procedure _Dummy36; stdcall;
    procedure _Dummy37; stdcall;
    procedure _Dummy38; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    procedure _Dummy41; stdcall;
    procedure _Dummy42; stdcall;
    procedure _Dummy43; stdcall;
    procedure _Dummy44; stdcall;
    procedure _Dummy45; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    procedure _Dummy47; stdcall;
    procedure _Dummy48; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    procedure _Dummy50; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    procedure _Dummy52; stdcall;
    procedure _Dummy53; stdcall;
    procedure _Dummy54; stdcall;
    procedure _Dummy55; stdcall;
    procedure _Dummy56; stdcall;
    procedure _Dummy57; stdcall;
    procedure _Dummy58; stdcall;
    procedure _Dummy59; stdcall;
    procedure _Dummy60; stdcall;
    procedure _Dummy61; stdcall;
    procedure _Dummy62; stdcall;
    procedure _Dummy63; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    procedure _Dummy65; stdcall;
    procedure _Dummy66; stdcall;
    procedure _Dummy67; stdcall;
    procedure _Dummy68; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    procedure _Dummy70; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    procedure _Dummy72; stdcall;
    procedure _Dummy73; stdcall;
    function Ungroup(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy75; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    procedure _Dummy77; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ILine = interface(IDispatch)
    ['{0002089A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_ArrowHeadLength(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadLength(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadStyle(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadWidth(Value: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
  end;

  ILines = interface(IDispatch)
    ['{0002089B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_ArrowHeadLength(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadLength(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadStyle(Value: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth(out Retval: OleVariant): HResult; stdcall;
    function Set_ArrowHeadWidth(Value: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Add(X1, Y1, X2, Y2: Double; out Retval: Line): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IRectangle = interface(IDispatch)
    ['{0002089C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
  end;

  IRectangles = interface(IDispatch)
    ['{0002089D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: Rectangle): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IOval = interface(IDispatch)
    ['{0002089E-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
  end;

  IOvals = interface(IDispatch)
    ['{0002089F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: Oval): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IArc = interface(IDispatch)
    ['{000208A0-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    procedure _Dummy43; stdcall;
  end;

  IArcs = interface(IDispatch)
    ['{000208A1-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    procedure _Dummy43; stdcall;
    function Add(X1, Y1, X2, Y2: Double; out Retval: Arc): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IOLEObjectEvents = interface(IDispatch)
    ['{00024410-0001-0000-C000-000000000046}']
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
  end;

  _IOLEObject = interface(IDispatch)
    ['{000208A2-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_AutoLoad(out Retval: WordBool): HResult; stdcall;
    function Set_AutoLoad(Value: WordBool): HResult; stdcall;
    function Get_AutoUpdate(out Retval: WordBool): HResult; stdcall;
    function Set_AutoUpdate(Value: WordBool): HResult; stdcall;
    function Get_Object_(out Retval: IDispatch): HResult; stdcall;
    function Get_OLEType(out Retval: OleVariant): HResult; stdcall;
    function Get_SourceName(out Retval: WideString): HResult; stdcall;
    function Set_SourceName(const Value: WideString): HResult; stdcall;
    function Update: HResult; stdcall;
    function Verb(Verb: XlOLEVerb): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ProgId(out Retval: WideString): HResult; stdcall;
  end;

  IOLEObjects = interface(IDispatch)
    ['{000208A3-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    procedure _Dummy30; stdcall;
    function Get_AutoLoad(out Retval: WordBool): HResult; stdcall;
    function Set_AutoLoad(Value: WordBool): HResult; stdcall;
    procedure _Dummy32; stdcall;
    procedure _Dummy33; stdcall;
    procedure _Dummy34; stdcall;
    function Get_SourceName(out Retval: WideString): HResult; stdcall;
    function Set_SourceName(const Value: WideString): HResult; stdcall;
    procedure _Dummy36; stdcall;
    procedure _Dummy37; stdcall;
    procedure _Dummy38; stdcall;
    procedure _Dummy39; stdcall;
    procedure _Dummy40; stdcall;
    function Add(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height: OleVariant; out Retval: OLEObject): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ITextBox = interface(IDispatch)
    ['{000208A4-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
  end;

  ITextBoxes = interface(IDispatch)
    ['{000208A5-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: TextBox): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPicture = interface(IDispatch)
    ['{000208A6-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
  end;

  IPictures = interface(IDispatch)
    ['{000208A7-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: Picture): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Insert(const Filename: WideString; Converter: OleVariant; out Retval: Picture): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Paste(Link: OleVariant; out Retval: Picture): HResult; stdcall;
  end;

  IDrawing = interface(IDispatch)
    ['{000208A8-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function AddVertex(Left, Top: Double): HResult; stdcall;
    function Reshape(Vertex: Integer; Insert: WordBool; Left, Top: OleVariant): HResult; stdcall;
    function Get_Vertices(Index1, Index2: OleVariant; out Retval: OleVariant): HResult; stdcall;
  end;

  IDrawings = interface(IDispatch)
    ['{000208A9-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Get_AddIndent(out Retval: WordBool): HResult; stdcall;
    function Set_AddIndent(Value: WordBool): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    procedure _Dummy44; stdcall;
    function Reshape(Vertex: Integer; Insert: WordBool; Left, Top: OleVariant): HResult; stdcall;
    procedure _Dummy46; stdcall;
    function Add(X1, Y1, X2, Y2: Double; Closed: WordBool; out Retval: Drawing): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IRoutingSlip = interface(IDispatch)
    ['{000208AA-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Delivery(out Retval: XlRoutingSlipDelivery): HResult; stdcall;
    function Set_Delivery(Value: XlRoutingSlipDelivery): HResult; stdcall;
    function Get_Message(out Retval: OleVariant): HResult; stdcall;
    function Set_Message(Value: OleVariant): HResult; stdcall;
    function Recipients(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Get_ReturnWhenDone(out Retval: WordBool): HResult; stdcall;
    function Set_ReturnWhenDone(Value: WordBool): HResult; stdcall;
    function Get_Status(out Retval: XlRoutingSlipStatus): HResult; stdcall;
    function Get_Subject(out Retval: OleVariant): HResult; stdcall;
    function Set_Subject(Value: OleVariant): HResult; stdcall;
    function Get_TrackStatus(out Retval: WordBool): HResult; stdcall;
    function Set_TrackStatus(Value: WordBool): HResult; stdcall;
  end;

  IOutline = interface(IDispatch)
    ['{000208AB-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_AutomaticStyles(out Retval: WordBool): HResult; stdcall;
    function Set_AutomaticStyles(Value: WordBool): HResult; stdcall;
    function ShowLevels(RowLevels, ColumnLevels: OleVariant): HResult; stdcall;
    function Get_SummaryColumn(out Retval: XlSummaryColumn): HResult; stdcall;
    function Set_SummaryColumn(Value: XlSummaryColumn): HResult; stdcall;
    function Get_SummaryRow(out Retval: XlSummaryRow): HResult; stdcall;
    function Set_SummaryRow(Value: XlSummaryRow): HResult; stdcall;
  end;

  IModule = interface(IDispatch)
    ['{000208AD-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate(lcid: Integer): HResult; stdcall;
    function Copy(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    function Get_CodeName(out Retval: WideString): HResult; stdcall;
    function Get__CodeName(out Retval: WideString): HResult; stdcall;
    function Set__CodeName(const Value: WideString): HResult; stdcall;
    function Get_Index(lcid: Integer; out Retval: Integer): HResult; stdcall;
    function Move(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_Next(out Retval: IDispatch): HResult; stdcall;
    function Get_OnDoubleClick(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Set_OnDoubleClick(lcid: Integer; const Value: WideString): HResult; stdcall;
    function Get_OnSheetActivate(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Set_OnSheetActivate(lcid: Integer; const Value: WideString): HResult; stdcall;
    function Get_OnSheetDeactivate(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Set_OnSheetDeactivate(lcid: Integer; const Value: WideString): HResult; stdcall;
    function Get_PageSetup(out Retval: PageSetup): HResult; stdcall;
    function Get_Previous(out Retval: IDispatch): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer): HResult; stdcall;
    procedure _Dummy18; stdcall;
    function Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_ProtectContents(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    procedure _Dummy21; stdcall;
    function Get_ProtectionMode(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    procedure _Dummy23; stdcall;
    function SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Unprotect(Password: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Visible(lcid: Integer; out Retval: XlSheetVisibility): HResult; stdcall;
    function Set_Visible(lcid: Integer; Value: XlSheetVisibility): HResult; stdcall;
    function Get_Shapes(out Retval: Shapes): HResult; stdcall;
    function InsertFile(Filename, Merge: OleVariant): HResult; stdcall;
  end;

  IModules = interface(IDispatch)
    ['{000208AE-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Before, After, Count: OleVariant; out Retval: Module): HResult; stdcall;
    function Copy(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    procedure _Dummy7; stdcall;
    function Get_Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Move(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks(out Retval: HPageBreaks): HResult; stdcall;
    function Get_VPageBreaks(out Retval: VPageBreaks): HResult; stdcall;
    function Get_Visible(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Visible(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
  end;

  IDialogSheet = interface(IDispatch)
    ['{000208AF-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate(lcid: Integer): HResult; stdcall;
    function Copy(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    function Get_CodeName(out Retval: WideString): HResult; stdcall;
    function Get__CodeName(out Retval: WideString): HResult; stdcall;
    function Set__CodeName(const Value: WideString): HResult; stdcall;
    function Get_Index(lcid: Integer; out Retval: Integer): HResult; stdcall;
    function Move(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_Next(out Retval: IDispatch): HResult; stdcall;
    function Get_OnDoubleClick(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Set_OnDoubleClick(lcid: Integer; const Value: WideString): HResult; stdcall;
    function Get_OnSheetActivate(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Set_OnSheetActivate(lcid: Integer; const Value: WideString): HResult; stdcall;
    function Get_OnSheetDeactivate(lcid: Integer; out Retval: WideString): HResult; stdcall;
    function Set_OnSheetDeactivate(lcid: Integer; const Value: WideString): HResult; stdcall;
    function Get_PageSetup(out Retval: PageSetup): HResult; stdcall;
    function Get_Previous(out Retval: IDispatch): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_ProtectContents(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Get_ProtectDrawingObjects(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Get_ProtectionMode(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Get_ProtectScenarios(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Unprotect(Password: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Visible(lcid: Integer; out Retval: XlSheetVisibility): HResult; stdcall;
    function Set_Visible(lcid: Integer; Value: XlSheetVisibility): HResult; stdcall;
    function Get_Shapes(out Retval: Shapes): HResult; stdcall;
    procedure _Dummy29; stdcall;
    function Arcs(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy31; stdcall;
    procedure _Dummy32; stdcall;
    function Buttons(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy34; stdcall;
    function Get_EnableCalculation(out Retval: WordBool): HResult; stdcall;
    function Set_EnableCalculation(Value: WordBool): HResult; stdcall;
    procedure _Dummy36; stdcall;
    function ChartObjects(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function CheckBoxes(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant; lcid: Integer): HResult; stdcall;
    procedure _Dummy40; stdcall;
    procedure _Dummy41; stdcall;
    procedure _Dummy42; stdcall;
    procedure _Dummy43; stdcall;
    procedure _Dummy44; stdcall;
    procedure _Dummy45; stdcall;
    function Get_DisplayAutomaticPageBreaks(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Set_DisplayAutomaticPageBreaks(lcid: Integer; Value: WordBool): HResult; stdcall;
    function Drawings(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function DrawingObjects(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function DropDowns(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function Get_EnableAutoFilter(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Set_EnableAutoFilter(lcid: Integer; Value: WordBool): HResult; stdcall;
    function Get_EnableSelection(out Retval: XlEnableSelection): HResult; stdcall;
    function Set_EnableSelection(Value: XlEnableSelection): HResult; stdcall;
    function Get_EnableOutlining(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Set_EnableOutlining(lcid: Integer; Value: WordBool): HResult; stdcall;
    function Get_EnablePivotTable(lcid: Integer; out Retval: WordBool): HResult; stdcall;
    function Set_EnablePivotTable(lcid: Integer; Value: WordBool): HResult; stdcall;
    function Evaluate(Name: OleVariant; lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function _Evaluate(Name: OleVariant; lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    procedure _Dummy56; stdcall;
    function ResetAllPageBreaks: HResult; stdcall;
    function GroupBoxes(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function GroupObjects(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function Labels(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function Lines(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function ListBoxes(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function Get_Names(out Retval: Names): HResult; stdcall;
    function OLEObjects(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy65; stdcall;
    procedure _Dummy66; stdcall;
    procedure _Dummy67; stdcall;
    function OptionButtons(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy69; stdcall;
    function Ovals(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function Paste(Destination, Link: OleVariant; lcid: Integer): HResult; stdcall;
    function PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel: OleVariant; lcid: Integer): HResult; stdcall;
    function Pictures(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy74; stdcall;
    procedure _Dummy75; stdcall;
    procedure _Dummy76; stdcall;
    function Rectangles(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy78; stdcall;
    procedure _Dummy79; stdcall;
    function Get_ScrollArea(out Retval: WideString): HResult; stdcall;
    function Set_ScrollArea(const Value: WideString): HResult; stdcall;
    function ScrollBars(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy82; stdcall;
    procedure _Dummy83; stdcall;
    function Spinners(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy85; stdcall;
    procedure _Dummy86; stdcall;
    function TextBoxes(Index: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy88; stdcall;
    procedure _Dummy89; stdcall;
    procedure _Dummy90; stdcall;
    function Get_HPageBreaks(out Retval: HPageBreaks): HResult; stdcall;
    function Get_VPageBreaks(out Retval: VPageBreaks): HResult; stdcall;
    function Get_QueryTables(out Retval: QueryTables): HResult; stdcall;
    function Get_DisplayPageBreaks(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayPageBreaks(Value: WordBool): HResult; stdcall;
    function Get_Comments(out Retval: Comments): HResult; stdcall;
    function Get_Hyperlinks(out Retval: Hyperlinks): HResult; stdcall;
    function ClearCircles: HResult; stdcall;
    function CircleInvalid: HResult; stdcall;
    function Get_DisplayRightToLeft(lcid: Integer; out Retval: Integer): HResult; stdcall;
    function Set_DisplayRightToLeft(lcid: Integer; Value: Integer): HResult; stdcall;
    function Get_AutoFilter(out Retval: AutoFilter): HResult; stdcall;
    function Get_DefaultButton(out Retval: OleVariant): HResult; stdcall;
    function Set_DefaultButton(Value: OleVariant): HResult; stdcall;
    function Get_DialogFrame(out Retval: DialogFrame): HResult; stdcall;
    function EditBoxes(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_Focus(out Retval: OleVariant): HResult; stdcall;
    function Set_Focus(Value: OleVariant): HResult; stdcall;
    function Hide(Cancel: OleVariant; out Retval: WordBool): HResult; stdcall;
    function Show(out Retval: WordBool): HResult; stdcall;
  end;

  IDialogSheets = interface(IDispatch)
    ['{000208B0-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Before, After, Count: OleVariant; out Retval: DialogSheet): HResult; stdcall;
    function Copy(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    procedure _Dummy7; stdcall;
    function Get_Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Move(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks(out Retval: HPageBreaks): HResult; stdcall;
    function Get_VPageBreaks(out Retval: VPageBreaks): HResult; stdcall;
    function Get_Visible(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Visible(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
  end;

  IWorksheets = interface(IDispatch)
    ['{000208B1-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Before, After, Count, Type_: OleVariant; lcid: Integer; out Retval: IDispatch): HResult; stdcall;
    function Copy(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    function FillAcrossSheets(const Range: Range; Type_: XlFillWith; lcid: Integer): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Move(Before, After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant; lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks(out Retval: HPageBreaks): HResult; stdcall;
    function Get_VPageBreaks(out Retval: VPageBreaks): HResult; stdcall;
    function Get_Visible(lcid: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_Visible(lcid: Integer; Value: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
  end;

  IPageSetup = interface(IDispatch)
    ['{000208B4-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BlackAndWhite(out Retval: WordBool): HResult; stdcall;
    function Set_BlackAndWhite(Value: WordBool): HResult; stdcall;
    function Get_BottomMargin(out Retval: Double): HResult; stdcall;
    function Set_BottomMargin(Value: Double): HResult; stdcall;
    function Get_CenterFooter(out Retval: WideString): HResult; stdcall;
    function Set_CenterFooter(const Value: WideString): HResult; stdcall;
    function Get_CenterHeader(out Retval: WideString): HResult; stdcall;
    function Set_CenterHeader(const Value: WideString): HResult; stdcall;
    function Get_CenterHorizontally(out Retval: WordBool): HResult; stdcall;
    function Set_CenterHorizontally(Value: WordBool): HResult; stdcall;
    function Get_CenterVertically(out Retval: WordBool): HResult; stdcall;
    function Set_CenterVertically(Value: WordBool): HResult; stdcall;
    function Get_ChartSize(out Retval: XlObjectSize): HResult; stdcall;
    function Set_ChartSize(Value: XlObjectSize): HResult; stdcall;
    function Get_Draft(out Retval: WordBool): HResult; stdcall;
    function Set_Draft(Value: WordBool): HResult; stdcall;
    function Get_FirstPageNumber(out Retval: Integer): HResult; stdcall;
    function Set_FirstPageNumber(Value: Integer): HResult; stdcall;
    function Get_FitToPagesTall(out Retval: OleVariant): HResult; stdcall;
    function Set_FitToPagesTall(Value: OleVariant): HResult; stdcall;
    function Get_FitToPagesWide(out Retval: OleVariant): HResult; stdcall;
    function Set_FitToPagesWide(Value: OleVariant): HResult; stdcall;
    function Get_FooterMargin(out Retval: Double): HResult; stdcall;
    function Set_FooterMargin(Value: Double): HResult; stdcall;
    function Get_HeaderMargin(out Retval: Double): HResult; stdcall;
    function Set_HeaderMargin(Value: Double): HResult; stdcall;
    function Get_LeftFooter(out Retval: WideString): HResult; stdcall;
    function Set_LeftFooter(const Value: WideString): HResult; stdcall;
    function Get_LeftHeader(out Retval: WideString): HResult; stdcall;
    function Set_LeftHeader(const Value: WideString): HResult; stdcall;
    function Get_LeftMargin(out Retval: Double): HResult; stdcall;
    function Set_LeftMargin(Value: Double): HResult; stdcall;
    function Get_Order(out Retval: XlOrder): HResult; stdcall;
    function Set_Order(Value: XlOrder): HResult; stdcall;
    function Get_Orientation(out Retval: XlPageOrientation): HResult; stdcall;
    function Set_Orientation(Value: XlPageOrientation): HResult; stdcall;
    function Get_PaperSize(out Retval: XlPaperSize): HResult; stdcall;
    function Set_PaperSize(Value: XlPaperSize): HResult; stdcall;
    function Get_PrintArea(out Retval: WideString): HResult; stdcall;
    function Set_PrintArea(const Value: WideString): HResult; stdcall;
    function Get_PrintGridlines(out Retval: WordBool): HResult; stdcall;
    function Set_PrintGridlines(Value: WordBool): HResult; stdcall;
    function Get_PrintHeadings(out Retval: WordBool): HResult; stdcall;
    function Set_PrintHeadings(Value: WordBool): HResult; stdcall;
    function Get_PrintNotes(out Retval: WordBool): HResult; stdcall;
    function Set_PrintNotes(Value: WordBool): HResult; stdcall;
    function PrintQuality(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_PrintTitleColumns(out Retval: WideString): HResult; stdcall;
    function Set_PrintTitleColumns(const Value: WideString): HResult; stdcall;
    function Get_PrintTitleRows(out Retval: WideString): HResult; stdcall;
    function Set_PrintTitleRows(const Value: WideString): HResult; stdcall;
    function Get_RightFooter(out Retval: WideString): HResult; stdcall;
    function Set_RightFooter(const Value: WideString): HResult; stdcall;
    function Get_RightHeader(out Retval: WideString): HResult; stdcall;
    function Set_RightHeader(const Value: WideString): HResult; stdcall;
    function Get_RightMargin(out Retval: Double): HResult; stdcall;
    function Set_RightMargin(Value: Double): HResult; stdcall;
    function Get_TopMargin(out Retval: Double): HResult; stdcall;
    function Set_TopMargin(Value: Double): HResult; stdcall;
    function Get_Zoom(out Retval: OleVariant): HResult; stdcall;
    function Set_Zoom(Value: OleVariant): HResult; stdcall;
    function Get_PrintComments(out Retval: XlPrintLocation): HResult; stdcall;
    function Set_PrintComments(Value: XlPrintLocation): HResult; stdcall;
  end;

  INames = interface(IDispatch)
    ['{000208B8-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local: OleVariant; out Retval: Name): HResult; stdcall;
    function Item(Index, IndexLocal, RefersTo: OleVariant; lcid: Integer; out Retval: Name): HResult; stdcall;
    function _Default(Index, IndexLocal, RefersTo: OleVariant; lcid: Integer; out Retval: Name): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IName = interface(IDispatch)
    ['{000208B9-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get__Default(out Retval: WideString): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Category(lcidIn: Integer; out Retval: WideString): HResult; stdcall;
    function Set_Category(lcidIn: Integer; const Value: WideString): HResult; stdcall;
    function Get_CategoryLocal(out Retval: WideString): HResult; stdcall;
    function Set_CategoryLocal(const Value: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_MacroType(out Retval: XlXLMMacroType): HResult; stdcall;
    function Set_MacroType(Value: XlXLMMacroType): HResult; stdcall;
    function Get_Name(lcidIn: Integer; out Retval: WideString): HResult; stdcall;
    function Set_Name(lcidIn: Integer; const Value: WideString): HResult; stdcall;
    function Get_RefersTo(lcidIn: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_RefersTo(lcidIn: Integer; Value: OleVariant): HResult; stdcall;
    function Get_ShortcutKey(out Retval: WideString): HResult; stdcall;
    function Set_ShortcutKey(const Value: WideString): HResult; stdcall;
    function Get_Value(out Retval: WideString): HResult; stdcall;
    function Set_Value(const Value: WideString): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_NameLocal(out Retval: WideString): HResult; stdcall;
    function Set_NameLocal(const Value: WideString): HResult; stdcall;
    function Get_RefersToLocal(out Retval: OleVariant): HResult; stdcall;
    function Set_RefersToLocal(Value: OleVariant): HResult; stdcall;
    function Get_RefersToR1C1(lcidIn: Integer; out Retval: OleVariant): HResult; stdcall;
    function Set_RefersToR1C1(lcidIn: Integer; Value: OleVariant): HResult; stdcall;
    function Get_RefersToR1C1Local(out Retval: OleVariant): HResult; stdcall;
    function Set_RefersToR1C1Local(Value: OleVariant): HResult; stdcall;
    function Get_RefersToRange(out Retval: Range): HResult; stdcall;
  end;

  IChartObject = interface(IDispatch)
    ['{000208CF-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_ZOrder(out Retval: Integer): HResult; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_Chart(out Retval: Chart): HResult; stdcall;
    function Get_ProtectChartObject(out Retval: WordBool): HResult; stdcall;
    function Set_ProtectChartObject(Value: WordBool): HResult; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
  end;

  IChartObjects = interface(IDispatch)
    ['{000208D0-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: IDispatch): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Placement(out Retval: OleVariant): HResult; stdcall;
    function Set_Placement(Value: OleVariant): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    procedure _Dummy25; stdcall;
    function Get_ShapeRange(out Retval: ShapeRange): HResult; stdcall;
    procedure _Dummy27; stdcall;
    procedure _Dummy28; stdcall;
    procedure _Dummy29; stdcall;
    function Get_RoundedCorners(out Retval: WordBool): HResult; stdcall;
    function Set_RoundedCorners(Value: WordBool): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Add(Left, Top, Width, Height: Double; out Retval: ChartObject): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Group(out Retval: GroupObject): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IMailer = interface(IDispatch)
    ['{000208D1-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_BCCRecipients(out Retval: OleVariant): HResult; stdcall;
    function Set_BCCRecipients(Value: OleVariant): HResult; stdcall;
    function Get_CCRecipients(out Retval: OleVariant): HResult; stdcall;
    function Set_CCRecipients(Value: OleVariant): HResult; stdcall;
    function Get_Enclosures(out Retval: OleVariant): HResult; stdcall;
    function Set_Enclosures(Value: OleVariant): HResult; stdcall;
    function Get_Received(out Retval: WordBool): HResult; stdcall;
    function Get_SendDateTime(out Retval: TDateTime): HResult; stdcall;
    function Get_Sender(out Retval: WideString): HResult; stdcall;
    function Get_Subject(out Retval: WideString): HResult; stdcall;
    function Set_Subject(const Value: WideString): HResult; stdcall;
    function Get_ToRecipients(out Retval: OleVariant): HResult; stdcall;
    function Set_ToRecipients(Value: OleVariant): HResult; stdcall;
    function Get_WhichAddress(out Retval: OleVariant): HResult; stdcall;
    function Set_WhichAddress(Value: OleVariant): HResult; stdcall;
  end;

  ICustomViews = interface(IDispatch)
    ['{00024422-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(ViewName: OleVariant; out Retval: CustomView): HResult; stdcall;
    function Add(const ViewName: WideString; PrintSettings, RowColSettings: OleVariant; out Retval: CustomView): HResult; stdcall;
    function Get__Default(ViewName: OleVariant; out Retval: CustomView): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ICustomView = interface(IDispatch)
    ['{00024423-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Get_PrintSettings(out Retval: WordBool): HResult; stdcall;
    function Get_RowColSettings(out Retval: WordBool): HResult; stdcall;
    function Show: HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IFormatConditions = interface(IDispatch)
    ['{00024424-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: FormatCondition): HResult; stdcall;
    function Add(Type_: XlFormatConditionType; Operator, Formula1, Formula2: OleVariant; out Retval: FormatCondition): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: FormatCondition): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IFormatCondition = interface(IDispatch)
    ['{00024425-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Modify(Type_: XlFormatConditionType; Operator, Formula1, Formula2: OleVariant): HResult; stdcall;
    function Get_Type_(out Retval: Integer): HResult; stdcall;
    function Get_Operator(out Retval: Integer): HResult; stdcall;
    function Get_Formula1(out Retval: WideString): HResult; stdcall;
    function Get_Formula2(out Retval: WideString): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Borders(out Retval: Borders): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IComments = interface(IDispatch)
    ['{00024426-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: Integer; out Retval: Comment): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: Comment): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IComment = interface(IDispatch)
    ['{00024427-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Author(out Retval: WideString): HResult; stdcall;
    function Get_Shape(out Retval: Shape): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Text(Text, Start, Overwrite: OleVariant; out Retval: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Next(out Retval: Comment): HResult; stdcall;
    function Previous(out Retval: Comment): HResult; stdcall;
  end;

  IRefreshEvents = interface(IDispatch)
    ['{0002441B-0001-0000-C000-000000000046}']
    function BeforeRefresh(var Cancel: WordBool): HResult; stdcall;
    function AfterRefresh(Success: WordBool): HResult; stdcall;
  end;

  _IQueryTable = interface(IDispatch)
    ['{00024428-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_FieldNames(out Retval: WordBool): HResult; stdcall;
    function Set_FieldNames(Value: WordBool): HResult; stdcall;
    function Get_RowNumbers(out Retval: WordBool): HResult; stdcall;
    function Set_RowNumbers(Value: WordBool): HResult; stdcall;
    function Get_FillAdjacentFormulas(out Retval: WordBool): HResult; stdcall;
    function Set_FillAdjacentFormulas(Value: WordBool): HResult; stdcall;
    function Get_HasAutoFormat(out Retval: WordBool): HResult; stdcall;
    function Set_HasAutoFormat(Value: WordBool): HResult; stdcall;
    function Get_RefreshOnFileOpen(out Retval: WordBool): HResult; stdcall;
    function Set_RefreshOnFileOpen(Value: WordBool): HResult; stdcall;
    function Get_Refreshing(out Retval: WordBool): HResult; stdcall;
    function Get_FetchedRowOverflow(out Retval: WordBool): HResult; stdcall;
    function Get_BackgroundQuery(out Retval: WordBool): HResult; stdcall;
    function Set_BackgroundQuery(Value: WordBool): HResult; stdcall;
    function CancelRefresh: HResult; stdcall;
    function Get_RefreshStyle(out Retval: XlCellInsertionMode): HResult; stdcall;
    function Set_RefreshStyle(Value: XlCellInsertionMode): HResult; stdcall;
    function Get_EnableRefresh(out Retval: WordBool): HResult; stdcall;
    function Set_EnableRefresh(Value: WordBool): HResult; stdcall;
    function Get_SavePassword(out Retval: WordBool): HResult; stdcall;
    function Set_SavePassword(Value: WordBool): HResult; stdcall;
    function Get_Destination(out Retval: Range): HResult; stdcall;
    function Get_Connection(out Retval: OleVariant): HResult; stdcall;
    function Set_Connection(Value: OleVariant): HResult; stdcall;
    function Get_Sql(out Retval: OleVariant): HResult; stdcall;
    function Set_Sql(Value: OleVariant): HResult; stdcall;
    function Get_PostText(out Retval: WideString): HResult; stdcall;
    function Set_PostText(const Value: WideString): HResult; stdcall;
    function Get_ResultRange(out Retval: Range): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Refresh(BackgroundQuery: OleVariant; out Retval: WordBool): HResult; stdcall;
    function Get_Parameters(out Retval: Parameters): HResult; stdcall;
    function Get_Recordset(out Retval: IDispatch): HResult; stdcall;
    function Set_Recordset(var Value: IDispatch): HResult; stdcall;
    function Get_SaveData(out Retval: WordBool): HResult; stdcall;
    function Set_SaveData(Value: WordBool): HResult; stdcall;
    function Get_TablesOnlyFromHTML(out Retval: WordBool): HResult; stdcall;
    function Set_TablesOnlyFromHTML(Value: WordBool): HResult; stdcall;
    function Get_EnableEditing(out Retval: WordBool): HResult; stdcall;
    function Set_EnableEditing(Value: WordBool): HResult; stdcall;
  end;

  IQueryTables = interface(IDispatch)
    ['{00024429-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Add(Connection: OleVariant; const Destination: Range; Sql: OleVariant; out Retval: QueryTable): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: QueryTable): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: QueryTable): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IParameter = interface(IDispatch)
    ['{0002442A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_DataType(out Retval: XlParameterDataType): HResult; stdcall;
    function Set_DataType(Value: XlParameterDataType): HResult; stdcall;
    function Get_Type_(out Retval: XlParameterType): HResult; stdcall;
    function Get_PromptString(out Retval: WideString): HResult; stdcall;
    function Get_Value(out Retval: OleVariant): HResult; stdcall;
    function Get_SourceRange(out Retval: Range): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function SetParam(Type_: XlParameterType; Value: OleVariant): HResult; stdcall;
  end;

  IParameters = interface(IDispatch)
    ['{0002442B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(const Name: WideString; iDataType: OleVariant; out Retval: Parameter): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Parameter): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: Parameter): HResult; stdcall;
    function Delete: HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IODBCError = interface(IDispatch)
    ['{0002442C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_SqlState(out Retval: WideString): HResult; stdcall;
    function Get_ErrorString(out Retval: WideString): HResult; stdcall;
  end;

  IODBCErrors = interface(IDispatch)
    ['{0002442D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: Integer; out Retval: ODBCError): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: ODBCError): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IValidation = interface(IDispatch)
    ['{0002442F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Type_: XlDVType; AlertStyle, Operator, Formula1, Formula2: OleVariant): HResult; stdcall;
    function Get_AlertStyle(out Retval: Integer): HResult; stdcall;
    function Get_IgnoreBlank(out Retval: WordBool): HResult; stdcall;
    function Set_IgnoreBlank(Value: WordBool): HResult; stdcall;
    function Get_IMEMode(out Retval: Integer): HResult; stdcall;
    function Set_IMEMode(Value: Integer): HResult; stdcall;
    function Get_InCellDropdown(out Retval: WordBool): HResult; stdcall;
    function Set_InCellDropdown(Value: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_ErrorMessage(out Retval: WideString): HResult; stdcall;
    function Set_ErrorMessage(const Value: WideString): HResult; stdcall;
    function Get_ErrorTitle(out Retval: WideString): HResult; stdcall;
    function Set_ErrorTitle(const Value: WideString): HResult; stdcall;
    function Get_InputMessage(out Retval: WideString): HResult; stdcall;
    function Set_InputMessage(const Value: WideString): HResult; stdcall;
    function Get_InputTitle(out Retval: WideString): HResult; stdcall;
    function Set_InputTitle(const Value: WideString): HResult; stdcall;
    function Get_Formula1(out Retval: WideString): HResult; stdcall;
    function Get_Formula2(out Retval: WideString): HResult; stdcall;
    function Modify(Type_, AlertStyle, Operator, Formula1, Formula2: OleVariant): HResult; stdcall;
    function Get_Operator(out Retval: Integer): HResult; stdcall;
    function Get_ShowError(out Retval: WordBool): HResult; stdcall;
    function Set_ShowError(Value: WordBool): HResult; stdcall;
    function Get_ShowInput(out Retval: WordBool): HResult; stdcall;
    function Set_ShowInput(Value: WordBool): HResult; stdcall;
    function Get_Type_(out Retval: Integer): HResult; stdcall;
    function Get_Value(out Retval: WordBool): HResult; stdcall;
  end;

  IHyperlinks = interface(IDispatch)
    ['{00024430-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Anchor: IDispatch; const Address: WideString; SubAddress: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get_Item(Index: OleVariant; out Retval: Hyperlink): HResult; stdcall;
    function Get__Default(Index: OleVariant; out Retval: Hyperlink): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IHyperlink = interface(IDispatch)
    ['{00024431-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Get_Range(out Retval: Range): HResult; stdcall;
    function Get_Shape(out Retval: Shape): HResult; stdcall;
    function Get_SubAddress(out Retval: WideString): HResult; stdcall;
    function Set_SubAddress(const Value: WideString): HResult; stdcall;
    function Get_Address(out Retval: WideString): HResult; stdcall;
    function Set_Address(const Value: WideString): HResult; stdcall;
    function Get_Type_(out Retval: Integer): HResult; stdcall;
    function AddToFavorites: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo: OleVariant): HResult; stdcall;
  end;

  IAutoFilter = interface(IDispatch)
    ['{00024432-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Range(out Retval: Range): HResult; stdcall;
    function Get_Filters(out Retval: Filters): HResult; stdcall;
  end;

  IFilters = interface(IDispatch)
    ['{00024433-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Get__Default(Index: Integer; out Retval: Filter): HResult; stdcall;
    function Get_Item(Index: Integer; out Retval: Filter): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IFilter = interface(IDispatch)
    ['{00024434-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_On_(out Retval: WordBool): HResult; stdcall;
    function Get_Criteria1(out Retval: OleVariant): HResult; stdcall;
    function Get_Operator(out Retval: XlAutoFilterOperator): HResult; stdcall;
    function Get_Criteria2(out Retval: OleVariant): HResult; stdcall;
  end;

  IAutoCorrect = interface(IDispatch)
    ['{000208D4-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function AddReplacement(const What, Replacement: WideString): HResult; stdcall;
    function Get_CapitalizeNamesOfDays(out Retval: WordBool): HResult; stdcall;
    function Set_CapitalizeNamesOfDays(Value: WordBool): HResult; stdcall;
    function DeleteReplacement(const What: WideString): HResult; stdcall;
    function ReplacementList(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_ReplaceText(out Retval: WordBool): HResult; stdcall;
    function Set_ReplaceText(Value: WordBool): HResult; stdcall;
    function Get_TwoInitialCapitals(out Retval: WordBool): HResult; stdcall;
    function Set_TwoInitialCapitals(Value: WordBool): HResult; stdcall;
    function Get_CorrectSentenceCap(out Retval: WordBool): HResult; stdcall;
    function Set_CorrectSentenceCap(Value: WordBool): HResult; stdcall;
    function Get_CorrectCapsLock(out Retval: WordBool): HResult; stdcall;
    function Set_CorrectCapsLock(Value: WordBool): HResult; stdcall;
  end;

  IBorder = interface(IDispatch)
    ['{00020854-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Color(out Retval: OleVariant): HResult; stdcall;
    function Set_Color(Value: OleVariant): HResult; stdcall;
    function Get_ColorIndex(out Retval: OleVariant): HResult; stdcall;
    function Set_ColorIndex(Value: OleVariant): HResult; stdcall;
    function Get_LineStyle(out Retval: OleVariant): HResult; stdcall;
    function Set_LineStyle(Value: OleVariant): HResult; stdcall;
    function Get_Weight(out Retval: OleVariant): HResult; stdcall;
    function Set_Weight(Value: OleVariant): HResult; stdcall;
  end;

  IInterior = interface(IDispatch)
    ['{00020870-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Color(out Retval: OleVariant): HResult; stdcall;
    function Set_Color(Value: OleVariant): HResult; stdcall;
    function Get_ColorIndex(out Retval: OleVariant): HResult; stdcall;
    function Set_ColorIndex(Value: OleVariant): HResult; stdcall;
    function Get_InvertIfNegative(out Retval: OleVariant): HResult; stdcall;
    function Set_InvertIfNegative(Value: OleVariant): HResult; stdcall;
    function Get_Pattern(out Retval: OleVariant): HResult; stdcall;
    function Set_Pattern(Value: OleVariant): HResult; stdcall;
    function Get_PatternColor(out Retval: OleVariant): HResult; stdcall;
    function Set_PatternColor(Value: OleVariant): HResult; stdcall;
    function Get_PatternColorIndex(out Retval: OleVariant): HResult; stdcall;
    function Set_PatternColorIndex(Value: OleVariant): HResult; stdcall;
  end;

  IChartFillFormat = interface(IDispatch)
    ['{00024435-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function OneColorGradient(Style: MsoGradientStyle; Variant: Integer; Degree: Single): HResult; stdcall;
    function TwoColorGradient(Style: MsoGradientStyle; Variant: Integer): HResult; stdcall;
    function PresetTextured(PresetTexture: MsoPresetTexture): HResult; stdcall;
    function Solid: HResult; stdcall;
    function Patterned(Pattern: MsoPatternType): HResult; stdcall;
    function UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement: OleVariant): HResult; stdcall;
    function UserTextured(const TextureFile: WideString): HResult; stdcall;
    function PresetGradient(Style: MsoGradientStyle; Variant: Integer; PresetGradientType: MsoPresetGradientType): HResult; stdcall;
    function Get_BackColor(out Retval: ChartColorFormat): HResult; stdcall;
    function Get_ForeColor(out Retval: ChartColorFormat): HResult; stdcall;
    function Get_GradientColorType(out Retval: MsoGradientColorType): HResult; stdcall;
    function Get_GradientDegree(out Retval: Single): HResult; stdcall;
    function Get_GradientStyle(out Retval: MsoGradientStyle): HResult; stdcall;
    function Get_GradientVariant(out Retval: Integer): HResult; stdcall;
    function Get_Pattern(out Retval: MsoPatternType): HResult; stdcall;
    function Get_PresetGradientType(out Retval: MsoPresetGradientType): HResult; stdcall;
    function Get_PresetTexture(out Retval: MsoPresetTexture): HResult; stdcall;
    function Get_TextureName(out Retval: WideString): HResult; stdcall;
    function Get_TextureType(out Retval: MsoTextureType): HResult; stdcall;
    function Get_Type_(out Retval: MsoFillType): HResult; stdcall;
    function Get_Visible(out Retval: MsoTriState): HResult; stdcall;
    function Set_Visible(Value: MsoTriState): HResult; stdcall;
  end;

  IChartColorFormat = interface(IDispatch)
    ['{00024436-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_SchemeColor(out Retval: Integer): HResult; stdcall;
    function Set_SchemeColor(Value: Integer): HResult; stdcall;
    function Get_RGB(out Retval: Integer): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Get_Type_(out Retval: Integer): HResult; stdcall;
  end;

  IAxis = interface(IDispatch)
    ['{00020848-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_AxisBetweenCategories(out Retval: WordBool): HResult; stdcall;
    function Set_AxisBetweenCategories(Value: WordBool): HResult; stdcall;
    function Get_AxisGroup(out Retval: XlAxisGroup): HResult; stdcall;
    function Get_AxisTitle(out Retval: AxisTitle): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_CategoryNames(out Retval: OleVariant): HResult; stdcall;
    function Set_CategoryNames(Value: OleVariant): HResult; stdcall;
    function Get_Crosses(out Retval: XlAxisCrosses): HResult; stdcall;
    function Set_Crosses(Value: XlAxisCrosses): HResult; stdcall;
    function Get_CrossesAt(out Retval: Double): HResult; stdcall;
    function Set_CrossesAt(Value: Double): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_HasMajorGridlines(out Retval: WordBool): HResult; stdcall;
    function Set_HasMajorGridlines(Value: WordBool): HResult; stdcall;
    function Get_HasMinorGridlines(out Retval: WordBool): HResult; stdcall;
    function Set_HasMinorGridlines(Value: WordBool): HResult; stdcall;
    function Get_HasTitle(out Retval: WordBool): HResult; stdcall;
    function Set_HasTitle(Value: WordBool): HResult; stdcall;
    function Get_MajorGridlines(out Retval: Gridlines): HResult; stdcall;
    function Get_MajorTickMark(out Retval: XlTickMark): HResult; stdcall;
    function Set_MajorTickMark(Value: XlTickMark): HResult; stdcall;
    function Get_MajorUnit(out Retval: Double): HResult; stdcall;
    function Set_MajorUnit(Value: Double): HResult; stdcall;
    function Get_MajorUnitIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_MajorUnitIsAuto(Value: WordBool): HResult; stdcall;
    function Get_MaximumScale(out Retval: Double): HResult; stdcall;
    function Set_MaximumScale(Value: Double): HResult; stdcall;
    function Get_MaximumScaleIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_MaximumScaleIsAuto(Value: WordBool): HResult; stdcall;
    function Get_MinimumScale(out Retval: Double): HResult; stdcall;
    function Set_MinimumScale(Value: Double): HResult; stdcall;
    function Get_MinimumScaleIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_MinimumScaleIsAuto(Value: WordBool): HResult; stdcall;
    function Get_MinorGridlines(out Retval: Gridlines): HResult; stdcall;
    function Get_MinorTickMark(out Retval: XlTickMark): HResult; stdcall;
    function Set_MinorTickMark(Value: XlTickMark): HResult; stdcall;
    function Get_MinorUnit(out Retval: Double): HResult; stdcall;
    function Set_MinorUnit(Value: Double): HResult; stdcall;
    function Get_MinorUnitIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_MinorUnitIsAuto(Value: WordBool): HResult; stdcall;
    function Get_ReversePlotOrder(out Retval: WordBool): HResult; stdcall;
    function Set_ReversePlotOrder(Value: WordBool): HResult; stdcall;
    function Get_ScaleType(out Retval: XlScaleType): HResult; stdcall;
    function Set_ScaleType(Value: XlScaleType): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_TickLabelPosition(out Retval: XlTickLabelPosition): HResult; stdcall;
    function Set_TickLabelPosition(Value: XlTickLabelPosition): HResult; stdcall;
    function Get_TickLabels(out Retval: TickLabels): HResult; stdcall;
    function Get_TickLabelSpacing(out Retval: Integer): HResult; stdcall;
    function Set_TickLabelSpacing(Value: Integer): HResult; stdcall;
    function Get_TickMarkSpacing(out Retval: Integer): HResult; stdcall;
    function Set_TickMarkSpacing(Value: Integer): HResult; stdcall;
    function Get_Type_(out Retval: XlAxisType): HResult; stdcall;
    function Set_Type_(Value: XlAxisType): HResult; stdcall;
    function Get_BaseUnit(out Retval: XlTimeUnit): HResult; stdcall;
    function Set_BaseUnit(Value: XlTimeUnit): HResult; stdcall;
    function Get_BaseUnitIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_BaseUnitIsAuto(Value: WordBool): HResult; stdcall;
    function Get_MajorUnitScale(out Retval: XlTimeUnit): HResult; stdcall;
    function Set_MajorUnitScale(Value: XlTimeUnit): HResult; stdcall;
    function Get_MinorUnitScale(out Retval: XlTimeUnit): HResult; stdcall;
    function Set_MinorUnitScale(Value: XlTimeUnit): HResult; stdcall;
    function Get_CategoryType(out Retval: XlCategoryType): HResult; stdcall;
    function Set_CategoryType(Value: XlCategoryType): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
  end;

  IChartTitle = interface(IDispatch)
    ['{00020849-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
  end;

  IAxisTitle = interface(IDispatch)
    ['{0002084A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
  end;

  IChartGroup = interface(IDispatch)
    ['{00020859-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_AxisGroup(out Retval: XlAxisGroup): HResult; stdcall;
    function Set_AxisGroup(Value: XlAxisGroup): HResult; stdcall;
    function Get_DoughnutHoleSize(out Retval: Integer): HResult; stdcall;
    function Set_DoughnutHoleSize(Value: Integer): HResult; stdcall;
    function Get_DownBars(out Retval: DownBars): HResult; stdcall;
    function Get_DropLines(out Retval: DropLines): HResult; stdcall;
    function Get_FirstSliceAngle(out Retval: Integer): HResult; stdcall;
    function Set_FirstSliceAngle(Value: Integer): HResult; stdcall;
    function Get_GapWidth(out Retval: Integer): HResult; stdcall;
    function Set_GapWidth(Value: Integer): HResult; stdcall;
    function Get_HasDropLines(out Retval: WordBool): HResult; stdcall;
    function Set_HasDropLines(Value: WordBool): HResult; stdcall;
    function Get_HasHiLoLines(out Retval: WordBool): HResult; stdcall;
    function Set_HasHiLoLines(Value: WordBool): HResult; stdcall;
    function Get_HasRadarAxisLabels(out Retval: WordBool): HResult; stdcall;
    function Set_HasRadarAxisLabels(Value: WordBool): HResult; stdcall;
    function Get_HasSeriesLines(out Retval: WordBool): HResult; stdcall;
    function Set_HasSeriesLines(Value: WordBool): HResult; stdcall;
    function Get_HasUpDownBars(out Retval: WordBool): HResult; stdcall;
    function Set_HasUpDownBars(Value: WordBool): HResult; stdcall;
    function Get_HiLoLines(out Retval: HiLoLines): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Overlap(out Retval: Integer): HResult; stdcall;
    function Set_Overlap(Value: Integer): HResult; stdcall;
    function Get_RadarAxisLabels(out Retval: TickLabels): HResult; stdcall;
    function SeriesCollection(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_SeriesLines(out Retval: SeriesLines): HResult; stdcall;
    function Get_SubType(out Retval: Integer): HResult; stdcall;
    function Set_SubType(Value: Integer): HResult; stdcall;
    function Get_Type_(out Retval: Integer): HResult; stdcall;
    function Set_Type_(Value: Integer): HResult; stdcall;
    function Get_UpBars(out Retval: UpBars): HResult; stdcall;
    function Get_VaryByCategories(out Retval: WordBool): HResult; stdcall;
    function Set_VaryByCategories(Value: WordBool): HResult; stdcall;
    function Get_SizeRepresents(out Retval: XlSizeRepresents): HResult; stdcall;
    function Set_SizeRepresents(Value: XlSizeRepresents): HResult; stdcall;
    function Get_BubbleScale(out Retval: Integer): HResult; stdcall;
    function Set_BubbleScale(Value: Integer): HResult; stdcall;
    function Get_ShowNegativeBubbles(out Retval: WordBool): HResult; stdcall;
    function Set_ShowNegativeBubbles(Value: WordBool): HResult; stdcall;
    function Get_SplitType(out Retval: XlChartSplitType): HResult; stdcall;
    function Set_SplitType(Value: XlChartSplitType): HResult; stdcall;
    function Get_SplitValue(out Retval: OleVariant): HResult; stdcall;
    function Set_SplitValue(Value: OleVariant): HResult; stdcall;
    function Get_SecondPlotSize(out Retval: Integer): HResult; stdcall;
    function Set_SecondPlotSize(Value: Integer): HResult; stdcall;
    function Get_Has3DShading(out Retval: WordBool): HResult; stdcall;
    function Set_Has3DShading(Value: WordBool): HResult; stdcall;
  end;

  IChartGroups = interface(IDispatch)
    ['{0002085A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: ChartGroup): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IAxes = interface(IDispatch)
    ['{0002085B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Type_: XlAxisType; AxisGroup: XlAxisGroup; out Retval: Axis): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPoints = interface(IDispatch)
    ['{00020869-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: Integer; out Retval: Point): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  IPoint = interface(IDispatch)
    ['{0002086A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function ApplyDataLabels(Type_: XlDataLabelsType; LegendKey, AutoText: OleVariant): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Copy: HResult; stdcall;
    function Get_DataLabel(out Retval: DataLabel): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Explosion(out Retval: Integer): HResult; stdcall;
    function Set_Explosion(Value: Integer): HResult; stdcall;
    function Get_HasDataLabel(out Retval: WordBool): HResult; stdcall;
    function Set_HasDataLabel(Value: WordBool): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_InvertIfNegative(out Retval: WordBool): HResult; stdcall;
    function Set_InvertIfNegative(Value: WordBool): HResult; stdcall;
    function Get_MarkerBackgroundColor(out Retval: Integer): HResult; stdcall;
    function Set_MarkerBackgroundColor(Value: Integer): HResult; stdcall;
    function Get_MarkerBackgroundColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_MarkerBackgroundColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_MarkerForegroundColor(out Retval: Integer): HResult; stdcall;
    function Set_MarkerForegroundColor(Value: Integer): HResult; stdcall;
    function Get_MarkerForegroundColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_MarkerForegroundColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_MarkerSize(out Retval: Integer): HResult; stdcall;
    function Set_MarkerSize(Value: Integer): HResult; stdcall;
    function Get_MarkerStyle(out Retval: XlMarkerStyle): HResult; stdcall;
    function Set_MarkerStyle(Value: XlMarkerStyle): HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_PictureType(out Retval: XlChartPictureType): HResult; stdcall;
    function Set_PictureType(Value: XlChartPictureType): HResult; stdcall;
    function Get_PictureUnit(out Retval: Integer): HResult; stdcall;
    function Set_PictureUnit(Value: Integer): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_ApplyPictToSides(out Retval: WordBool): HResult; stdcall;
    function Set_ApplyPictToSides(Value: WordBool): HResult; stdcall;
    function Get_ApplyPictToFront(out Retval: WordBool): HResult; stdcall;
    function Set_ApplyPictToFront(Value: WordBool): HResult; stdcall;
    function Get_ApplyPictToEnd(out Retval: WordBool): HResult; stdcall;
    function Set_ApplyPictToEnd(Value: WordBool): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_SecondaryPlot(out Retval: WordBool): HResult; stdcall;
    function Set_SecondaryPlot(Value: WordBool): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
  end;

  ISeries = interface(IDispatch)
    ['{0002086B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function ApplyDataLabels(Type_: XlDataLabelsType; LegendKey, AutoText, HasLeaderLines: OleVariant): HResult; stdcall;
    function Get_AxisGroup(out Retval: XlAxisGroup): HResult; stdcall;
    function Set_AxisGroup(Value: XlAxisGroup): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Copy: HResult; stdcall;
    function DataLabels(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Delete: HResult; stdcall;
    function ErrorBar(Direction: XlErrorBarDirection; Include: XlErrorBarInclude; Type_: XlErrorBarType; Amount, MinusValues: OleVariant): HResult; stdcall;
    function Get_ErrorBars(out Retval: ErrorBars): HResult; stdcall;
    function Get_Explosion(out Retval: Integer): HResult; stdcall;
    function Set_Explosion(Value: Integer): HResult; stdcall;
    function Get_Formula(out Retval: WideString): HResult; stdcall;
    function Set_Formula(const Value: WideString): HResult; stdcall;
    function Get_FormulaLocal(out Retval: WideString): HResult; stdcall;
    function Set_FormulaLocal(const Value: WideString): HResult; stdcall;
    function Get_FormulaR1C1(out Retval: WideString): HResult; stdcall;
    function Set_FormulaR1C1(const Value: WideString): HResult; stdcall;
    function Get_FormulaR1C1Local(out Retval: WideString): HResult; stdcall;
    function Set_FormulaR1C1Local(const Value: WideString): HResult; stdcall;
    function Get_HasDataLabels(out Retval: WordBool): HResult; stdcall;
    function Set_HasDataLabels(Value: WordBool): HResult; stdcall;
    function Get_HasErrorBars(out Retval: WordBool): HResult; stdcall;
    function Set_HasErrorBars(Value: WordBool): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_InvertIfNegative(out Retval: WordBool): HResult; stdcall;
    function Set_InvertIfNegative(Value: WordBool): HResult; stdcall;
    function Get_MarkerBackgroundColor(out Retval: Integer): HResult; stdcall;
    function Set_MarkerBackgroundColor(Value: Integer): HResult; stdcall;
    function Get_MarkerBackgroundColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_MarkerBackgroundColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_MarkerForegroundColor(out Retval: Integer): HResult; stdcall;
    function Set_MarkerForegroundColor(Value: Integer): HResult; stdcall;
    function Get_MarkerForegroundColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_MarkerForegroundColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_MarkerSize(out Retval: Integer): HResult; stdcall;
    function Set_MarkerSize(Value: Integer): HResult; stdcall;
    function Get_MarkerStyle(out Retval: XlMarkerStyle): HResult; stdcall;
    function Set_MarkerStyle(Value: XlMarkerStyle): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_PictureType(out Retval: XlChartPictureType): HResult; stdcall;
    function Set_PictureType(Value: XlChartPictureType): HResult; stdcall;
    function Get_PictureUnit(out Retval: Integer): HResult; stdcall;
    function Set_PictureUnit(Value: Integer): HResult; stdcall;
    function Get_PlotOrder(out Retval: Integer): HResult; stdcall;
    function Set_PlotOrder(Value: Integer): HResult; stdcall;
    function Points(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Smooth(out Retval: WordBool): HResult; stdcall;
    function Set_Smooth(Value: WordBool): HResult; stdcall;
    function Trendlines(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_Type_(out Retval: Integer): HResult; stdcall;
    function Set_Type_(Value: Integer): HResult; stdcall;
    function Get_ChartType(out Retval: XlChartType): HResult; stdcall;
    function Set_ChartType(Value: XlChartType): HResult; stdcall;
    function ApplyCustomType(ChartType: XlChartType): HResult; stdcall;
    function Get_Values(out Retval: OleVariant): HResult; stdcall;
    function Set_Values(Value: OleVariant): HResult; stdcall;
    function Get_XValues(out Retval: OleVariant): HResult; stdcall;
    function Set_XValues(Value: OleVariant): HResult; stdcall;
    function Get_BubbleSizes(out Retval: OleVariant): HResult; stdcall;
    function Set_BubbleSizes(Value: OleVariant): HResult; stdcall;
    function Get_BarShape(out Retval: XlBarShape): HResult; stdcall;
    function Set_BarShape(Value: XlBarShape): HResult; stdcall;
    function Get_ApplyPictToSides(out Retval: WordBool): HResult; stdcall;
    function Set_ApplyPictToSides(Value: WordBool): HResult; stdcall;
    function Get_ApplyPictToFront(out Retval: WordBool): HResult; stdcall;
    function Set_ApplyPictToFront(Value: WordBool): HResult; stdcall;
    function Get_ApplyPictToEnd(out Retval: WordBool): HResult; stdcall;
    function Set_ApplyPictToEnd(Value: WordBool): HResult; stdcall;
    function Get_Has3DEffect(out Retval: WordBool): HResult; stdcall;
    function Set_Has3DEffect(Value: WordBool): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_HasLeaderLines(out Retval: WordBool): HResult; stdcall;
    function Set_HasLeaderLines(Value: WordBool): HResult; stdcall;
    function Get_LeaderLines(out Retval: LeaderLines): HResult; stdcall;
  end;

  ISeriesCollection = interface(IDispatch)
    ['{0002086C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Source: OleVariant; Rowcol: XlRowCol; SeriesLabels, CategoryLabels, Replace: OleVariant; out Retval: Series): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Extend(Source, Rowcol, CategoryLabels: OleVariant): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Series): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Paste(Rowcol: XlRowCol; SeriesLabels, CategoryLabels, Replace, NewSeries: OleVariant): HResult; stdcall;
    function NewSeries(out Retval: Series): HResult; stdcall;
  end;

  IDataLabel = interface(IDispatch)
    ['{000208B2-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_Caption(out Retval: WideString): HResult; stdcall;
    function Set_Caption(const Value: WideString): HResult; stdcall;
    function Get_Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoText(out Retval: WordBool): HResult; stdcall;
    function Set_AutoText(Value: WordBool): HResult; stdcall;
    function Get_NumberFormat(out Retval: WideString): HResult; stdcall;
    function Set_NumberFormat(const Value: WideString): HResult; stdcall;
    function Get_NumberFormatLinked(out Retval: WordBool): HResult; stdcall;
    function Set_NumberFormatLinked(Value: WordBool): HResult; stdcall;
    function Get_ShowLegendKey(out Retval: WordBool): HResult; stdcall;
    function Set_ShowLegendKey(Value: WordBool): HResult; stdcall;
    function Get_Type_(out Retval: OleVariant): HResult; stdcall;
    function Set_Type_(Value: OleVariant): HResult; stdcall;
    function Get_Position(out Retval: XlDataLabelPosition): HResult; stdcall;
    function Set_Position(Value: XlDataLabelPosition): HResult; stdcall;
  end;

  IDataLabels = interface(IDispatch)
    ['{000208B3-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    procedure _Dummy9; stdcall;
    procedure _Dummy10; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_HorizontalAlignment(Value: OleVariant): HResult; stdcall;
    procedure _Dummy13; stdcall;
    function Get_Orientation(out Retval: OleVariant): HResult; stdcall;
    function Set_Orientation(Value: OleVariant): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    procedure _Dummy16; stdcall;
    procedure _Dummy17; stdcall;
    function Get_VerticalAlignment(out Retval: OleVariant): HResult; stdcall;
    function Set_VerticalAlignment(Value: OleVariant): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_AutoText(out Retval: WordBool): HResult; stdcall;
    function Set_AutoText(Value: WordBool): HResult; stdcall;
    function Get_NumberFormat(out Retval: WideString): HResult; stdcall;
    function Set_NumberFormat(const Value: WideString): HResult; stdcall;
    function Get_NumberFormatLinked(out Retval: WordBool): HResult; stdcall;
    function Set_NumberFormatLinked(Value: WordBool): HResult; stdcall;
    function Get_ShowLegendKey(out Retval: WordBool): HResult; stdcall;
    function Set_ShowLegendKey(Value: WordBool): HResult; stdcall;
    function Get_Type_(out Retval: OleVariant): HResult; stdcall;
    function Set_Type_(Value: OleVariant): HResult; stdcall;
    function Get_Position(out Retval: XlDataLabelPosition): HResult; stdcall;
    function Set_Position(Value: XlDataLabelPosition): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: DataLabel): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ILegendEntry = interface(IDispatch)
    ['{000208BA-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_LegendKey(out Retval: LegendKey): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
  end;

  ILegendEntries = interface(IDispatch)
    ['{000208BB-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: LegendEntry): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ILegendKey = interface(IDispatch)
    ['{000208BC-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_InvertIfNegative(out Retval: WordBool): HResult; stdcall;
    function Set_InvertIfNegative(Value: WordBool): HResult; stdcall;
    function Get_MarkerBackgroundColor(out Retval: Integer): HResult; stdcall;
    function Set_MarkerBackgroundColor(Value: Integer): HResult; stdcall;
    function Get_MarkerBackgroundColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_MarkerBackgroundColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_MarkerForegroundColor(out Retval: Integer): HResult; stdcall;
    function Set_MarkerForegroundColor(Value: Integer): HResult; stdcall;
    function Get_MarkerForegroundColorIndex(out Retval: XlColorIndex): HResult; stdcall;
    function Set_MarkerForegroundColorIndex(Value: XlColorIndex): HResult; stdcall;
    function Get_MarkerSize(out Retval: Integer): HResult; stdcall;
    function Set_MarkerSize(Value: Integer): HResult; stdcall;
    function Get_MarkerStyle(out Retval: XlMarkerStyle): HResult; stdcall;
    function Set_MarkerStyle(Value: XlMarkerStyle): HResult; stdcall;
    function Get_PictureType(out Retval: Integer): HResult; stdcall;
    function Set_PictureType(Value: Integer): HResult; stdcall;
    function Get_PictureUnit(out Retval: Integer): HResult; stdcall;
    function Set_PictureUnit(Value: Integer): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Smooth(out Retval: WordBool): HResult; stdcall;
    function Set_Smooth(Value: WordBool): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
  end;

  ITrendlines = interface(IDispatch)
    ['{000208BD-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Add(Type_: XlTrendlineType; Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name: OleVariant; out Retval: Trendline): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Trendline): HResult; stdcall;
    function _NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ITrendline = interface(IDispatch)
    ['{000208BE-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Backward(out Retval: Integer): HResult; stdcall;
    function Set_Backward(Value: Integer): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_DataLabel(out Retval: DataLabel): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_DisplayEquation(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayEquation(Value: WordBool): HResult; stdcall;
    function Get_DisplayRSquared(out Retval: WordBool): HResult; stdcall;
    function Set_DisplayRSquared(Value: WordBool): HResult; stdcall;
    function Get_Forward(out Retval: Integer): HResult; stdcall;
    function Set_Forward(Value: Integer): HResult; stdcall;
    function Get_Index(out Retval: Integer): HResult; stdcall;
    function Get_Intercept(out Retval: Double): HResult; stdcall;
    function Set_Intercept(Value: Double): HResult; stdcall;
    function Get_InterceptIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_InterceptIsAuto(Value: WordBool): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_NameIsAuto(out Retval: WordBool): HResult; stdcall;
    function Set_NameIsAuto(Value: WordBool): HResult; stdcall;
    function Get_Order(out Retval: Integer): HResult; stdcall;
    function Set_Order(Value: Integer): HResult; stdcall;
    function Get_Period(out Retval: Integer): HResult; stdcall;
    function Set_Period(Value: Integer): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Type_(out Retval: XlTrendlineType): HResult; stdcall;
    function Set_Type_(Value: XlTrendlineType): HResult; stdcall;
  end;

  ICorners = interface(IDispatch)
    ['{000208C0-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
  end;

  ISeriesLines = interface(IDispatch)
    ['{000208C1-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IHiLoLines = interface(IDispatch)
    ['{000208C2-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IGridlines = interface(IDispatch)
    ['{000208C3-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  IDropLines = interface(IDispatch)
    ['{000208C4-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

  ILeaderLines = interface(IDispatch)
    ['{00024437-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Select: HResult; stdcall;
  end;

  IUpBars = interface(IDispatch)
    ['{000208C5-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
  end;

  IDownBars = interface(IDispatch)
    ['{000208C6-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
  end;

  IFloor = interface(IDispatch)
    ['{000208C7-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_PictureType(out Retval: OleVariant): HResult; stdcall;
    function Set_PictureType(Value: OleVariant): HResult; stdcall;
    function Paste: HResult; stdcall;
  end;

  IWalls = interface(IDispatch)
    ['{000208C8-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_PictureType(out Retval: OleVariant): HResult; stdcall;
    function Set_PictureType(Value: OleVariant): HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_PictureUnit(out Retval: OleVariant): HResult; stdcall;
    function Set_PictureUnit(Value: OleVariant): HResult; stdcall;
  end;

  ITickLabels = interface(IDispatch)
    ['{000208C9-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Get_NumberFormat(out Retval: WideString): HResult; stdcall;
    function Set_NumberFormat(const Value: WideString): HResult; stdcall;
    function Get_NumberFormatLinked(out Retval: WordBool): HResult; stdcall;
    function Set_NumberFormatLinked(Value: WordBool): HResult; stdcall;
    function Get_Orientation(out Retval: XlTickLabelOrientation): HResult; stdcall;
    function Set_Orientation(Value: XlTickLabelOrientation): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
  end;

  IPlotArea = interface(IDispatch)
    ['{000208CB-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_InsideLeft(out Retval: Double): HResult; stdcall;
    function Get_InsideTop(out Retval: Double): HResult; stdcall;
    function Get_InsideWidth(out Retval: Double): HResult; stdcall;
    function Get_InsideHeight(out Retval: Double): HResult; stdcall;
  end;

  IChartArea = interface(IDispatch)
    ['{000208CC-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Clear: HResult; stdcall;
    function ClearContents: HResult; stdcall;
    function Copy: HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
  end;

  ILegend = interface(IDispatch)
    ['{000208CD-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function LegendEntries(Index: OleVariant; out Retval: IDispatch): HResult; stdcall;
    function Get_Position(out Retval: XlLegendPosition): HResult; stdcall;
    function Set_Position(Value: XlLegendPosition): HResult; stdcall;
    function Get_Shadow(out Retval: WordBool): HResult; stdcall;
    function Set_Shadow(Value: WordBool): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Get_Height(out Retval: Double): HResult; stdcall;
    function Set_Height(Value: Double): HResult; stdcall;
    function Get_Interior(out Retval: Interior): HResult; stdcall;
    function Get_Fill(out Retval: ChartFillFormat): HResult; stdcall;
    function Get_Left(out Retval: Double): HResult; stdcall;
    function Set_Left(Value: Double): HResult; stdcall;
    function Get_Top(out Retval: Double): HResult; stdcall;
    function Set_Top(Value: Double): HResult; stdcall;
    function Get_Width(out Retval: Double): HResult; stdcall;
    function Set_Width(Value: Double): HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
  end;

  IErrorBars = interface(IDispatch)
    ['{000208CE-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Delete: HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_EndStyle(out Retval: XlEndStyleCap): HResult; stdcall;
    function Set_EndStyle(Value: XlEndStyleCap): HResult; stdcall;
  end;

  IDataTable = interface(IDispatch)
    ['{00020843-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_ShowLegendKey(out Retval: WordBool): HResult; stdcall;
    function Set_ShowLegendKey(Value: WordBool): HResult; stdcall;
    function Get_HasBorderHorizontal(out Retval: WordBool): HResult; stdcall;
    function Set_HasBorderHorizontal(Value: WordBool): HResult; stdcall;
    function Get_HasBorderVertical(out Retval: WordBool): HResult; stdcall;
    function Set_HasBorderVertical(Value: WordBool): HResult; stdcall;
    function Get_HasBorderOutline(out Retval: WordBool): HResult; stdcall;
    function Set_HasBorderOutline(Value: WordBool): HResult; stdcall;
    function Get_Border(out Retval: Border): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Select: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_AutoScaleFont(out Retval: OleVariant): HResult; stdcall;
    function Set_AutoScaleFont(Value: OleVariant): HResult; stdcall;
  end;

  IPhonetic = interface(IDispatch)
    ['{00024438-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Visible(out Retval: WordBool): HResult; stdcall;
    function Set_Visible(Value: WordBool): HResult; stdcall;
    function Get_CharacterType(out Retval: Integer): HResult; stdcall;
    function Set_CharacterType(Value: Integer): HResult; stdcall;
    function Get_Alignment(out Retval: Integer): HResult; stdcall;
    function Set_Alignment(Value: Integer): HResult; stdcall;
    function Get_Font(out Retval: Font): HResult; stdcall;
    function Get_Text(out Retval: WideString): HResult; stdcall;
    function Set_Text(const Value: WideString): HResult; stdcall;
  end;

  IShape = interface(IDispatch)
    ['{00024439-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Apply: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate(out Retval: Shape): HResult; stdcall;
    function Flip(FlipCmd: MsoFlipCmd): HResult; stdcall;
    function IncrementLeft(Increment: Single): HResult; stdcall;
    function IncrementRotation(Increment: Single): HResult; stdcall;
    function IncrementTop(Increment: Single): HResult; stdcall;
    function PickUp: HResult; stdcall;
    function RerouteConnections: HResult; stdcall;
    function ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SetShapesDefaultProperties: HResult; stdcall;
    function Ungroup(out Retval: ShapeRange): HResult; stdcall;
    function ZOrder(ZOrderCmd: MsoZOrderCmd): HResult; stdcall;
    function Get_Adjustments(out Retval: Adjustments): HResult; stdcall;
    function Get_TextFrame(out Retval: TextFrame): HResult; stdcall;
    function Get_AutoShapeType(out Retval: MsoAutoShapeType): HResult; stdcall;
    function Set_AutoShapeType(Value: MsoAutoShapeType): HResult; stdcall;
    function Get_Callout(out Retval: CalloutFormat): HResult; stdcall;
    function Get_ConnectionSiteCount(out Retval: Integer): HResult; stdcall;
    function Get_Connector(out Retval: MsoTriState): HResult; stdcall;
    function Get_ConnectorFormat(out Retval: ConnectorFormat): HResult; stdcall;
    function Get_Fill(out Retval: FillFormat): HResult; stdcall;
    function Get_GroupItems(out Retval: GroupShapes): HResult; stdcall;
    function Get_Height(out Retval: Single): HResult; stdcall;
    function Set_Height(Value: Single): HResult; stdcall;
    function Get_HorizontalFlip(out Retval: MsoTriState): HResult; stdcall;
    function Get_Left(out Retval: Single): HResult; stdcall;
    function Set_Left(Value: Single): HResult; stdcall;
    function Get_Line(out Retval: LineFormat): HResult; stdcall;
    function Get_LockAspectRatio(out Retval: MsoTriState): HResult; stdcall;
    function Set_LockAspectRatio(Value: MsoTriState): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_Nodes(out Retval: ShapeNodes): HResult; stdcall;
    function Get_Rotation(out Retval: Single): HResult; stdcall;
    function Set_Rotation(Value: Single): HResult; stdcall;
    function Get_PictureFormat(out Retval: PictureFormat): HResult; stdcall;
    function Get_Shadow(out Retval: ShadowFormat): HResult; stdcall;
    function Get_TextEffect(out Retval: TextEffectFormat): HResult; stdcall;
    function Get_ThreeD(out Retval: ThreeDFormat): HResult; stdcall;
    function Get_Top(out Retval: Single): HResult; stdcall;
    function Set_Top(Value: Single): HResult; stdcall;
    function Get_Type_(out Retval: MsoShapeType): HResult; stdcall;
    function Get_VerticalFlip(out Retval: MsoTriState): HResult; stdcall;
    function Get_Vertices(out Retval: OleVariant): HResult; stdcall;
    function Get_Visible(out Retval: MsoTriState): HResult; stdcall;
    function Set_Visible(Value: MsoTriState): HResult; stdcall;
    function Get_Width(out Retval: Single): HResult; stdcall;
    function Set_Width(Value: Single): HResult; stdcall;
    function Get_ZOrderPosition(out Retval: Integer): HResult; stdcall;
    function Get_Hyperlink(out Retval: Hyperlink): HResult; stdcall;
    function Get_BlackWhiteMode(out Retval: MsoBlackWhiteMode): HResult; stdcall;
    function Set_BlackWhiteMode(Value: MsoBlackWhiteMode): HResult; stdcall;
    function Get_DrawingObject(out Retval: IDispatch): HResult; stdcall;
    function Get_OnAction(out Retval: WideString): HResult; stdcall;
    function Set_OnAction(const Value: WideString): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Get_TopLeftCell(out Retval: Range): HResult; stdcall;
    function Get_BottomRightCell(out Retval: Range): HResult; stdcall;
    function Get_Placement(out Retval: XlPlacement): HResult; stdcall;
    function Set_Placement(Value: XlPlacement): HResult; stdcall;
    function Copy: HResult; stdcall;
    function Cut: HResult; stdcall;
    function CopyPicture(Appearance, Format: OleVariant): HResult; stdcall;
    function Get_ControlFormat(out Retval: ControlFormat): HResult; stdcall;
    function Get_LinkFormat(out Retval: LinkFormat): HResult; stdcall;
    function Get_OLEFormat(out Retval: OLEFormat): HResult; stdcall;
    function Get_FormControlType(out Retval: XlFormControl): HResult; stdcall;
  end;

  IShapes = interface(IDispatch)
    ['{0002443A-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Shape): HResult; stdcall;
    function _Default(Index: OleVariant; out Retval: Shape): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function AddCallout(Type_: MsoCalloutType; Left, Top, Width, Height: Single; out Retval: Shape): HResult; stdcall;
    function AddConnector(Type_: MsoConnectorType; BeginX, BeginY, EndX, EndY: Single; out Retval: Shape): HResult; stdcall;
    function AddCurve(SafeArrayOfPoints: OleVariant; out Retval: Shape): HResult; stdcall;
    function AddLabel(Orientation: MsoTextOrientation; Left, Top, Width, Height: Single; out Retval: Shape): HResult; stdcall;
    function AddLine(BeginX, BeginY, EndX, EndY: Single; out Retval: Shape): HResult; stdcall;
    function AddPicture(const Filename: WideString; LinkToFile, SaveWithDocument: MsoTriState; Left, Top, Width, Height: Single; out Retval: Shape): HResult; stdcall;
    function AddPolyline(SafeArrayOfPoints: OleVariant; out Retval: Shape): HResult; stdcall;
    function AddShape(Type_: MsoAutoShapeType; Left, Top, Width, Height: Single; out Retval: Shape): HResult; stdcall;
    function AddTextEffect(PresetTextEffect: MsoPresetTextEffect; const Text, FontName: WideString; FontSize: Single; FontBold, FontItalic: MsoTriState; Left, Top: Single; out Retval: Shape): HResult; stdcall;
    function AddTextbox(Orientation: MsoTextOrientation; Left, Top, Width, Height: Single; out Retval: Shape): HResult; stdcall;
    function BuildFreeform(EditingType: MsoEditingType; X1, Y1: Single; out Retval: FreeformBuilder): HResult; stdcall;
    function Get_Range(Index: OleVariant; out Retval: ShapeRange): HResult; stdcall;
    function SelectAll: HResult; stdcall;
    function AddFormControl(Type_: XlFormControl; Left, Top, Width, Height: Integer; out Retval: Shape): HResult; stdcall;
    function AddOLEObject(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height: OleVariant; out Retval: Shape): HResult; stdcall;
  end;

  IShapeRange = interface(IDispatch)
    ['{0002443B-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Shape): HResult; stdcall;
    function _Default(Index: OleVariant; out Retval: Shape): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
    function Align(AlignCmd: MsoAlignCmd; RelativeTo: MsoTriState): HResult; stdcall;
    function Apply: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Distribute(DistributeCmd: MsoDistributeCmd; RelativeTo: MsoTriState): HResult; stdcall;
    function Duplicate(out Retval: ShapeRange): HResult; stdcall;
    function Flip(FlipCmd: MsoFlipCmd): HResult; stdcall;
    function IncrementLeft(Increment: Single): HResult; stdcall;
    function IncrementRotation(Increment: Single): HResult; stdcall;
    function IncrementTop(Increment: Single): HResult; stdcall;
    function Group(out Retval: Shape): HResult; stdcall;
    function PickUp: HResult; stdcall;
    function RerouteConnections: HResult; stdcall;
    function Regroup(out Retval: Shape): HResult; stdcall;
    function ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SetShapesDefaultProperties: HResult; stdcall;
    function Ungroup(out Retval: ShapeRange): HResult; stdcall;
    function ZOrder(ZOrderCmd: MsoZOrderCmd): HResult; stdcall;
    function Get_Adjustments(out Retval: Adjustments): HResult; stdcall;
    function Get_TextFrame(out Retval: TextFrame): HResult; stdcall;
    function Get_AutoShapeType(out Retval: MsoAutoShapeType): HResult; stdcall;
    function Set_AutoShapeType(Value: MsoAutoShapeType): HResult; stdcall;
    function Get_Callout(out Retval: CalloutFormat): HResult; stdcall;
    function Get_ConnectionSiteCount(out Retval: Integer): HResult; stdcall;
    function Get_Connector(out Retval: MsoTriState): HResult; stdcall;
    function Get_ConnectorFormat(out Retval: ConnectorFormat): HResult; stdcall;
    function Get_Fill(out Retval: FillFormat): HResult; stdcall;
    function Get_GroupItems(out Retval: GroupShapes): HResult; stdcall;
    function Get_Height(out Retval: Single): HResult; stdcall;
    function Set_Height(Value: Single): HResult; stdcall;
    function Get_HorizontalFlip(out Retval: MsoTriState): HResult; stdcall;
    function Get_Left(out Retval: Single): HResult; stdcall;
    function Set_Left(Value: Single): HResult; stdcall;
    function Get_Line(out Retval: LineFormat): HResult; stdcall;
    function Get_LockAspectRatio(out Retval: MsoTriState): HResult; stdcall;
    function Set_LockAspectRatio(Value: MsoTriState): HResult; stdcall;
    function Get_Name(out Retval: WideString): HResult; stdcall;
    function Set_Name(const Value: WideString): HResult; stdcall;
    function Get_Nodes(out Retval: ShapeNodes): HResult; stdcall;
    function Get_Rotation(out Retval: Single): HResult; stdcall;
    function Set_Rotation(Value: Single): HResult; stdcall;
    function Get_PictureFormat(out Retval: PictureFormat): HResult; stdcall;
    function Get_Shadow(out Retval: ShadowFormat): HResult; stdcall;
    function Get_TextEffect(out Retval: TextEffectFormat): HResult; stdcall;
    function Get_ThreeD(out Retval: ThreeDFormat): HResult; stdcall;
    function Get_Top(out Retval: Single): HResult; stdcall;
    function Set_Top(Value: Single): HResult; stdcall;
    function Get_Type_(out Retval: MsoShapeType): HResult; stdcall;
    function Get_VerticalFlip(out Retval: MsoTriState): HResult; stdcall;
    function Get_Vertices(out Retval: OleVariant): HResult; stdcall;
    function Get_Visible(out Retval: MsoTriState): HResult; stdcall;
    function Set_Visible(Value: MsoTriState): HResult; stdcall;
    function Get_Width(out Retval: Single): HResult; stdcall;
    function Set_Width(Value: Single): HResult; stdcall;
    function Get_ZOrderPosition(out Retval: Integer): HResult; stdcall;
    function Get_BlackWhiteMode(out Retval: MsoBlackWhiteMode): HResult; stdcall;
    function Set_BlackWhiteMode(Value: MsoBlackWhiteMode): HResult; stdcall;
  end;

  IGroupShapes = interface(IDispatch)
    ['{0002443C-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_Count(out Retval: Integer): HResult; stdcall;
    function Item(Index: OleVariant; out Retval: Shape): HResult; stdcall;
    function _Default(Index: OleVariant; out Retval: Shape): HResult; stdcall;
    function Get__NewEnum(out Retval: IUnknown): HResult; stdcall;
  end;

  ITextFrame = interface(IDispatch)
    ['{0002443D-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_MarginBottom(out Retval: Single): HResult; stdcall;
    function Set_MarginBottom(Value: Single): HResult; stdcall;
    function Get_MarginLeft(out Retval: Single): HResult; stdcall;
    function Set_MarginLeft(Value: Single): HResult; stdcall;
    function Get_MarginRight(out Retval: Single): HResult; stdcall;
    function Set_MarginRight(Value: Single): HResult; stdcall;
    function Get_MarginTop(out Retval: Single): HResult; stdcall;
    function Set_MarginTop(Value: Single): HResult; stdcall;
    function Get_Orientation(out Retval: MsoTextOrientation): HResult; stdcall;
    function Set_Orientation(Value: MsoTextOrientation): HResult; stdcall;
    function Characters(Start, Length: OleVariant; out Retval: Characters): HResult; stdcall;
    function Get_HorizontalAlignment(out Retval: XlHAlign): HResult; stdcall;
    function Set_HorizontalAlignment(Value: XlHAlign): HResult; stdcall;
    function Get_VerticalAlignment(out Retval: XlVAlign): HResult; stdcall;
    function Set_VerticalAlignment(Value: XlVAlign): HResult; stdcall;
    function Get_AutoSize(out Retval: WordBool): HResult; stdcall;
    function Set_AutoSize(Value: WordBool): HResult; stdcall;
    function Get_ReadingOrder(out Retval: Integer): HResult; stdcall;
    function Set_ReadingOrder(Value: Integer): HResult; stdcall;
    function Get_AutoMargins(out Retval: WordBool): HResult; stdcall;
    function Set_AutoMargins(Value: WordBool): HResult; stdcall;
  end;

  IConnectorFormat = interface(IDispatch)
    ['{0002443E-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function BeginConnect(const ConnectedShape: Shape; ConnectionSite: Integer): HResult; stdcall;
    function BeginDisconnect: HResult; stdcall;
    function EndConnect(const ConnectedShape: Shape; ConnectionSite: Integer): HResult; stdcall;
    function EndDisconnect: HResult; stdcall;
    function Get_BeginConnected(out Retval: MsoTriState): HResult; stdcall;
    function Get_BeginConnectedShape(out Retval: Shape): HResult; stdcall;
    function Get_BeginConnectionSite(out Retval: Integer): HResult; stdcall;
    function Get_EndConnected(out Retval: MsoTriState): HResult; stdcall;
    function Get_EndConnectedShape(out Retval: Shape): HResult; stdcall;
    function Get_EndConnectionSite(out Retval: Integer): HResult; stdcall;
    function Get_Type_(out Retval: MsoConnectorType): HResult; stdcall;
    function Set_Type_(Value: MsoConnectorType): HResult; stdcall;
  end;

  IFreeformBuilder = interface(IDispatch)
    ['{0002443F-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function AddNodes(SegmentType: MsoSegmentType; EditingType: MsoEditingType; X1, Y1: Single; X2, Y2, X3, Y3: OleVariant): HResult; stdcall;
    function ConvertToShape(out Retval: Shape): HResult; stdcall;
  end;

  IControlFormat = interface(IDispatch)
    ['{00024440-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function AddItem(const Text: WideString; Index: OleVariant): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Get_DropDownLines(out Retval: Integer): HResult; stdcall;
    function Set_DropDownLines(Value: Integer): HResult; stdcall;
    function Get_Enabled(out Retval: WordBool): HResult; stdcall;
    function Set_Enabled(Value: WordBool): HResult; stdcall;
    function Get_LargeChange(out Retval: Integer): HResult; stdcall;
    function Set_LargeChange(Value: Integer): HResult; stdcall;
    function Get_LinkedCell(out Retval: WideString): HResult; stdcall;
    function Set_LinkedCell(const Value: WideString): HResult; stdcall;
    function List(Index: OleVariant; out Retval: OleVariant): HResult; stdcall;
    function Get_ListCount(out Retval: Integer): HResult; stdcall;
    function Set_ListCount(Value: Integer): HResult; stdcall;
    function Get_ListFillRange(out Retval: WideString): HResult; stdcall;
    function Set_ListFillRange(const Value: WideString): HResult; stdcall;
    function Get_ListIndex(out Retval: Integer): HResult; stdcall;
    function Set_ListIndex(Value: Integer): HResult; stdcall;
    function Get_LockedText(out Retval: WordBool): HResult; stdcall;
    function Set_LockedText(Value: WordBool): HResult; stdcall;
    function Get_Max(out Retval: Integer): HResult; stdcall;
    function Set_Max(Value: Integer): HResult; stdcall;
    function Get_Min(out Retval: Integer): HResult; stdcall;
    function Set_Min(Value: Integer): HResult; stdcall;
    function Get_MultiSelect(out Retval: Integer): HResult; stdcall;
    function Set_MultiSelect(Value: Integer): HResult; stdcall;
    function Get_PrintObject(out Retval: WordBool): HResult; stdcall;
    function Set_PrintObject(Value: WordBool): HResult; stdcall;
    function Get_SmallChange(out Retval: Integer): HResult; stdcall;
    function Set_SmallChange(Value: Integer): HResult; stdcall;
    function Get__Default(out Retval: Integer): HResult; stdcall;
    function Set__Default(Value: Integer): HResult; stdcall;
    function Get_Value(out Retval: Integer): HResult; stdcall;
    function Set_Value(Value: Integer): HResult; stdcall;
  end;

  IOLEFormat = interface(IDispatch)
    ['{00024441-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_Object_(out Retval: IDispatch): HResult; stdcall;
    function Get_ProgId(out Retval: WideString): HResult; stdcall;
    function Verb(Verb: OleVariant): HResult; stdcall;
  end;

  ILinkFormat = interface(IDispatch)
    ['{00024442-0001-0000-C000-000000000046}']
    function Get_Application(out Retval: Application): HResult; stdcall;
    function Get_Creator(out Retval: XlCreator): HResult; stdcall;
    function Get_Parent(out Retval: IDispatch): HResult; stdcall;
    function Get_AutoUpdate(out Retval: WordBool): HResult; stdcall;
    function Set_AutoUpdate(Value: WordBool): HResult; stdcall;
    function Get_Locked(out Retval: WordBool): HResult; stdcall;
    function Set_Locked(Value: WordBool): HResult; stdcall;
    function Update: HResult; stdcall;
  end;

  Font = dispinterface
    ['{0002084D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Background: OleVariant dispid 180;
    property Bold: OleVariant dispid 96;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property FontStyle: OleVariant dispid 177;
    property Italic: OleVariant dispid 101;
    property Name: OleVariant dispid 110;
    property OutlineFont: OleVariant dispid 221;
    property Shadow: OleVariant dispid 103;
    property Size: OleVariant dispid 104;
    property Strikethrough: OleVariant dispid 105;
    property Subscript: OleVariant dispid 179;
    property Superscript: OleVariant dispid 178;
    property Underline: OleVariant dispid 106;
  end;

  Window = dispinterface
    ['{00020893-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    procedure ActivateNext; dispid 1115;
    procedure ActivatePrevious; dispid 1116;
    property ActiveCell: Range readonly dispid 305;
    property ActiveChart: Chart readonly dispid 183;
    property ActivePane: Pane readonly dispid 642;
    property ActiveSheet: IDispatch readonly dispid 307;
    property Caption: OleVariant dispid 139;
    procedure Close(SaveChanges, Filename, RouteWorkbook: OleVariant); dispid 277;
    property DisplayFormulas: WordBool dispid 644;
    property DisplayGridlines: WordBool dispid 645;
    property DisplayHeadings: WordBool dispid 646;
    property DisplayHorizontalScrollBar: WordBool dispid 921;
    property DisplayOutline: WordBool dispid 647;
    property DisplayRightToLeft: WordBool dispid 648;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property DisplayWorkbookTabs: WordBool dispid 923;
    property DisplayZeros: WordBool dispid 649;
    property EnableResize: WordBool dispid 1192;
    property FreezePanes: WordBool dispid 650;
    property GridlineColor: Integer dispid 651;
    property GridlineColorIndex: XlColorIndex dispid 652;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    procedure LargeScroll(Down, Up, ToRight, ToLeft: OleVariant); dispid 547;
    property Left: Double dispid 127;
    function NewWindow: Window; dispid 280;
    property OnWindow: WideString dispid 623;
    property Panes: Panes readonly dispid 653;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    property RangeSelection: Range readonly dispid 1189;
    property ScrollColumn: Integer dispid 654;
    property ScrollRow: Integer dispid 655;
    procedure ScrollWorkbookTabs(Sheets, Position: OleVariant); dispid 662;
    property SelectedSheets: Sheets readonly dispid 656;
    property Selection: IDispatch readonly dispid 147;
    procedure SmallScroll(Down, Up, ToRight, ToLeft: OleVariant); dispid 548;
    property Split: WordBool dispid 657;
    property SplitColumn: Integer dispid 658;
    property SplitHorizontal: Double dispid 659;
    property SplitRow: Integer dispid 660;
    property SplitVertical: Double dispid 661;
    property TabRatio: Double dispid 673;
    property Top: Double dispid 126;
    property Type_: XlWindowType readonly dispid 108;
    property UsableHeight: Double readonly dispid 389;
    property UsableWidth: Double readonly dispid 390;
    property Visible: WordBool dispid 558;
    property VisibleRange: Range readonly dispid 1118;
    property Width: Double dispid 122;
    property WindowNumber: Integer readonly dispid 1119;
    property WindowState: XlWindowState dispid 396;
    property Zoom: OleVariant dispid 663;
    property View: XlWindowView dispid 1194;
  end;

  Windows = dispinterface
    ['{00020892-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Arrange(ArrangeStyle: XlArrangeStyle; ActiveWorkbook, SyncHorizontal, SyncVertical: OleVariant); dispid 638;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Window readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: OleVariant]: Window readonly dispid 0; default;
  end;

  AppEvents = dispinterface
    ['{00024413-0000-0000-C000-000000000046}']
    procedure NewWorkbook(const Wb: Workbook); dispid 1565;
    procedure SheetSelectionChange(Sh: IDispatch; const Target: Range); dispid 1558;
    procedure SheetBeforeDoubleClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1559;
    procedure SheetBeforeRightClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1560;
    procedure SheetActivate(Sh: IDispatch); dispid 1561;
    procedure SheetDeactivate(Sh: IDispatch); dispid 1562;
    procedure SheetCalculate(Sh: IDispatch); dispid 1563;
    procedure SheetChange(Sh: IDispatch; const Target: Range); dispid 1564;
    procedure WorkbookOpen(const Wb: Workbook); dispid 1567;
    procedure WorkbookActivate(const Wb: Workbook); dispid 1568;
    procedure WorkbookDeactivate(const Wb: Workbook); dispid 1569;
    procedure WorkbookBeforeClose(const Wb: Workbook; var Cancel: WordBool); dispid 1570;
    procedure WorkbookBeforeSave(const Wb: Workbook; SaveAsUI: WordBool; var Cancel: WordBool); dispid 1571;
    procedure WorkbookBeforePrint(const Wb: Workbook; var Cancel: WordBool); dispid 1572;
    procedure WorkbookNewSheet(const Wb: Workbook; Sh: IDispatch); dispid 1573;
    procedure WorkbookAddinInstall(const Wb: Workbook); dispid 1574;
    procedure WorkbookAddinUninstall(const Wb: Workbook); dispid 1575;
    procedure WindowResize(const Wb: Workbook; const Wn: Window); dispid 1554;
    procedure WindowActivate(const Wb: Workbook; const Wn: Window); dispid 1556;
    procedure WindowDeactivate(const Wb: Workbook; const Wn: Window); dispid 1557;
  end;

  WorksheetFunction = dispinterface
    ['{00020845-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function _WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; dispid 169;
    function Count(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16384;
    function IsNA(Arg1: OleVariant): WordBool; dispid 16386;
    function IsError(Arg1: OleVariant): WordBool; dispid 16387;
    function Sum(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16388;
    function Average(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16389;
    function Min(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16390;
    function Max(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16391;
    function Npv(Arg1: Double; Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16395;
    function StDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16396;
    function Dollar(Arg1: Double; Arg2: OleVariant): WideString; dispid 16397;
    function Fixed(Arg1: Double; Arg2, Arg3: OleVariant): WideString; dispid 16398;
    function Pi: Double; dispid 16403;
    function Ln(Arg1: Double): Double; dispid 16406;
    function Log10(Arg1: Double): Double; dispid 16407;
    function Round(Arg1, Arg2: Double): Double; dispid 16411;
    function Lookup(Arg1, Arg2, Arg3: OleVariant): OleVariant; dispid 16412;
    function Index(Arg1: OleVariant; Arg2: Double; Arg3, Arg4: OleVariant): OleVariant; dispid 16413;
    function Rept(const Arg1: WideString; Arg2: Double): WideString; dispid 16414;
    function And_(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): WordBool; dispid 16420;
    function Or_(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): WordBool; dispid 16421;
    function DCount(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16424;
    function DSum(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16425;
    function DAverage(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16426;
    function DMin(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16427;
    function DMax(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16428;
    function DStDev(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16429;
    function Var_(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16430;
    function DVar(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16431;
    function Text(Arg1: OleVariant; const Arg2: WideString): WideString; dispid 16432;
    function LinEst(Arg1, Arg2, Arg3, Arg4: OleVariant): OleVariant; dispid 16433;
    function Trend(Arg1, Arg2, Arg3, Arg4: OleVariant): OleVariant; dispid 16434;
    function LogEst(Arg1, Arg2, Arg3, Arg4: OleVariant): OleVariant; dispid 16435;
    function Growth(Arg1, Arg2, Arg3, Arg4: OleVariant): OleVariant; dispid 16436;
    function Pv(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant): Double; dispid 16440;
    function Fv(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant): Double; dispid 16441;
    function NPer(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant): Double; dispid 16442;
    function Pmt(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant): Double; dispid 16443;
    function Rate(Arg1, Arg2, Arg3: Double; Arg4, Arg5, Arg6: OleVariant): Double; dispid 16444;
    function MIrr(Arg1: OleVariant; Arg2, Arg3: Double): Double; dispid 16445;
    function Irr(Arg1, Arg2: OleVariant): Double; dispid 16446;
    function Match(Arg1, Arg2, Arg3: OleVariant): Double; dispid 16448;
    function Weekday(Arg1, Arg2: OleVariant): Double; dispid 16454;
    function Search(const Arg1, Arg2: WideString; Arg3: OleVariant): Double; dispid 16466;
    function Transpose(Arg1: OleVariant): OleVariant; dispid 16467;
    function Atan2(Arg1, Arg2: Double): Double; dispid 16481;
    function Asin(Arg1: Double): Double; dispid 16482;
    function Acos(Arg1: Double): Double; dispid 16483;
    function Choose(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; dispid 16484;
    function HLookup(Arg1, Arg2, Arg3, Arg4: OleVariant): OleVariant; dispid 16485;
    function VLookup(Arg1, Arg2, Arg3, Arg4: OleVariant): OleVariant; dispid 16486;
    function Log(Arg1: Double; Arg2: OleVariant): Double; dispid 16493;
    function Proper(const Arg1: WideString): WideString; dispid 16498;
    function Trim(const Arg1: WideString): WideString; dispid 16502;
    function Replace(const Arg1: WideString; Arg2, Arg3: Double; const Arg4: WideString): WideString; dispid 16503;
    function Substitute(const Arg1, Arg2, Arg3: WideString; Arg4: OleVariant): WideString; dispid 16504;
    function Find(const Arg1, Arg2: WideString; Arg3: OleVariant): Double; dispid 16508;
    function IsErr(Arg1: OleVariant): WordBool; dispid 16510;
    function IsText(Arg1: OleVariant): WordBool; dispid 16511;
    function IsNumber(Arg1: OleVariant): WordBool; dispid 16512;
    function Sln(Arg1, Arg2, Arg3: Double): Double; dispid 16526;
    function Syd(Arg1, Arg2, Arg3, Arg4: Double): Double; dispid 16527;
    function Ddb(Arg1, Arg2, Arg3, Arg4: Double; Arg5: OleVariant): Double; dispid 16528;
    function Clean(const Arg1: WideString): WideString; dispid 16546;
    function MDeterm(Arg1: OleVariant): Double; dispid 16547;
    function MInverse(Arg1: OleVariant): OleVariant; dispid 16548;
    function MMult(Arg1, Arg2: OleVariant): OleVariant; dispid 16549;
    function Ipmt(Arg1, Arg2, Arg3, Arg4: Double; Arg5, Arg6: OleVariant): Double; dispid 16551;
    function Ppmt(Arg1, Arg2, Arg3, Arg4: Double; Arg5, Arg6: OleVariant): Double; dispid 16552;
    function CountA(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16553;
    function Product(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16567;
    function Fact(Arg1: Double): Double; dispid 16568;
    function DProduct(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16573;
    function IsNonText(Arg1: OleVariant): WordBool; dispid 16574;
    function StDevP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16577;
    function VarP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16578;
    function DStDevP(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16579;
    function DVarP(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16580;
    function IsLogical(Arg1: OleVariant): WordBool; dispid 16582;
    function DCountA(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16583;
    function USDollar(Arg1, Arg2: Double): WideString; dispid 16588;
    function FindB(const Arg1, Arg2: WideString; Arg3: OleVariant): Double; dispid 16589;
    function SearchB(const Arg1, Arg2: WideString; Arg3: OleVariant): Double; dispid 16590;
    function ReplaceB(const Arg1: WideString; Arg2, Arg3: Double; const Arg4: WideString): WideString; dispid 16591;
    function RoundUp(Arg1, Arg2: Double): Double; dispid 16596;
    function RoundDown(Arg1, Arg2: Double): Double; dispid 16597;
    function Rank(Arg1: Double; const Arg2: Range; Arg3: OleVariant): Double; dispid 16600;
    function Days360(Arg1, Arg2, Arg3: OleVariant): Double; dispid 16604;
    function Vdb(Arg1, Arg2, Arg3, Arg4, Arg5: Double; Arg6, Arg7: OleVariant): Double; dispid 16606;
    function Median(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16611;
    function SumProduct(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16612;
    function Sinh(Arg1: Double): Double; dispid 16613;
    function Cosh(Arg1: Double): Double; dispid 16614;
    function Tanh(Arg1: Double): Double; dispid 16615;
    function Asinh(Arg1: Double): Double; dispid 16616;
    function Acosh(Arg1: Double): Double; dispid 16617;
    function Atanh(Arg1: Double): Double; dispid 16618;
    function DGet(const Arg1: Range; Arg2, Arg3: OleVariant): OleVariant; dispid 16619;
    function Db(Arg1, Arg2, Arg3, Arg4: Double; Arg5: OleVariant): Double; dispid 16631;
    function Frequency(Arg1, Arg2: OleVariant): OleVariant; dispid 16636;
    function AveDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16653;
    function BetaDist(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant): Double; dispid 16654;
    function GammaLn(Arg1: Double): Double; dispid 16655;
    function BetaInv(Arg1, Arg2, Arg3: Double; Arg4, Arg5: OleVariant): Double; dispid 16656;
    function BinomDist(Arg1, Arg2, Arg3: Double; Arg4: WordBool): Double; dispid 16657;
    function ChiDist(Arg1, Arg2: Double): Double; dispid 16658;
    function ChiInv(Arg1, Arg2: Double): Double; dispid 16659;
    function Combin(Arg1, Arg2: Double): Double; dispid 16660;
    function Confidence(Arg1, Arg2, Arg3: Double): Double; dispid 16661;
    function CritBinom(Arg1, Arg2, Arg3: Double): Double; dispid 16662;
    function Even(Arg1: Double): Double; dispid 16663;
    function ExponDist(Arg1, Arg2: Double; Arg3: WordBool): Double; dispid 16664;
    function FDist(Arg1, Arg2, Arg3: Double): Double; dispid 16665;
    function FInv(Arg1, Arg2, Arg3: Double): Double; dispid 16666;
    function Fisher(Arg1: Double): Double; dispid 16667;
    function FisherInv(Arg1: Double): Double; dispid 16668;
    function Floor(Arg1, Arg2: Double): Double; dispid 16669;
    function GammaDist(Arg1, Arg2, Arg3: Double; Arg4: WordBool): Double; dispid 16670;
    function GammaInv(Arg1, Arg2, Arg3: Double): Double; dispid 16671;
    function Ceiling(Arg1, Arg2: Double): Double; dispid 16672;
    function HypGeomDist(Arg1, Arg2, Arg3, Arg4: Double): Double; dispid 16673;
    function LogNormDist(Arg1, Arg2, Arg3: Double): Double; dispid 16674;
    function LogInv(Arg1, Arg2, Arg3: Double): Double; dispid 16675;
    function NegBinomDist(Arg1, Arg2, Arg3: Double): Double; dispid 16676;
    function NormDist(Arg1, Arg2, Arg3: Double; Arg4: WordBool): Double; dispid 16677;
    function NormSDist(Arg1: Double): Double; dispid 16678;
    function NormInv(Arg1, Arg2, Arg3: Double): Double; dispid 16679;
    function NormSInv(Arg1: Double): Double; dispid 16680;
    function Standardize(Arg1, Arg2, Arg3: Double): Double; dispid 16681;
    function Odd(Arg1: Double): Double; dispid 16682;
    function Permut(Arg1, Arg2: Double): Double; dispid 16683;
    function Poisson(Arg1, Arg2: Double; Arg3: WordBool): Double; dispid 16684;
    function TDist(Arg1, Arg2, Arg3: Double): Double; dispid 16685;
    function Weibull(Arg1, Arg2, Arg3: Double; Arg4: WordBool): Double; dispid 16686;
    function SumXMY2(Arg1, Arg2: OleVariant): Double; dispid 16687;
    function SumX2MY2(Arg1, Arg2: OleVariant): Double; dispid 16688;
    function SumX2PY2(Arg1, Arg2: OleVariant): Double; dispid 16689;
    function ChiTest(Arg1, Arg2: OleVariant): Double; dispid 16690;
    function Correl(Arg1, Arg2: OleVariant): Double; dispid 16691;
    function Covar(Arg1, Arg2: OleVariant): Double; dispid 16692;
    function Forecast(Arg1: Double; Arg2, Arg3: OleVariant): Double; dispid 16693;
    function FTest(Arg1, Arg2: OleVariant): Double; dispid 16694;
    function Intercept(Arg1, Arg2: OleVariant): Double; dispid 16695;
    function Pearson(Arg1, Arg2: OleVariant): Double; dispid 16696;
    function RSq(Arg1, Arg2: OleVariant): Double; dispid 16697;
    function StEyx(Arg1, Arg2: OleVariant): Double; dispid 16698;
    function Slope(Arg1, Arg2: OleVariant): Double; dispid 16699;
    function TTest(Arg1, Arg2: OleVariant; Arg3, Arg4: Double): Double; dispid 16700;
    function Prob(Arg1, Arg2: OleVariant; Arg3: Double; Arg4: OleVariant): Double; dispid 16701;
    function DevSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16702;
    function GeoMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16703;
    function HarMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16704;
    function SumSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16705;
    function Kurt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16706;
    function Skew(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16707;
    function ZTest(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant): Double; dispid 16708;
    function Large(Arg1: OleVariant; Arg2: Double): Double; dispid 16709;
    function Small(Arg1: OleVariant; Arg2: Double): Double; dispid 16710;
    function Quartile(Arg1: OleVariant; Arg2: Double): Double; dispid 16711;
    function Percentile(Arg1: OleVariant; Arg2: Double): Double; dispid 16712;
    function PercentRank(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant): Double; dispid 16713;
    function Mode(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16714;
    function TrimMean(Arg1: OleVariant; Arg2: Double): Double; dispid 16715;
    function TInv(Arg1, Arg2: Double): Double; dispid 16716;
    function Power(Arg1, Arg2: Double): Double; dispid 16721;
    function Radians(Arg1: Double): Double; dispid 16726;
    function Degrees(Arg1: Double): Double; dispid 16727;
    function Subtotal(Arg1: Double; const Arg2: Range; Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): Double; dispid 16728;
    function SumIf(const Arg1: Range; Arg2, Arg3: OleVariant): Double; dispid 16729;
    function CountIf(const Arg1: Range; Arg2: OleVariant): Double; dispid 16730;
    function CountBlank(const Arg1: Range): Double; dispid 16731;
    function Ispmt(Arg1, Arg2, Arg3, Arg4: Double): Double; dispid 16734;
    function Roman(Arg1: Double; Arg2: OleVariant): WideString; dispid 16738;
    function Asc(const Arg1: WideString): WideString; dispid 16598;
    function Dbcs(const Arg1: WideString): WideString; dispid 16599;
  end;

  Range = dispinterface
    ['{00020846-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property AddIndent: OleVariant dispid 1063;
    property Address[RowAbsolute, ColumnAbsolute: OleVariant; ReferenceStyle: XlReferenceStyle; External, RelativeTo: OleVariant]: WideString readonly dispid 236;
    property AddressLocal[RowAbsolute, ColumnAbsolute: OleVariant; ReferenceStyle: XlReferenceStyle; External, RelativeTo: OleVariant]: WideString readonly dispid 437;
    procedure AdvancedFilter(Action: XlFilterAction; CriteriaRange, CopyToRange, Unique: OleVariant); dispid 876;
    procedure ApplyNames(Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow: OleVariant; Order: XlApplyNamesOrder; AppendLast: OleVariant); dispid 441;
    procedure ApplyOutlineStyles; dispid 448;
    property Areas: Areas readonly dispid 568;
    function AutoComplete(const String_: WideString): WideString; dispid 1185;
    procedure AutoFill(const Destination: Range; Type_: XlAutoFillType); dispid 449;
    procedure AutoFilter(Field, Criteria1: OleVariant; Operator: XlAutoFilterOperator; Criteria2, VisibleDropDown: OleVariant); dispid 793;
    procedure AutoFit; dispid 237;
    procedure AutoFormat(Format: XlRangeAutoFormat; Number, Font, Alignment, Border, Pattern, Width: OleVariant); dispid 114;
    procedure AutoOutline; dispid 1036;
    procedure BorderAround(LineStyle: OleVariant; Weight: XlBorderWeight; ColorIndex: XlColorIndex; Color: OleVariant); dispid 1067;
    property Borders: Borders readonly dispid 435;
    procedure Calculate; dispid 279;
    property Cells: Range readonly dispid 238;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    procedure Clear; dispid 111;
    procedure ClearContents; dispid 113;
    procedure ClearFormats; dispid 112;
    procedure ClearNotes; dispid 239;
    procedure ClearOutline; dispid 1037;
    property Column: Integer readonly dispid 240;
    function ColumnDifferences(Comparison: OleVariant): Range; dispid 510;
    property Columns: Range readonly dispid 241;
    property ColumnWidth: OleVariant dispid 242;
    procedure Consolidate(Sources, Function_, TopRow, LeftColumn, CreateLinks: OleVariant); dispid 482;
    procedure Copy(Destination: OleVariant); dispid 551;
    function CopyFromRecordset(Data: IUnknown; MaxRows, MaxColumns: OleVariant): Integer; dispid 1152;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    property Count: Integer readonly dispid 118;
    procedure CreateNames(Top, Left, Bottom, Right: OleVariant); dispid 457;
    procedure CreatePublisher(Edition: OleVariant; Appearance: XlPictureAppearance; ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU: OleVariant); dispid 458;
    property CurrentArray: Range readonly dispid 501;
    property CurrentRegion: Range readonly dispid 243;
    procedure Cut(Destination: OleVariant); dispid 565;
    procedure DataSeries(Rowcol: OleVariant; Type_: XlDataSeriesType; Date: XlDataSeriesDate; Step, Stop, Trend: OleVariant); dispid 464;
    property _Default[RowIndex, ColumnIndex: OleVariant]: OleVariant dispid 0; default;
    procedure Delete(Shift: OleVariant); dispid 117;
    property Dependents: Range readonly dispid 543;
    function DialogBox: OleVariant; dispid 245;
    property DirectDependents: Range readonly dispid 545;
    property DirectPrecedents: Range readonly dispid 546;
    function EditionOptions(Type_: XlEditionType; Option: XlEditionOptionsOption; Name, Reference: OleVariant; Appearance, ChartSize: XlPictureAppearance; Format: OleVariant): OleVariant; dispid 1131;
    property End_[Direction: XlDirection]: Range readonly dispid 500;
    property EntireColumn: Range readonly dispid 246;
    property EntireRow: Range readonly dispid 247;
    procedure FillDown; dispid 248;
    procedure FillLeft; dispid 249;
    procedure FillRight; dispid 250;
    procedure FillUp; dispid 251;
    function Find(What, After, LookIn, LookAt, SearchOrder: OleVariant; SearchDirection: XlSearchDirection; MatchCase, MatchByte, MatchControlCharacters, MatchDiacritics, MatchKashida, MatchAlefHamza: OleVariant): Range; dispid 398;
    function FindNext(After: OleVariant): Range; dispid 399;
    function FindPrevious(After: OleVariant): Range; dispid 400;
    property Font: Font readonly dispid 146;
    property Formula: OleVariant dispid 261;
    property FormulaArray: OleVariant dispid 586;
    property FormulaLabel: XlFormulaLabel dispid 1380;
    property FormulaHidden: OleVariant dispid 262;
    property FormulaLocal: OleVariant dispid 263;
    property FormulaR1C1: OleVariant dispid 264;
    property FormulaR1C1Local: OleVariant dispid 265;
    procedure FunctionWizard; dispid 571;
    function GoalSeek(Goal: OleVariant; const ChangingCell: Range): WordBool; dispid 472;
    function Group(Start, End_, By, Periods: OleVariant): OleVariant; dispid 46;
    property HasArray: OleVariant readonly dispid 266;
    property HasFormula: OleVariant readonly dispid 267;
    property Height: OleVariant readonly dispid 123;
    property Hidden: OleVariant dispid 268;
    property HorizontalAlignment: OleVariant dispid 136;
    property IndentLevel: OleVariant dispid 201;
    procedure InsertIndent(InsertAmount: Integer); dispid 1381;
    procedure Insert(Shift: OleVariant); dispid 252;
    property Interior: Interior readonly dispid 129;
    property Item[RowIndex, ColumnIndex: OleVariant]: OleVariant dispid 170;
    procedure Justify; dispid 495;
    property Left: OleVariant readonly dispid 127;
    property ListHeaderRows: Integer readonly dispid 1187;
    procedure ListNames; dispid 253;
    property LocationInTable: XlLocationInTable readonly dispid 691;
    property Locked: OleVariant dispid 269;
    procedure Merge(Across: OleVariant); dispid 564;
    procedure UnMerge; dispid 1384;
    property MergeArea: Range readonly dispid 1385;
    property MergeCells: OleVariant dispid 208;
    property Name: OleVariant dispid 110;
    procedure NavigateArrow(TowardPrecedent, ArrowNumber, LinkNumber: OleVariant); dispid 1032;
    property _NewEnum: IUnknown readonly dispid -4;
    property Next: Range readonly dispid 502;
    function NoteText(Text, Start, Length: OleVariant): WideString; dispid 1127;
    property NumberFormat: OleVariant dispid 193;
    property NumberFormatLocal: OleVariant dispid 1097;
    property Offset[RowOffset, ColumnOffset: OleVariant]: Range readonly dispid 254;
    property Orientation: OleVariant dispid 134;
    property OutlineLevel: OleVariant dispid 271;
    property PageBreak: Integer dispid 255;
    procedure Parse(ParseLine, Destination: OleVariant); dispid 477;
    procedure PasteSpecial(Paste: XlPasteType; Operation: XlPasteSpecialOperation; SkipBlanks, Transpose: OleVariant); dispid 1027;
    property PivotField: PivotField readonly dispid 731;
    property PivotItem: PivotItem readonly dispid 740;
    property PivotTable: PivotTable readonly dispid 716;
    property Precedents: Range readonly dispid 544;
    property PrefixCharacter: OleVariant readonly dispid 504;
    property Previous: Range readonly dispid 503;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    property QueryTable: QueryTable readonly dispid 1386;
    property Range[Cell1, Cell2: OleVariant]: Range readonly dispid 197;
    procedure RemoveSubtotal; dispid 883;
    function Replace(What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, MatchControlCharacters, MatchDiacritics, MatchKashida, MatchAlefHamza: OleVariant): WordBool; dispid 226;
    property Resize[RowSize, ColumnSize: OleVariant]: Range readonly dispid 256;
    property Row: Integer readonly dispid 257;
    function RowDifferences(Comparison: OleVariant): Range; dispid 511;
    property RowHeight: OleVariant dispid 272;
    property Rows: Range readonly dispid 258;
    function Run(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): OleVariant; dispid 259;
    procedure Select; dispid 235;
    procedure Show; dispid 496;
    procedure ShowDependents(Remove: OleVariant); dispid 877;
    property ShowDetail: OleVariant dispid 585;
    procedure ShowErrors; dispid 878;
    procedure ShowPrecedents(Remove: OleVariant); dispid 879;
    property ShrinkToFit: OleVariant dispid 209;
    procedure Sort(Key1: OleVariant; Order1: XlSortOrder; Key2, Type_: OleVariant; Order2: XlSortOrder; Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; OrderCustom, MatchCase: OleVariant; Orientation: XlSortOrientation; SortMethod: XlSortMethod; IgnoreControlCharacters, IgnoreDiacritics, IgnoreKashida: OleVariant); dispid 880;
    procedure SortSpecial(SortMethod: XlSortMethod; Key1: OleVariant; Order1: XlSortOrder; Type_, Key2: OleVariant; Order2: XlSortOrder; Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; OrderCustom, MatchCase: OleVariant; Orientation: XlSortOrientation); dispid 881;
    property SoundNote: SoundNote readonly dispid 916;
    function SpecialCells(Type_: XlCellType; Value: OleVariant): Range; dispid 410;
    property Style: OleVariant dispid 260;
    procedure SubscribeTo(const Edition: WideString; Format: XlSubscribeToFormat); dispid 481;
    procedure Subtotal(GroupBy: Integer; Function_: XlConsolidationFunction; TotalList, Replace, PageBreaks: OleVariant; SummaryBelowData: XlSummaryRow); dispid 882;
    property Summary: OleVariant readonly dispid 273;
    procedure Table(RowInput, ColumnInput: OleVariant); dispid 497;
    property Text: OleVariant readonly dispid 138;
    procedure TextToColumns(Destination: OleVariant; DataType: XlTextParsingType; TextQualifier: XlTextQualifier; ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo: OleVariant); dispid 1040;
    property Top: OleVariant readonly dispid 126;
    procedure Ungroup; dispid 244;
    property UseStandardHeight: OleVariant dispid 274;
    property UseStandardWidth: OleVariant dispid 275;
    property Validation: Validation readonly dispid 1387;
    property Value: OleVariant dispid 6;
    property Value2: OleVariant dispid 1388;
    property VerticalAlignment: OleVariant dispid 137;
    property Width: OleVariant readonly dispid 122;
    property Worksheet: Worksheet readonly dispid 348;
    property WrapText: OleVariant dispid 276;
    function AddComment(Text: OleVariant): Comment; dispid 1389;
    property Comment: Comment readonly dispid 910;
    procedure ClearComments; dispid 1390;
    property Phonetic: Phonetic readonly dispid 1391;
    property FormatConditions: FormatConditions readonly dispid 1392;
    property ReadingOrder: Integer dispid 975;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
  end;

  ChartEvents = dispinterface
    ['{0002440F-0000-0000-C000-000000000046}']
    procedure Activate; dispid 304;
    procedure Deactivate; dispid 1530;
    procedure Resize; dispid 256;
    procedure MouseDown(Button: XlMouseButton; Shift, X, Y: Integer); dispid 1531;
    procedure MouseUp(Button: XlMouseButton; Shift, X, Y: Integer); dispid 1532;
    procedure MouseMove(Button: XlMouseButton; Shift, X, Y: Integer); dispid 1533;
    procedure BeforeRightClick(var Cancel: WordBool); dispid 1534;
    procedure DragPlot; dispid 1535;
    procedure DragOver; dispid 1536;
    procedure BeforeDoubleClick(ElementID: XlChartItem; Arg1, Arg2: Integer; var Cancel: WordBool); dispid 1537;
    procedure Select(ElementID: XlChartItem; Arg1, Arg2: Integer); dispid 235;
    procedure SeriesChange(SeriesIndex, PointIndex: Integer); dispid 1538;
    procedure Calculate; dispid 279;
  end;

  VPageBreak = dispinterface
    ['{00024402-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Worksheet readonly dispid 150;
    procedure Delete; dispid 117;
    procedure DragOff(Direction: XlDirection; RegionIndex: Integer); dispid 1420;
    property Type_: XlPageBreak dispid 108;
    property Extent: XlPageBreakExtent readonly dispid 1422;
    property Location: Range dispid 1397;
  end;

  HPageBreak = dispinterface
    ['{00024401-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Worksheet readonly dispid 150;
    procedure Delete; dispid 117;
    procedure DragOff(Direction: XlDirection; RegionIndex: Integer); dispid 1420;
    property Type_: XlPageBreak dispid 108;
    property Extent: XlPageBreakExtent readonly dispid 1422;
    property Location: Range dispid 1397;
  end;

  HPageBreaks = dispinterface
    ['{00024404-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: HPageBreak readonly dispid 170;
    property _Default[Index: Integer]: HPageBreak readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(Before: IDispatch): HPageBreak; dispid 181;
  end;

  VPageBreaks = dispinterface
    ['{00024405-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: VPageBreak readonly dispid 170;
    property _Default[Index: Integer]: VPageBreak readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(Before: IDispatch): VPageBreak; dispid 181;
  end;

  RecentFile = dispinterface
    ['{00024407-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    property Path: WideString readonly dispid 291;
    property Index: Integer readonly dispid 486;
    function Open: Workbook; dispid 682;
    procedure Delete; dispid 117;
  end;

  RecentFiles = dispinterface
    ['{00024406-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Maximum: Integer dispid 1423;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: RecentFile readonly dispid 170;
    property _Default[Index: Integer]: RecentFile readonly dispid 0; default;
    function Add(const Name: WideString): RecentFile; dispid 181;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  DocEvents = dispinterface
    ['{00024411-0000-0000-C000-000000000046}']
    procedure SelectionChange(const Target: Range); dispid 1543;
    procedure BeforeDoubleClick(const Target: Range; var Cancel: WordBool); dispid 1537;
    procedure BeforeRightClick(const Target: Range; var Cancel: WordBool); dispid 1534;
    procedure Activate; dispid 304;
    procedure Deactivate; dispid 1530;
    procedure Calculate; dispid 279;
    procedure Change(const Target: Range); dispid 1545;
  end;

  Style = dispinterface
    ['{00020852-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AddIndent: WordBool dispid 1063;
    property BuiltIn: WordBool readonly dispid 553;
    property Borders: Borders readonly dispid 435;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    property FormulaHidden: WordBool dispid 262;
    property HorizontalAlignment: XlHAlign dispid 136;
    property IncludeAlignment: WordBool dispid 413;
    property IncludeBorder: WordBool dispid 414;
    property IncludeFont: WordBool dispid 415;
    property IncludeNumber: WordBool dispid 416;
    property IncludePatterns: WordBool dispid 417;
    property IncludeProtection: WordBool dispid 418;
    property IndentLevel: Integer dispid 201;
    property Interior: Interior readonly dispid 129;
    property Locked: WordBool dispid 269;
    property MergeCells: OleVariant dispid 208;
    property Name: WideString readonly dispid 110;
    property NameLocal: WideString readonly dispid 937;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLocal: WideString dispid 1097;
    property Orientation: XlOrientation dispid 134;
    property ShrinkToFit: WordBool dispid 209;
    property Value: WideString readonly dispid 6;
    property VerticalAlignment: XlVAlign dispid 137;
    property WrapText: WordBool dispid 276;
    property _Default: WideString readonly dispid 0;
    property ReadingOrder: Integer dispid 975;
  end;

  Styles = dispinterface
    ['{00020853-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Name: WideString; BasedOn: OleVariant): Style; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Style readonly dispid 170;
    procedure Merge(Workbook: OleVariant); dispid 564;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: OleVariant]: Style readonly dispid 0; default;
  end;

  Borders = dispinterface
    ['{00020855-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property Count: Integer readonly dispid 118;
    property Item[Index: XlBordersIndex]: Border readonly dispid 170;
    property LineStyle: OleVariant dispid 119;
    property _NewEnum: IUnknown readonly dispid -4;
    property Value: OleVariant dispid 6;
    property Weight: OleVariant dispid 120;
    property _Default[Index: XlBordersIndex]: Border readonly dispid 0; default;
  end;

  AddIn = dispinterface
    ['{00020857-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Author: WideString readonly dispid 574;
    property Comments: WideString readonly dispid 575;
    property FullName: WideString readonly dispid 289;
    property Installed: WordBool dispid 550;
    property Keywords: WideString readonly dispid 577;
    property Name: WideString readonly dispid 110;
    property Path: WideString readonly dispid 291;
    property Subject: WideString readonly dispid 953;
    property Title: WideString readonly dispid 199;
  end;

  AddIns = dispinterface
    ['{00020858-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Filename: WideString; CopyFile: OleVariant): AddIn; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: AddIn readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: OleVariant]: AddIn readonly dispid 0; default;
  end;

  Toolbar = dispinterface
    ['{0002085C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BuiltIn: WordBool readonly dispid 553;
    procedure Delete; dispid 117;
    property Height: Integer dispid 123;
    property Left: Integer dispid 127;
    property Name: WideString readonly dispid 110;
    property Position: Integer dispid 133;
    property Protection: XlToolbarProtection dispid 176;
    procedure Reset; dispid 555;
    property ToolbarButtons: ToolbarButtons readonly dispid 964;
    property Top: Integer dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Integer dispid 122;
  end;

  Toolbars = dispinterface
    ['{0002085D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Name: OleVariant): Toolbar; dispid 181;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: Toolbar readonly dispid 0; default;
    property Item[Index: OleVariant]: Toolbar readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  ToolbarButton = dispinterface
    ['{0002085E-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BuiltIn: WordBool readonly dispid 553;
    property BuiltInFace: WordBool dispid 554;
    procedure Copy(const Toolbar: Toolbar; Before: Integer); dispid 551;
    procedure CopyFace; dispid 966;
    procedure Delete; dispid 117;
    procedure Edit; dispid 562;
    property Enabled: WordBool dispid 600;
    property HelpContextID: Integer dispid 355;
    property HelpFile: WideString dispid 360;
    property Id: Integer readonly dispid 570;
    property IsGap: WordBool readonly dispid 561;
    procedure Move(const Toolbar: Toolbar; Before: Integer); dispid 637;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    procedure PasteFace; dispid 967;
    property Pushed: WordBool dispid 560;
    procedure Reset; dispid 555;
    property StatusBar: WideString dispid 386;
    property Width: Integer dispid 122;
  end;

  ToolbarButtons = dispinterface
    ['{0002085F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Button, Before, OnAction, Pushed, Enabled, StatusBar, HelpFile, HelpContextID: OleVariant): ToolbarButton; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: ToolbarButton readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: Integer]: ToolbarButton readonly dispid 0; default;
  end;

  Areas = dispinterface
    ['{00020860-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: Range readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: Integer]: Range readonly dispid 0; default;
  end;

  WorkbookEvents = dispinterface
    ['{00024412-0000-0000-C000-000000000046}']
    procedure Open; dispid 682;
    procedure Activate; dispid 304;
    procedure Deactivate; dispid 1530;
    procedure BeforeClose(var Cancel: WordBool); dispid 1546;
    procedure BeforeSave(SaveAsUI: WordBool; var Cancel: WordBool); dispid 1547;
    procedure BeforePrint(var Cancel: WordBool); dispid 1549;
    procedure NewSheet(Sh: IDispatch); dispid 1550;
    procedure AddinInstall; dispid 1552;
    procedure AddinUninstall; dispid 1553;
    procedure WindowResize(const Wn: Window); dispid 1554;
    procedure WindowActivate(const Wn: Window); dispid 1556;
    procedure WindowDeactivate(const Wn: Window); dispid 1557;
    procedure SheetSelectionChange(Sh: IDispatch; const Target: Range); dispid 1558;
    procedure SheetBeforeDoubleClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1559;
    procedure SheetBeforeRightClick(Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1560;
    procedure SheetActivate(Sh: IDispatch); dispid 1561;
    procedure SheetDeactivate(Sh: IDispatch); dispid 1562;
    procedure SheetCalculate(Sh: IDispatch); dispid 1563;
    procedure SheetChange(Sh: IDispatch; const Target: Range); dispid 1564;
  end;

  MenuBars = dispinterface
    ['{00020863-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Name: OleVariant): MenuBar; dispid 181;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: MenuBar readonly dispid 0; default;
    property Item[Index: OleVariant]: MenuBar readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  MenuBar = dispinterface
    ['{00020864-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property BuiltIn: WordBool readonly dispid 553;
    property Caption: WideString dispid 139;
    procedure Delete; dispid 117;
    property Index: Integer readonly dispid 486;
    property Menus: Menus readonly dispid 591;
    procedure Reset; dispid 555;
  end;

  Menus = dispinterface
    ['{00020865-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Caption: WideString; Before, Restore: OleVariant): Menu; dispid 181;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: Menu readonly dispid 0; default;
    property Item[Index: OleVariant]: Menu readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  Menu = dispinterface
    ['{00020866-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Caption: WideString dispid 139;
    procedure Delete; dispid 117;
    property Enabled: WordBool dispid 600;
    property Index: Integer readonly dispid 486;
    property MenuItems: MenuItems readonly dispid 593;
  end;

  MenuItems = dispinterface
    ['{00020867-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Caption: WideString; OnAction, ShortcutKey, Before, Restore, StatusBar, HelpFile, HelpContextID: OleVariant): MenuItem; dispid 181;
    function AddMenu(const Caption: WideString; Before, Restore: OleVariant): Menu; dispid 598;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  MenuItem = dispinterface
    ['{00020868-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Caption: WideString dispid 139;
    property Checked: WordBool dispid 599;
    procedure Delete; dispid 117;
    property Enabled: WordBool dispid 600;
    property HelpContextID: Integer dispid 355;
    property HelpFile: WideString dispid 360;
    property Index: Integer readonly dispid 486;
    property OnAction: WideString dispid 596;
    property StatusBar: WideString dispid 386;
  end;

  Charts = dispinterface
    ['{0002086D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before, After, Count: OleVariant): Chart; dispid 181;
    procedure Copy(Before, After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before, After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

  DrawingObjects = dispinterface
    ['{0002086F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Accelerator: OleVariant dispid 846;
    property AddIndent: WordBool dispid 1063;
    procedure AddItem(Text, Index: OleVariant); dispid 851;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property AutoSize: WordBool dispid 614;
    property Border: Border readonly dispid 128;
    property CancelButton: WordBool dispid 858;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property _Default: Integer dispid 0;
    property DefaultButton: WordBool dispid 857;
    property DismissButton: WordBool dispid 859;
    property Display3DShading: WordBool dispid 1122;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property DropDownLines: Integer dispid 848;
    property Font: Font readonly dispid 146;
    property HelpButton: WordBool dispid 860;
    property HorizontalAlignment: OleVariant dispid 136;
    property InputType: Integer dispid 854;
    property Interior: Interior readonly dispid 129;
    property LargeChange: Integer dispid 845;
    property LinkedCell: WideString dispid 1058;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property LockedText: WordBool dispid 616;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property MultiLine: WordBool dispid 855;
    property MultiSelect: WordBool dispid 32;
    property Orientation: OleVariant dispid 134;
    property PhoneticAccelerator: OleVariant dispid 1121;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    procedure Reshape(Vertex: Integer; Insert, Left, Top: OleVariant); dispid 604;
    property RoundedCorners: WordBool dispid 619;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Shadow: WordBool dispid 103;
    property SmallChange: Integer dispid 844;
    property Text: WideString dispid 138;
    function Ungroup: IDispatch; dispid 244;
    property Value: Integer dispid 6;
    property VerticalAlignment: OleVariant dispid 137;
    function Vertices(Index1, Index2: OleVariant): OleVariant; dispid 621;
    property ReadingOrder: Integer dispid 975;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function Group: GroupObject; dispid 46;
    procedure LinkCombo(Link: OleVariant); dispid 856;
    function _NewEnum: IUnknown; dispid -4;
  end;

  PivotCache = dispinterface
    ['{0002441C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BackgroundQuery: WordBool dispid 1427;
    property Connection: OleVariant dispid 1432;
    property EnableRefresh: WordBool dispid 1477;
    property Index: Integer readonly dispid 486;
    property MemoryUsed: Integer readonly dispid 372;
    property OptimizeCache: WordBool dispid 1428;
    property RecordCount: Integer readonly dispid 1478;
    procedure Refresh; dispid 1417;
    property RefreshDate: TDateTime readonly dispid 696;
    property RefreshName: WideString readonly dispid 697;
    property RefreshOnFileOpen: WordBool dispid 1479;
    property Sql: OleVariant dispid 1480;
    property SavePassword: WordBool dispid 1481;
    property SourceData: OleVariant dispid 686;
  end;

  PivotCaches = dispinterface
    ['{0002441D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): PivotCache; dispid 170;
    property _Default[Index: OleVariant]: PivotCache readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

  PivotFormula = dispinterface
    ['{0002441E-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    property _Default: WideString dispid 0;
    property Formula: WideString dispid 261;
    property Value: WideString dispid 6;
    property Index: Integer dispid 486;
  end;

  PivotFormulas = dispinterface
    ['{0002441F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(const Formula: WideString): PivotFormula; dispid 181;
    function Item(Index: OleVariant): PivotFormula; dispid 170;
    property _Default[Index: OleVariant]: PivotFormula readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

  PivotTable = dispinterface
    ['{00020872-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddFields(RowFields, ColumnFields, PageFields, AddToTable: OleVariant); dispid 708;
    property ColumnFields[Index: OleVariant]: IDispatch readonly dispid 713;
    property ColumnGrand: WordBool dispid 694;
    property ColumnRange: Range readonly dispid 702;
    procedure ShowPages(PageField: OleVariant); dispid 706;
    property DataBodyRange: Range readonly dispid 705;
    property DataFields[Index: OleVariant]: IDispatch readonly dispid 715;
    property DataLabelRange: Range readonly dispid 704;
    property _Default: WideString dispid 0;
    property HasAutoFormat: WordBool dispid 695;
    property HiddenFields[Index: OleVariant]: IDispatch readonly dispid 711;
    property InnerDetail: WideString dispid 698;
    property Name: WideString dispid 110;
    property PageFields[Index: OleVariant]: IDispatch readonly dispid 714;
    property PageRange: Range readonly dispid 703;
    property PageRangeCells: Range readonly dispid 1482;
    function PivotFields(Index: OleVariant): IDispatch; dispid 718;
    property RefreshDate: TDateTime readonly dispid 696;
    property RefreshName: WideString readonly dispid 697;
    function RefreshTable: WordBool; dispid 717;
    property RowFields[Index: OleVariant]: IDispatch readonly dispid 712;
    property RowGrand: WordBool dispid 693;
    property RowRange: Range readonly dispid 701;
    property SaveData: WordBool dispid 692;
    property SourceData: OleVariant dispid 686;
    property TableRange1: Range readonly dispid 699;
    property TableRange2: Range readonly dispid 700;
    property Value: WideString dispid 6;
    property VisibleFields[Index: OleVariant]: IDispatch readonly dispid 710;
    property CacheIndex: Integer dispid 1483;
    function CalculatedFields: CalculatedFields; dispid 1484;
    property DisplayErrorString: WordBool dispid 1485;
    property DisplayNullString: WordBool dispid 1486;
    property EnableDrilldown: WordBool dispid 1487;
    property EnableFieldDialog: WordBool dispid 1488;
    property EnableWizard: WordBool dispid 1489;
    property ErrorString: WideString dispid 1490;
    function GetData(const Name: WideString): Double; dispid 1491;
    procedure ListFormulas; dispid 1492;
    property ManualUpdate: WordBool dispid 1493;
    property MergeLabels: WordBool dispid 1494;
    property NullString: WideString dispid 1495;
    function PivotCache: PivotCache; dispid 1496;
    function PivotFormulas: PivotFormulas; dispid 1497;
    procedure PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection: OleVariant); dispid 684;
    property SubtotalHiddenPageItems: WordBool dispid 1498;
    property PageFieldOrder: Integer dispid 1429;
    property PageFieldStyle: WideString dispid 1499;
    property PageFieldWrapCount: Integer dispid 1430;
    property PreserveFormatting: WordBool dispid 1500;
    procedure PivotSelect(const Name: WideString; Mode: XlPTSelectionMode); dispid 1501;
    property PivotSelection: WideString dispid 1502;
    property SelectionMode: XlPTSelectionMode dispid 1503;
    property TableStyle: WideString dispid 1504;
    property Tag: WideString dispid 1505;
    procedure Update; dispid 680;
    property VacatedStyle: WideString dispid 1506;
  end;

  PivotTables = dispinterface
    ['{00020873-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): PivotTable; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  PivotField = dispinterface
    ['{00020874-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotTable readonly dispid 150;
    property Calculation: XlPivotFieldCalculation dispid 316;
    property ChildField: PivotField readonly dispid 736;
    property ChildItems[Index: OleVariant]: OleVariant readonly dispid 730;
    property CurrentPage: WideString dispid 738;
    property DataRange: Range readonly dispid 720;
    property DataType: XlPivotFieldDataType readonly dispid 722;
    property _Default: WideString dispid 0;
    property Function_: XlConsolidationFunction dispid 899;
    property GroupLevel: OleVariant readonly dispid 723;
    property HiddenItems[Index: OleVariant]: OleVariant readonly dispid 728;
    property LabelRange: Range readonly dispid 719;
    property Name: WideString dispid 110;
    property NumberFormat: WideString dispid 193;
    property Orientation: XlPivotFieldOrientation dispid 134;
    property ShowAllItems: WordBool dispid 452;
    property ParentField: PivotField readonly dispid 732;
    property ParentItems[Index: OleVariant]: OleVariant readonly dispid 729;
    function PivotItems(Index: OleVariant): OleVariant; dispid 737;
    property Position: OleVariant dispid 133;
    property SourceName: WideString readonly dispid 721;
    function Subtotals(Index: OleVariant): OleVariant; dispid 733;
    property BaseField: OleVariant dispid 734;
    property BaseItem: OleVariant dispid 735;
    property TotalLevels: OleVariant readonly dispid 724;
    property Value: WideString dispid 6;
    property VisibleItems[Index: OleVariant]: OleVariant readonly dispid 727;
    function CalculatedItems: CalculatedItems; dispid 1507;
    procedure Delete; dispid 117;
    property DragToColumn: WordBool dispid 1508;
    property DragToHide: WordBool dispid 1509;
    property DragToPage: WordBool dispid 1510;
    property DragToRow: WordBool dispid 1511;
    property Formula: WideString dispid 261;
    property IsCalculated: WordBool readonly dispid 1512;
    property MemoryUsed: Integer readonly dispid 372;
    property ServerBased: WordBool dispid 1513;
    procedure AutoSort(Order: Integer; const Field: WideString); dispid 1514;
    procedure AutoShow(Type_, Range, Count: Integer; const Field: WideString); dispid 1515;
    property AutoSortOrder: Integer readonly dispid 1516;
    property AutoSortField: WideString readonly dispid 1517;
    property AutoShowType: Integer readonly dispid 1518;
    property AutoShowRange: Integer readonly dispid 1519;
    property AutoShowCount: Integer readonly dispid 1520;
    property AutoShowField: WideString readonly dispid 1521;
  end;

  PivotFields = dispinterface
    ['{00020875-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotTable readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  CalculatedFields = dispinterface
    ['{00024420-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(const Name, Formula: WideString): PivotField; dispid 181;
    function Item(Index: OleVariant): PivotField; dispid 170;
    property _Default[Field: OleVariant]: PivotField readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

  PivotItem = dispinterface
    ['{00020876-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotField readonly dispid 150;
    property ChildItems[Index: OleVariant]: OleVariant readonly dispid 730;
    property DataRange: Range readonly dispid 720;
    property _Default: WideString dispid 0;
    property LabelRange: Range readonly dispid 719;
    property Name: WideString dispid 110;
    property ParentItem: PivotItem readonly dispid 741;
    property ParentShowDetail: WordBool readonly dispid 739;
    property Position: Integer dispid 133;
    property ShowDetail: WordBool dispid 585;
    property SourceName: OleVariant readonly dispid 721;
    property Value: WideString dispid 6;
    property Visible: WordBool dispid 558;
    procedure Delete; dispid 117;
    property IsCalculated: WordBool readonly dispid 1512;
    property RecordCount: Integer readonly dispid 1478;
    property Formula: WideString dispid 261;
  end;

  PivotItems = dispinterface
    ['{00020877-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotField readonly dispid 150;
    procedure Add(const Name: WideString); dispid 181;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  CalculatedItems = dispinterface
    ['{00024421-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(const Name, Formula: WideString): PivotItem; dispid 181;
    function Item(Index: OleVariant): PivotItem; dispid 170;
    property _Default[Field: OleVariant]: PivotItem readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Characters = dispinterface
    ['{00020878-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Caption: WideString dispid 139;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    procedure Insert(const String_: WideString); dispid 252;
    property Text: WideString dispid 138;
    property PhoneticCharacters: WideString dispid 1522;
  end;

  Dialogs = dispinterface
    ['{00020879-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: XlBuiltInDialog]: Dialog readonly dispid 170;
    property _Default[Index: XlBuiltInDialog]: Dialog readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  Dialog = dispinterface
    ['{0002087A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Show(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30: OleVariant): WordBool; dispid 496;
  end;

  SoundNote = dispinterface
    ['{0002087B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    procedure Import(const Filename: WideString); dispid 917;
    procedure Play; dispid 918;
    procedure Record_; dispid 919;
  end;

  Button = dispinterface
    ['{0002087D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Accelerator: OleVariant dispid 846;
    property CancelButton: WordBool dispid 858;
    property DefaultButton: WordBool dispid 857;
    property DismissButton: WordBool dispid 859;
    property HelpButton: WordBool dispid 860;
    property PhoneticAccelerator: OleVariant dispid 1121;
  end;

  Buttons = dispinterface
    ['{0002087E-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Accelerator: OleVariant dispid 846;
    property CancelButton: WordBool dispid 858;
    property DefaultButton: WordBool dispid 857;
    property DismissButton: WordBool dispid 859;
    property HelpButton: WordBool dispid 860;
    property PhoneticAccelerator: OleVariant dispid 1121;
    function Add(Left, Top, Width, Height: Double): Button; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  CheckBox = dispinterface
    ['{0002087F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
  end;

  CheckBoxes = dispinterface
    ['{00020880-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
    function Add(Left, Top, Width, Height: Double): CheckBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  OptionButton = dispinterface
    ['{00020881-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
    property GroupBox: GroupBox readonly dispid 833;
  end;

  OptionButtons = dispinterface
    ['{00020882-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
    property GroupBox: GroupBox readonly dispid 833;
    function Add(Left, Top, Width, Height: Double): OptionButton; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  EditBox = dispinterface
    ['{00020883-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property InputType: Integer dispid 854;
    property LinkedObject: WideString readonly dispid 862;
    property MultiLine: WordBool dispid 855;
    property PasswordEdit: WordBool dispid 1162;
  end;

  EditBoxes = dispinterface
    ['{00020884-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property InputType: Integer dispid 854;
    property MultiLine: WordBool dispid 855;
    property PasswordEdit: WordBool dispid 1162;
    function Add(Left, Top, Width, Height: Double): EditBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): OleVariant; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  ScrollBar = dispinterface
    ['{00020885-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
    property LargeChange: Integer dispid 845;
  end;

  ScrollBars = dispinterface
    ['{00020886-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
    property LargeChange: Integer dispid 845;
    function Add(Left, Top, Width, Height: Double): ScrollBar; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  ListBox = dispinterface
    ['{00020887-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text, Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    property LinkedObject: OleVariant readonly dispid 862;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListCount: Integer readonly dispid 849;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property MultiSelect: Integer dispid 32;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
  end;

  ListBoxes = dispinterface
    ['{00020888-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text, Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property MultiSelect: Integer dispid 32;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
    function Add(Left, Top, Width, Height: Double): ListBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  GroupBox = dispinterface
    ['{00020889-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Display3DShading: WordBool dispid 1122;
    property PhoneticAccelerator: OleVariant dispid 1121;
  end;

  GroupBoxes = dispinterface
    ['{0002088A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Display3DShading: WordBool dispid 1122;
    property PhoneticAccelerator: OleVariant dispid 1121;
    function Add(Left, Top, Width, Height: Double): GroupBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  DropDown = dispinterface
    ['{0002088B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text, Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    property LinkedObject: OleVariant readonly dispid 862;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListCount: Integer readonly dispid 849;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    property DropDownLines: Integer dispid 848;
    property Text: WideString dispid 138;
  end;

  DropDowns = dispinterface
    ['{0002088C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text, Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    property DropDownLines: Integer dispid 848;
    property Text: WideString dispid 138;
    function Add(Left, Top, Width, Height: Double; Editable: OleVariant): DropDown; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Spinner = dispinterface
    ['{0002088D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
  end;

  Spinners = dispinterface
    ['{0002088E-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
    function Add(Left, Top, Width, Height: Double): Spinner; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  DialogFrame = dispinterface
    ['{0002088F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    procedure Select(Replace: OleVariant); dispid 235;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
  end;

  Label_ = dispinterface
    ['{00020890-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property PhoneticAccelerator: OleVariant dispid 1121;
  end;

  Labels = dispinterface
    ['{00020891-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property PhoneticAccelerator: OleVariant dispid 1121;
    function Add(Left, Top, Width, Height: Double): Label_; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Panes = dispinterface
    ['{00020894-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: Pane readonly dispid 170;
    property _Default[Index: Integer]: Pane readonly dispid 0; default;
  end;

  Pane = dispinterface
    ['{00020895-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property Index: Integer readonly dispid 486;
    procedure LargeScroll(Down, Up, ToRight, ToLeft: OleVariant); dispid 547;
    property ScrollColumn: Integer dispid 654;
    property ScrollRow: Integer dispid 655;
    procedure SmallScroll(Down, Up, ToRight, ToLeft: OleVariant); dispid 548;
    property VisibleRange: Range readonly dispid 1118;
  end;

  Scenarios = dispinterface
    ['{00020896-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Name: WideString; ChangingCells, Values, Comment, Locked, Hidden: OleVariant): Scenario; dispid 181;
    property Count: Integer readonly dispid 118;
    procedure CreateSummary(ReportType: XlSummaryReportType; ResultCells: OleVariant); dispid 913;
    function Item(Index: OleVariant): Scenario; dispid 170;
    procedure Merge(Source: OleVariant); dispid 564;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Scenario = dispinterface
    ['{00020897-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure ChangeScenario(ChangingCells, Values: OleVariant); dispid 912;
    property ChangingCells: Range readonly dispid 911;
    property Comment: WideString dispid 910;
    procedure Delete; dispid 117;
    property Hidden: WordBool dispid 268;
    property Index: Integer readonly dispid 486;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    procedure Show; dispid 496;
    property Values[Index: OleVariant]: OleVariant readonly dispid 164;
  end;

  GroupObject = dispinterface
    ['{00020898-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property AutoSize: WordBool dispid 614;
    property Border: Border readonly dispid 128;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property _Default: Integer dispid 0;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Interior: Interior readonly dispid 129;
    property Orientation: OleVariant dispid 134;
    property RoundedCorners: WordBool dispid 619;
    property Shadow: WordBool dispid 103;
    function Ungroup: IDispatch; dispid 244;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
  end;

  GroupObjects = dispinterface
    ['{00020899-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property AutoSize: WordBool dispid 614;
    property Border: Border readonly dispid 128;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property _Default: Integer dispid 0;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Interior: Interior readonly dispid 129;
    property Orientation: OleVariant dispid 134;
    property RoundedCorners: WordBool dispid 619;
    property Shadow: WordBool dispid 103;
    function Ungroup: IDispatch; dispid 244;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Line = dispinterface
    ['{0002089A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property Border: Border readonly dispid 128;
  end;

  Lines = dispinterface
    ['{0002089B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property Border: Border readonly dispid 128;
    function Add(X1, Y1, X2, Y2: Double): Line; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Rectangle = dispinterface
    ['{0002089C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property RoundedCorners: WordBool dispid 619;
  end;

  Rectangles = dispinterface
    ['{0002089D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property RoundedCorners: WordBool dispid 619;
    function Add(Left, Top, Width, Height: Double): Rectangle; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Oval = dispinterface
    ['{0002089E-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
  end;

  Ovals = dispinterface
    ['{0002089F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    function Add(Left, Top, Width, Height: Double): Oval; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Arc = dispinterface
    ['{000208A0-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
  end;

  Arcs = dispinterface
    ['{000208A1-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    function Add(X1, Y1, X2, Y2: Double): Arc; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  OLEObjectEvents = dispinterface
    ['{00024410-0000-0000-C000-000000000046}']
    procedure GotFocus; dispid 1541;
    procedure LostFocus; dispid 1542;
  end;

  _OLEObject = dispinterface
    ['{000208A2-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid -2147417964;
    property Creator: XlCreator readonly dispid -2147417963;
    property Parent: IDispatch readonly dispid -2147417962;
    property BottomRightCell: Range readonly dispid -2147417497;
    procedure BringToFront; dispid -2147417510;
    procedure Copy; dispid -2147417561;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid -2147417899;
    procedure Cut; dispid -2147417547;
    procedure Delete; dispid -2147417995;
    function Duplicate: IDispatch; dispid -2147417073;
    property Enabled: WordBool dispid -2147417512;
    property Height: Double dispid -2147417989;
    property Index: Integer readonly dispid -2147417626;
    property Left: Double dispid -2147417985;
    property Locked: WordBool dispid -2147417843;
    property Name: WideString dispid -2147418002;
    property OnAction: WideString dispid -2147417516;
    property Placement: OleVariant dispid -2147417495;
    property PrintObject: WordBool dispid -2147417494;
    procedure Select(Replace: OleVariant); dispid -2147417877;
    procedure SendToBack; dispid -2147417507;
    property Top: Double dispid -2147417986;
    property TopLeftCell: Range readonly dispid -2147417492;
    property Visible: WordBool dispid -2147417554;
    property Width: Double dispid -2147417990;
    property ZOrder: Integer readonly dispid -2147417490;
    property ShapeRange: ShapeRange readonly dispid -2147416584;
    property Border: Border readonly dispid -2147417984;
    property Interior: Interior readonly dispid -2147417983;
    property Shadow: WordBool dispid -2147418009;
    procedure Activate; dispid -2147417808;
    property AutoLoad: WordBool dispid -2147416926;
    property AutoUpdate: WordBool dispid -2147417064;
    property Object_: IDispatch readonly dispid -2147417063;
    property OLEType: OleVariant readonly dispid -2147417058;
    property SourceName: WideString dispid -2147417391;
    procedure Update; dispid -2147417432;
    procedure Verb(Verb: XlOLEVerb); dispid -2147417506;
    property LinkedCell: WideString dispid -2147417054;
    property ListFillRange: WideString dispid -2147417265;
    property ProgId: WideString readonly dispid -2147416589;
  end;

  OLEObjects = dispinterface
    ['{000208A3-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property AutoLoad: WordBool dispid 1186;
    property SourceName: WideString dispid 721;
    function Add(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height: OleVariant): OLEObject; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  TextBox = dispinterface
    ['{000208A4-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property RoundedCorners: WordBool dispid 619;
    property Shadow: WordBool dispid 103;
  end;

  TextBoxes = dispinterface
    ['{000208A5-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property RoundedCorners: WordBool dispid 619;
    property Shadow: WordBool dispid 103;
    function Add(Left, Top, Width, Height: Double): TextBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Picture = dispinterface
    ['{000208A6-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property Formula: WideString dispid 261;
  end;

  Pictures = dispinterface
    ['{000208A7-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property Formula: WideString dispid 261;
    function Add(Left, Top, Width, Height: Double): Picture; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Insert(const Filename: WideString; Converter: OleVariant): Picture; dispid 252;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
    function Paste(Link: OleVariant): Picture; dispid 211;
  end;

  Drawing = dispinterface
    ['{000208A8-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    procedure AddVertex(Left, Top: Double); dispid 601;
    procedure Reshape(Vertex: Integer; Insert: WordBool; Left, Top: OleVariant); dispid 604;
    property Vertices[Index1, Index2: OleVariant]: OleVariant readonly dispid 621;
  end;

  Drawings = dispinterface
    ['{000208A9-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    procedure Reshape(Vertex: Integer; Insert: WordBool; Left, Top: OleVariant); dispid 604;
    function Add(X1, Y1, X2, Y2: Double; Closed: WordBool): Drawing; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  RoutingSlip = dispinterface
    ['{000208AA-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Delivery: XlRoutingSlipDelivery dispid 955;
    property Message: OleVariant dispid 954;
    function Recipients(Index: OleVariant): OleVariant; dispid 952;
    procedure Reset; dispid 555;
    property ReturnWhenDone: WordBool dispid 956;
    property Status: XlRoutingSlipStatus readonly dispid 958;
    property Subject: OleVariant dispid 953;
    property TrackStatus: WordBool dispid 957;
  end;

  Outline = dispinterface
    ['{000208AB-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AutomaticStyles: WordBool dispid 959;
    procedure ShowLevels(RowLevels, ColumnLevels: OleVariant); dispid 960;
    property SummaryColumn: XlSummaryColumn dispid 961;
    property SummaryRow: XlSummaryRow dispid 902;
  end;

  Module = dispinterface
    ['{000208AD-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    procedure Copy(Before, After: OleVariant); dispid 551;
    procedure Delete; dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index: Integer readonly dispid 486;
    procedure Move(Before, After: OleVariant); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick: WideString dispid 628;
    property OnSheetActivate: WideString dispid 1031;
    property OnSheetDeactivate: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant); dispid 282;
    property ProtectContents: WordBool readonly dispid 292;
    property ProtectionMode: WordBool readonly dispid 1159;
    procedure SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant); dispid 284;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure Unprotect(Password: OleVariant); dispid 285;
    property Visible: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    procedure InsertFile(Filename, Merge: OleVariant); dispid 584;
  end;

  Modules = dispinterface
    ['{000208AE-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before, After, Count: OleVariant): Module; dispid 181;
    procedure Copy(Before, After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before, After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

  DialogSheet = dispinterface
    ['{000208AF-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    procedure Copy(Before, After: OleVariant); dispid 551;
    procedure Delete; dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index: Integer readonly dispid 486;
    procedure Move(Before, After: OleVariant); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick: WideString dispid 628;
    property OnSheetActivate: WideString dispid 1031;
    property OnSheetDeactivate: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly: OleVariant); dispid 282;
    property ProtectContents: WordBool readonly dispid 292;
    property ProtectDrawingObjects: WordBool readonly dispid 293;
    property ProtectionMode: WordBool readonly dispid 1159;
    property ProtectScenarios: WordBool readonly dispid 294;
    procedure SaveAs(const Filename: WideString; FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout: OleVariant); dispid 284;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure Unprotect(Password: OleVariant); dispid 285;
    property Visible: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    function Arcs(Index: OleVariant): IDispatch; dispid 760;
    function Buttons(Index: OleVariant): IDispatch; dispid 557;
    property EnableCalculation: WordBool dispid 1424;
    function ChartObjects(Index: OleVariant): IDispatch; dispid 1060;
    function CheckBoxes(Index: OleVariant): IDispatch; dispid 824;
    procedure CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, IgnoreInitialAlefHamza, IgnoreFinalYaa, SpellScript: OleVariant); dispid 505;
    property DisplayAutomaticPageBreaks: WordBool dispid 643;
    function Drawings(Index: OleVariant): IDispatch; dispid 772;
    function DrawingObjects(Index: OleVariant): IDispatch; dispid 88;
    function DropDowns(Index: OleVariant): IDispatch; dispid 836;
    property EnableAutoFilter: WordBool dispid 1156;
    property EnableSelection: XlEnableSelection dispid 1425;
    property EnableOutlining: WordBool dispid 1157;
    property EnablePivotTable: WordBool dispid 1158;
    function Evaluate(Name: OleVariant): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant): OleVariant; dispid -5;
    procedure ResetAllPageBreaks; dispid 1426;
    function GroupBoxes(Index: OleVariant): IDispatch; dispid 834;
    function GroupObjects(Index: OleVariant): IDispatch; dispid 1113;
    function Labels(Index: OleVariant): IDispatch; dispid 841;
    function Lines(Index: OleVariant): IDispatch; dispid 767;
    function ListBoxes(Index: OleVariant): IDispatch; dispid 832;
    property Names: Names readonly dispid 442;
    function OLEObjects(Index: OleVariant): IDispatch; dispid 799;
    function OptionButtons(Index: OleVariant): IDispatch; dispid 826;
    function Ovals(Index: OleVariant): IDispatch; dispid 801;
    procedure Paste(Destination, Link: OleVariant); dispid 211;
    procedure PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel: OleVariant); dispid 1027;
    function Pictures(Index: OleVariant): IDispatch; dispid 771;
    function Rectangles(Index: OleVariant): IDispatch; dispid 774;
    property ScrollArea: WideString dispid 1433;
    function ScrollBars(Index: OleVariant): IDispatch; dispid 830;
    function Spinners(Index: OleVariant): IDispatch; dispid 838;
    function TextBoxes(Index: OleVariant): IDispatch; dispid 777;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property QueryTables: QueryTables readonly dispid 1434;
    property DisplayPageBreaks: WordBool dispid 1435;
    property Comments: Comments readonly dispid 575;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
    procedure ClearCircles; dispid 1436;
    procedure CircleInvalid; dispid 1437;
    property DisplayRightToLeft: Integer dispid 648;
    property AutoFilter: AutoFilter readonly dispid 793;
    property DefaultButton: OleVariant dispid 857;
    property DialogFrame: DialogFrame readonly dispid 839;
    function EditBoxes(Index: OleVariant): IDispatch; dispid 828;
    property Focus: OleVariant dispid 814;
    function Hide(Cancel: OleVariant): WordBool; dispid 813;
    function Show: WordBool; dispid 496;
  end;

  DialogSheets = dispinterface
    ['{000208B0-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before, After, Count: OleVariant): DialogSheet; dispid 181;
    procedure Copy(Before, After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before, After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

  Worksheets = dispinterface
    ['{000208B1-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before, After, Count, Type_: OleVariant): IDispatch; dispid 181;
    procedure Copy(Before, After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    procedure FillAcrossSheets(const Range: Range; Type_: XlFillWith); dispid 469;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before, After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From, To_, Copies, Preview, ActivePrinter, PrintToFile, Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

  PageSetup = dispinterface
    ['{000208B4-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BlackAndWhite: WordBool dispid 1009;
    property BottomMargin: Double dispid 1002;
    property CenterFooter: WideString dispid 1010;
    property CenterHeader: WideString dispid 1011;
    property CenterHorizontally: WordBool dispid 1005;
    property CenterVertically: WordBool dispid 1006;
    property ChartSize: XlObjectSize dispid 1012;
    property Draft: WordBool dispid 1020;
    property FirstPageNumber: Integer dispid 1008;
    property FitToPagesTall: OleVariant dispid 1013;
    property FitToPagesWide: OleVariant dispid 1014;
    property FooterMargin: Double dispid 1015;
    property HeaderMargin: Double dispid 1016;
    property LeftFooter: WideString dispid 1017;
    property LeftHeader: WideString dispid 1018;
    property LeftMargin: Double dispid 999;
    property Order: XlOrder dispid 192;
    property Orientation: XlPageOrientation dispid 134;
    property PaperSize: XlPaperSize dispid 1007;
    property PrintArea: WideString dispid 1019;
    property PrintGridlines: WordBool dispid 1004;
    property PrintHeadings: WordBool dispid 1003;
    property PrintNotes: WordBool dispid 1021;
    function PrintQuality(Index: OleVariant): OleVariant; dispid 1022;
    property PrintTitleColumns: WideString dispid 1023;
    property PrintTitleRows: WideString dispid 1024;
    property RightFooter: WideString dispid 1025;
    property RightHeader: WideString dispid 1026;
    property RightMargin: Double dispid 1000;
    property TopMargin: Double dispid 1001;
    property Zoom: OleVariant dispid 663;
    property PrintComments: XlPrintLocation dispid 1524;
  end;

  Names = dispinterface
    ['{000208B8-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local: OleVariant): Name; dispid 181;
    function Item(Index, IndexLocal, RefersTo: OleVariant): Name; dispid 170;
    function _Default(Index, IndexLocal, RefersTo: OleVariant): Name; dispid 0;
    property Count: Integer readonly dispid 118;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  Name = dispinterface
    ['{000208B9-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property _Default: WideString readonly dispid 0;
    property Index: Integer readonly dispid 486;
    property Category: WideString dispid 934;
    property CategoryLocal: WideString dispid 935;
    procedure Delete; dispid 117;
    property MacroType: XlXLMMacroType dispid 936;
    property Name: WideString dispid 110;
    property RefersTo: OleVariant dispid 938;
    property ShortcutKey: WideString dispid 597;
    property Value: WideString dispid 6;
    property Visible: WordBool dispid 558;
    property NameLocal: WideString dispid 937;
    property RefersToLocal: OleVariant dispid 939;
    property RefersToR1C1: OleVariant dispid 940;
    property RefersToR1C1Local: OleVariant dispid 941;
    property RefersToRange: Range readonly dispid 1160;
  end;

  ChartObject = dispinterface
    ['{000208CF-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure Activate; dispid 304;
    property Chart: Chart readonly dispid 7;
    property ProtectChartObject: WordBool dispid 1529;
    property RoundedCorners: WordBool dispid 619;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
  end;

  ChartObjects = dispinterface
    ['{000208D0-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property RoundedCorners: WordBool dispid 619;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    function Add(Left, Top, Width, Height: Double): ChartObject; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Mailer = dispinterface
    ['{000208D1-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BCCRecipients: OleVariant dispid 983;
    property CCRecipients: OleVariant dispid 982;
    property Enclosures: OleVariant dispid 984;
    property Received: WordBool readonly dispid 986;
    property SendDateTime: TDateTime readonly dispid 987;
    property Sender: WideString readonly dispid 988;
    property Subject: WideString dispid 953;
    property ToRecipients: OleVariant dispid 981;
    property WhichAddress: OleVariant dispid 974;
  end;

  CustomViews = dispinterface
    ['{00024422-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(ViewName: OleVariant): CustomView; dispid 170;
    function Add(const ViewName: WideString; PrintSettings, RowColSettings: OleVariant): CustomView; dispid 181;
    property _Default[ViewName: OleVariant]: CustomView readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  CustomView = dispinterface
    ['{00024423-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    property PrintSettings: WordBool readonly dispid 1577;
    property RowColSettings: WordBool readonly dispid 1578;
    procedure Show; dispid 496;
    procedure Delete; dispid 117;
  end;

  FormatConditions = dispinterface
    ['{00024424-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): FormatCondition; dispid 170;
    function Add(Type_: XlFormatConditionType; Operator, Formula1, Formula2: OleVariant): FormatCondition; dispid 181;
    property _Default[Index: OleVariant]: FormatCondition readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Delete; dispid 117;
  end;

  FormatCondition = dispinterface
    ['{00024425-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Modify(Type_: XlFormatConditionType; Operator, Formula1, Formula2: OleVariant); dispid 1581;
    property Type_: Integer readonly dispid 108;
    property Operator: Integer readonly dispid 797;
    property Formula1: WideString readonly dispid 1579;
    property Formula2: WideString readonly dispid 1580;
    property Interior: Interior readonly dispid 129;
    property Borders: Borders readonly dispid 435;
    property Font: Font readonly dispid 146;
    procedure Delete; dispid 117;
  end;

  Comments = dispinterface
    ['{00024426-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: Integer): Comment; dispid 170;
    property _Default[Index: Integer]: Comment readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  Comment = dispinterface
    ['{00024427-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Author: WideString readonly dispid 574;
    property Shape: Shape readonly dispid 1582;
    property Visible: WordBool dispid 558;
    function Text(Text, Start, Overwrite: OleVariant): WideString; dispid 138;
    procedure Delete; dispid 117;
    function Next: Comment; dispid 502;
    function Previous: Comment; dispid 503;
  end;

  RefreshEvents = dispinterface
    ['{0002441B-0000-0000-C000-000000000046}']
    procedure BeforeRefresh(var Cancel: WordBool); dispid 1596;
    procedure AfterRefresh(Success: WordBool); dispid 1597;
  end;

  _QueryTable = dispinterface
    ['{00024428-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString dispid 110;
    property FieldNames: WordBool dispid 1584;
    property RowNumbers: WordBool dispid 1585;
    property FillAdjacentFormulas: WordBool dispid 1586;
    property HasAutoFormat: WordBool dispid 695;
    property RefreshOnFileOpen: WordBool dispid 1479;
    property Refreshing: WordBool readonly dispid 1587;
    property FetchedRowOverflow: WordBool readonly dispid 1588;
    property BackgroundQuery: WordBool dispid 1427;
    procedure CancelRefresh; dispid 1589;
    property RefreshStyle: XlCellInsertionMode dispid 1590;
    property EnableRefresh: WordBool dispid 1477;
    property SavePassword: WordBool dispid 1481;
    property Destination: Range readonly dispid 681;
    property Connection: OleVariant dispid 1432;
    property Sql: OleVariant dispid 1480;
    property PostText: WideString dispid 1591;
    property ResultRange: Range readonly dispid 1592;
    procedure Delete; dispid 117;
    function Refresh(BackgroundQuery: OleVariant): WordBool; dispid 1417;
    property Parameters: Parameters readonly dispid 1593;
    property Recordset: IDispatch dispid 1165;
    property SaveData: WordBool dispid 692;
    property TablesOnlyFromHTML: WordBool dispid 1594;
    property EnableEditing: WordBool dispid 1595;
  end;

  QueryTables = dispinterface
    ['{00024429-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(Connection: OleVariant; const Destination: Range; Sql: OleVariant): QueryTable; dispid 181;
    function Item(Index: OleVariant): QueryTable; dispid 170;
    property _Default[Index: OleVariant]: QueryTable readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Parameter = dispinterface
    ['{0002442A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property DataType: XlParameterDataType dispid 722;
    property Type_: XlParameterType readonly dispid 108;
    property PromptString: WideString readonly dispid 1599;
    property Value: OleVariant readonly dispid 6;
    property SourceRange: Range readonly dispid 1600;
    property Name: WideString dispid 110;
    procedure SetParam(Type_: XlParameterType; Value: OleVariant); dispid 1601;
  end;

  Parameters = dispinterface
    ['{0002442B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Name: WideString; iDataType: OleVariant): Parameter; dispid 181;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Parameter; dispid 170;
    property _Default[Index: OleVariant]: Parameter readonly dispid 0; default;
    procedure Delete; dispid 117;
    function _NewEnum: IUnknown; dispid -4;
  end;

  ODBCError = dispinterface
    ['{0002442C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property SqlState: WideString readonly dispid 1603;
    property ErrorString: WideString readonly dispid 1490;
  end;

  ODBCErrors = dispinterface
    ['{0002442D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: Integer): ODBCError; dispid 170;
    property _Default[Index: Integer]: ODBCError readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Validation = dispinterface
    ['{0002442F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Add(Type_: XlDVType; AlertStyle, Operator, Formula1, Formula2: OleVariant); dispid 181;
    property AlertStyle: Integer readonly dispid 1605;
    property IgnoreBlank: WordBool dispid 1606;
    property IMEMode: Integer dispid 1607;
    property InCellDropdown: WordBool dispid 1608;
    procedure Delete; dispid 117;
    property ErrorMessage: WideString dispid 1609;
    property ErrorTitle: WideString dispid 1610;
    property InputMessage: WideString dispid 1611;
    property InputTitle: WideString dispid 1612;
    property Formula1: WideString readonly dispid 1579;
    property Formula2: WideString readonly dispid 1580;
    procedure Modify(Type_, AlertStyle, Operator, Formula1, Formula2: OleVariant); dispid 1581;
    property Operator: Integer readonly dispid 797;
    property ShowError: WordBool dispid 1613;
    property ShowInput: WordBool dispid 1614;
    property Type_: Integer readonly dispid 108;
    property Value: WordBool readonly dispid 6;
  end;

  Hyperlinks = dispinterface
    ['{00024430-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Anchor: IDispatch; const Address: WideString; SubAddress: OleVariant): IDispatch; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Hyperlink readonly dispid 170;
    property _Default[Index: OleVariant]: Hyperlink readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Delete; dispid 117;
  end;

  Hyperlink = dispinterface
    ['{00024431-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    property Range: Range readonly dispid 197;
    property Shape: Shape readonly dispid 1582;
    property SubAddress: WideString dispid 1471;
    property Address: WideString dispid 236;
    property Type_: Integer readonly dispid 108;
    procedure AddToFavorites; dispid 1476;
    procedure Delete; dispid 117;
    procedure Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo: OleVariant); dispid 1616;
  end;

  AutoFilter = dispinterface
    ['{00024432-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Range: Range readonly dispid 197;
    property Filters: Filters readonly dispid 1617;
  end;

  Filters = dispinterface
    ['{00024433-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property _Default[Index: Integer]: Filter readonly dispid 0; default;
    property Item[Index: Integer]: Filter readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  Filter = dispinterface
    ['{00024434-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property On_: WordBool readonly dispid 1618;
    property Criteria1: OleVariant readonly dispid 796;
    property Operator: XlAutoFilterOperator readonly dispid 797;
    property Criteria2: OleVariant readonly dispid 798;
  end;

  AutoCorrect = dispinterface
    ['{000208D4-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddReplacement(const What, Replacement: WideString); dispid 1146;
    property CapitalizeNamesOfDays: WordBool dispid 1150;
    procedure DeleteReplacement(const What: WideString); dispid 1147;
    function ReplacementList(Index: OleVariant): OleVariant; dispid 1151;
    property ReplaceText: WordBool dispid 1148;
    property TwoInitialCapitals: WordBool dispid 1149;
    property CorrectSentenceCap: WordBool dispid 1619;
    property CorrectCapsLock: WordBool dispid 1620;
  end;

  Border = dispinterface
    ['{00020854-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property LineStyle: OleVariant dispid 119;
    property Weight: OleVariant dispid 120;
  end;

  Interior = dispinterface
    ['{00020870-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property InvertIfNegative: OleVariant dispid 132;
    property Pattern: OleVariant dispid 95;
    property PatternColor: OleVariant dispid 100;
    property PatternColorIndex: OleVariant dispid 98;
  end;

  ChartFillFormat = dispinterface
    ['{00024435-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure OneColorGradient(Style: MsoGradientStyle; Variant: Integer; Degree: Single); dispid 1621;
    procedure TwoColorGradient(Style: MsoGradientStyle; Variant: Integer); dispid 1624;
    procedure PresetTextured(PresetTexture: MsoPresetTexture); dispid 1625;
    procedure Solid; dispid 1627;
    procedure Patterned(Pattern: MsoPatternType); dispid 1628;
    procedure UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement: OleVariant); dispid 1629;
    procedure UserTextured(const TextureFile: WideString); dispid 1634;
    procedure PresetGradient(Style: MsoGradientStyle; Variant: Integer; PresetGradientType: MsoPresetGradientType); dispid 1636;
    property BackColor: ChartColorFormat readonly dispid 1638;
    property ForeColor: ChartColorFormat readonly dispid 1639;
    property GradientColorType: MsoGradientColorType readonly dispid 1640;
    property GradientDegree: Single readonly dispid 1641;
    property GradientStyle: MsoGradientStyle readonly dispid 1642;
    property GradientVariant: Integer readonly dispid 1643;
    property Pattern: MsoPatternType readonly dispid 95;
    property PresetGradientType: MsoPresetGradientType readonly dispid 1637;
    property PresetTexture: MsoPresetTexture readonly dispid 1626;
    property TextureName: WideString readonly dispid 1644;
    property TextureType: MsoTextureType readonly dispid 1645;
    property Type_: MsoFillType readonly dispid 108;
    property Visible: MsoTriState dispid 558;
  end;

  ChartColorFormat = dispinterface
    ['{00024436-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property SchemeColor: Integer dispid 1646;
    property RGB: Integer readonly dispid 1055;
    property _Default: Integer readonly dispid 0;
    property Type_: Integer readonly dispid 108;
  end;

  Axis = dispinterface
    ['{00020848-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AxisBetweenCategories: WordBool dispid 45;
    property AxisGroup: XlAxisGroup readonly dispid 47;
    property AxisTitle: AxisTitle readonly dispid 82;
    property Border: Border readonly dispid 128;
    property CategoryNames: OleVariant dispid 156;
    property Crosses: XlAxisCrosses dispid 42;
    property CrossesAt: Double dispid 43;
    procedure Delete; dispid 117;
    property HasMajorGridlines: WordBool dispid 24;
    property HasMinorGridlines: WordBool dispid 25;
    property HasTitle: WordBool dispid 54;
    property MajorGridlines: Gridlines readonly dispid 89;
    property MajorTickMark: XlTickMark dispid 26;
    property MajorUnit: Double dispid 37;
    property MajorUnitIsAuto: WordBool dispid 38;
    property MaximumScale: Double dispid 35;
    property MaximumScaleIsAuto: WordBool dispid 36;
    property MinimumScale: Double dispid 33;
    property MinimumScaleIsAuto: WordBool dispid 34;
    property MinorGridlines: Gridlines readonly dispid 90;
    property MinorTickMark: XlTickMark dispid 27;
    property MinorUnit: Double dispid 39;
    property MinorUnitIsAuto: WordBool dispid 40;
    property ReversePlotOrder: WordBool dispid 44;
    property ScaleType: XlScaleType dispid 41;
    procedure Select; dispid 235;
    property TickLabelPosition: XlTickLabelPosition dispid 28;
    property TickLabels: TickLabels readonly dispid 91;
    property TickLabelSpacing: Integer dispid 29;
    property TickMarkSpacing: Integer dispid 31;
    property Type_: XlAxisType dispid 108;
    property BaseUnit: XlTimeUnit dispid 1647;
    property BaseUnitIsAuto: WordBool dispid 1648;
    property MajorUnitScale: XlTimeUnit dispid 1649;
    property MinorUnitScale: XlTimeUnit dispid 1650;
    property CategoryType: XlCategoryType dispid 1651;
    property Left: Double readonly dispid 127;
    property Top: Double readonly dispid 126;
    property Width: Double readonly dispid 122;
    property Height: Double readonly dispid 123;
  end;

  ChartTitle = dispinterface
    ['{00020849-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Left: Double dispid 127;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property Text: WideString dispid 138;
    property Top: Double dispid 126;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

  AxisTitle = dispinterface
    ['{0002084A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Left: Double dispid 127;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property Text: WideString dispid 138;
    property Top: Double dispid 126;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

  ChartGroup = dispinterface
    ['{00020859-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AxisGroup: XlAxisGroup dispid 47;
    property DoughnutHoleSize: Integer dispid 1126;
    property DownBars: DownBars readonly dispid 141;
    property DropLines: DropLines readonly dispid 142;
    property FirstSliceAngle: Integer dispid 63;
    property GapWidth: Integer dispid 51;
    property HasDropLines: WordBool dispid 61;
    property HasHiLoLines: WordBool dispid 62;
    property HasRadarAxisLabels: WordBool dispid 64;
    property HasSeriesLines: WordBool dispid 65;
    property HasUpDownBars: WordBool dispid 66;
    property HiLoLines: HiLoLines readonly dispid 143;
    property Index: Integer readonly dispid 486;
    property Overlap: Integer dispid 56;
    property RadarAxisLabels: TickLabels readonly dispid 144;
    function SeriesCollection(Index: OleVariant): IDispatch; dispid 68;
    property SeriesLines: SeriesLines readonly dispid 145;
    property SubType: Integer dispid 109;
    property Type_: Integer dispid 108;
    property UpBars: UpBars readonly dispid 140;
    property VaryByCategories: WordBool dispid 60;
    property SizeRepresents: XlSizeRepresents dispid 1652;
    property BubbleScale: Integer dispid 1653;
    property ShowNegativeBubbles: WordBool dispid 1654;
    property SplitType: XlChartSplitType dispid 1655;
    property SplitValue: OleVariant dispid 1656;
    property SecondPlotSize: Integer dispid 1657;
    property Has3DShading: WordBool dispid 1658;
  end;

  ChartGroups = dispinterface
    ['{0002085A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): ChartGroup; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Axes = dispinterface
    ['{0002085B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Type_: XlAxisType; AxisGroup: XlAxisGroup): Axis; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Points = dispinterface
    ['{00020869-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: Integer): Point; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Point = dispinterface
    ['{0002086A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey, AutoText: OleVariant); dispid 151;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    procedure Copy; dispid 551;
    property DataLabel: DataLabel readonly dispid 158;
    procedure Delete; dispid 117;
    property Explosion: Integer dispid 182;
    property HasDataLabel: WordBool dispid 77;
    property Interior: Interior readonly dispid 129;
    property InvertIfNegative: WordBool dispid 132;
    property MarkerBackgroundColor: Integer dispid 73;
    property MarkerBackgroundColorIndex: XlColorIndex dispid 74;
    property MarkerForegroundColor: Integer dispid 75;
    property MarkerForegroundColorIndex: XlColorIndex dispid 76;
    property MarkerSize: Integer dispid 231;
    property MarkerStyle: XlMarkerStyle dispid 72;
    procedure Paste; dispid 211;
    property PictureType: XlChartPictureType dispid 161;
    property PictureUnit: Integer dispid 162;
    procedure Select; dispid 235;
    property ApplyPictToSides: WordBool dispid 1659;
    property ApplyPictToFront: WordBool dispid 1660;
    property ApplyPictToEnd: WordBool dispid 1661;
    property Shadow: WordBool dispid 103;
    property SecondaryPlot: WordBool dispid 1662;
    property Fill: ChartFillFormat readonly dispid 1663;
  end;

  Series = dispinterface
    ['{0002086B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey, AutoText, HasLeaderLines: OleVariant); dispid 151;
    property AxisGroup: XlAxisGroup dispid 47;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    procedure Copy; dispid 551;
    function DataLabels(Index: OleVariant): IDispatch; dispid 157;
    procedure Delete; dispid 117;
    procedure ErrorBar(Direction: XlErrorBarDirection; Include: XlErrorBarInclude; Type_: XlErrorBarType; Amount, MinusValues: OleVariant); dispid 152;
    property ErrorBars: ErrorBars readonly dispid 159;
    property Explosion: Integer dispid 182;
    property Formula: WideString dispid 261;
    property FormulaLocal: WideString dispid 263;
    property FormulaR1C1: WideString dispid 264;
    property FormulaR1C1Local: WideString dispid 265;
    property HasDataLabels: WordBool dispid 78;
    property HasErrorBars: WordBool dispid 160;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property InvertIfNegative: WordBool dispid 132;
    property MarkerBackgroundColor: Integer dispid 73;
    property MarkerBackgroundColorIndex: XlColorIndex dispid 74;
    property MarkerForegroundColor: Integer dispid 75;
    property MarkerForegroundColorIndex: XlColorIndex dispid 76;
    property MarkerSize: Integer dispid 231;
    property MarkerStyle: XlMarkerStyle dispid 72;
    property Name: WideString dispid 110;
    procedure Paste; dispid 211;
    property PictureType: XlChartPictureType dispid 161;
    property PictureUnit: Integer dispid 162;
    property PlotOrder: Integer dispid 228;
    function Points(Index: OleVariant): IDispatch; dispid 70;
    procedure Select; dispid 235;
    property Smooth: WordBool dispid 163;
    function Trendlines(Index: OleVariant): IDispatch; dispid 154;
    property Type_: Integer dispid 108;
    property ChartType: XlChartType dispid 1400;
    procedure ApplyCustomType(ChartType: XlChartType); dispid 1401;
    property Values: OleVariant dispid 164;
    property XValues: OleVariant dispid 1111;
    property BubbleSizes: OleVariant dispid 1664;
    property BarShape: XlBarShape dispid 1403;
    property ApplyPictToSides: WordBool dispid 1659;
    property ApplyPictToFront: WordBool dispid 1660;
    property ApplyPictToEnd: WordBool dispid 1661;
    property Has3DEffect: WordBool dispid 1665;
    property Shadow: WordBool dispid 103;
    property HasLeaderLines: WordBool dispid 1394;
    property LeaderLines: LeaderLines readonly dispid 1666;
  end;

  SeriesCollection = dispinterface
    ['{0002086C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Source: OleVariant; Rowcol: XlRowCol; SeriesLabels, CategoryLabels, Replace: OleVariant): Series; dispid 181;
    property Count: Integer readonly dispid 118;
    procedure Extend(Source, Rowcol, CategoryLabels: OleVariant); dispid 227;
    function Item(Index: OleVariant): Series; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
    procedure Paste(Rowcol: XlRowCol; SeriesLabels, CategoryLabels, Replace, NewSeries: OleVariant); dispid 211;
    function NewSeries: Series; dispid 1117;
  end;

  DataLabel = dispinterface
    ['{000208B2-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Caption: WideString dispid 139;
    property Characters[Start, Length: OleVariant]: Characters readonly dispid 603;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Left: Double dispid 127;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property Text: WideString dispid 138;
    property Top: Double dispid 126;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoText: WordBool dispid 135;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLinked: WordBool dispid 194;
    property ShowLegendKey: WordBool dispid 171;
    property Type_: OleVariant dispid 108;
    property Position: XlDataLabelPosition dispid 133;
  end;

  DataLabels = dispinterface
    ['{000208B3-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoText: WordBool dispid 135;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLinked: WordBool dispid 194;
    property ShowLegendKey: WordBool dispid 171;
    property Type_: OleVariant dispid 108;
    property Position: XlDataLabelPosition dispid 133;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): DataLabel; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  LegendEntry = dispinterface
    ['{000208BA-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    property Index: Integer readonly dispid 486;
    property LegendKey: LegendKey readonly dispid 174;
    procedure Select; dispid 235;
    property AutoScaleFont: OleVariant dispid 1525;
    property Left: Double readonly dispid 127;
    property Top: Double readonly dispid 126;
    property Width: Double readonly dispid 122;
    property Height: Double readonly dispid 123;
  end;

  LegendEntries = dispinterface
    ['{000208BB-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): LegendEntry; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  LegendKey = dispinterface
    ['{000208BC-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property InvertIfNegative: WordBool dispid 132;
    property MarkerBackgroundColor: Integer dispid 73;
    property MarkerBackgroundColorIndex: XlColorIndex dispid 74;
    property MarkerForegroundColor: Integer dispid 75;
    property MarkerForegroundColorIndex: XlColorIndex dispid 76;
    property MarkerSize: Integer dispid 231;
    property MarkerStyle: XlMarkerStyle dispid 72;
    property PictureType: Integer dispid 161;
    property PictureUnit: Integer dispid 162;
    procedure Select; dispid 235;
    property Smooth: WordBool dispid 163;
    property Left: Double readonly dispid 127;
    property Top: Double readonly dispid 126;
    property Width: Double readonly dispid 122;
    property Height: Double readonly dispid 123;
    property Shadow: WordBool dispid 103;
  end;

  Trendlines = dispinterface
    ['{000208BD-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Type_: XlTrendlineType; Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name: OleVariant): Trendline; dispid 181;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Trendline; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

  Trendline = dispinterface
    ['{000208BE-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Backward: Integer dispid 185;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property DataLabel: DataLabel readonly dispid 158;
    procedure Delete; dispid 117;
    property DisplayEquation: WordBool dispid 190;
    property DisplayRSquared: WordBool dispid 189;
    property Forward: Integer dispid 191;
    property Index: Integer readonly dispid 486;
    property Intercept: Double dispid 186;
    property InterceptIsAuto: WordBool dispid 187;
    property Name: WideString dispid 110;
    property NameIsAuto: WordBool dispid 188;
    property Order: Integer dispid 192;
    property Period: Integer dispid 184;
    procedure Select; dispid 235;
    property Type_: XlTrendlineType dispid 108;
  end;

  Corners = dispinterface
    ['{000208C0-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
  end;

  SeriesLines = dispinterface
    ['{000208C1-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

  HiLoLines = dispinterface
    ['{000208C2-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

  Gridlines = dispinterface
    ['{000208C3-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

  DropLines = dispinterface
    ['{000208C4-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

  LeaderLines = dispinterface
    ['{00024437-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    procedure Select; dispid 235;
  end;

  UpBars = dispinterface
    ['{000208C5-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
  end;

  DownBars = dispinterface
    ['{000208C6-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
  end;

  Floor = dispinterface
    ['{000208C7-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property PictureType: OleVariant dispid 161;
    procedure Paste; dispid 211;
  end;

  Walls = dispinterface
    ['{000208C8-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property PictureType: OleVariant dispid 161;
    procedure Paste; dispid 211;
    property PictureUnit: OleVariant dispid 162;
  end;

  TickLabels = dispinterface
    ['{000208C9-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    property Name: WideString readonly dispid 110;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLinked: WordBool dispid 194;
    property Orientation: XlTickLabelOrientation dispid 134;
    procedure Select; dispid 235;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

  PlotArea = dispinterface
    ['{000208CB-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property Height: Double dispid 123;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Left: Double dispid 127;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property InsideLeft: Double readonly dispid 1667;
    property InsideTop: Double readonly dispid 1668;
    property InsideWidth: Double readonly dispid 1669;
    property InsideHeight: Double readonly dispid 1670;
  end;

  ChartArea = dispinterface
    ['{000208CC-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Clear; dispid 111;
    procedure ClearContents; dispid 113;
    procedure Copy; dispid 551;
    property Font: Font readonly dispid 146;
    property Shadow: WordBool dispid 103;
    procedure ClearFormats; dispid 112;
    property Height: Double dispid 123;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Left: Double dispid 127;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

  Legend = dispinterface
    ['{000208CD-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    function LegendEntries(Index: OleVariant): IDispatch; dispid 173;
    property Position: XlLegendPosition dispid 133;
    property Shadow: WordBool dispid 103;
    procedure Clear; dispid 111;
    property Height: Double dispid 123;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Left: Double dispid 127;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

  ErrorBars = dispinterface
    ['{000208CE-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    procedure ClearFormats; dispid 112;
    property EndStyle: XlEndStyleCap dispid 1124;
  end;

  DataTable = dispinterface
    ['{00020843-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property ShowLegendKey: WordBool dispid 171;
    property HasBorderHorizontal: WordBool dispid 1671;
    property HasBorderVertical: WordBool dispid 1672;
    property HasBorderOutline: WordBool dispid 1673;
    property Border: Border readonly dispid 128;
    property Font: Font readonly dispid 146;
    procedure Select; dispid 235;
    procedure Delete; dispid 117;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

  Phonetic = dispinterface
    ['{00024438-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Visible: WordBool dispid 558;
    property CharacterType: Integer dispid 1674;
    property Alignment: Integer dispid 453;
    property Font: Font readonly dispid 146;
    property Text: WideString dispid 138;
  end;

  Shape = dispinterface
    ['{00024439-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Apply; dispid 1675;
    procedure Delete; dispid 117;
    function Duplicate: Shape; dispid 1039;
    procedure Flip(FlipCmd: MsoFlipCmd); dispid 1676;
    procedure IncrementLeft(Increment: Single); dispid 1678;
    procedure IncrementRotation(Increment: Single); dispid 1680;
    procedure IncrementTop(Increment: Single); dispid 1681;
    procedure PickUp; dispid 1682;
    procedure RerouteConnections; dispid 1683;
    procedure ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1684;
    procedure ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1688;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SetShapesDefaultProperties; dispid 1689;
    function Ungroup: ShapeRange; dispid 244;
    procedure ZOrder(ZOrderCmd: MsoZOrderCmd); dispid 622;
    property Adjustments: Adjustments readonly dispid 1691;
    property TextFrame: TextFrame readonly dispid 1692;
    property AutoShapeType: MsoAutoShapeType dispid 1693;
    property Callout: CalloutFormat readonly dispid 1694;
    property ConnectionSiteCount: Integer readonly dispid 1695;
    property Connector: MsoTriState readonly dispid 1696;
    property ConnectorFormat: ConnectorFormat readonly dispid 1697;
    property Fill: FillFormat readonly dispid 1663;
    property GroupItems: GroupShapes readonly dispid 1698;
    property Height: Single dispid 123;
    property HorizontalFlip: MsoTriState readonly dispid 1699;
    property Left: Single dispid 127;
    property Line: LineFormat readonly dispid 817;
    property LockAspectRatio: MsoTriState dispid 1700;
    property Name: WideString dispid 110;
    property Nodes: ShapeNodes readonly dispid 1701;
    property Rotation: Single dispid 59;
    property PictureFormat: PictureFormat readonly dispid 1631;
    property Shadow: ShadowFormat readonly dispid 103;
    property TextEffect: TextEffectFormat readonly dispid 1702;
    property ThreeD: ThreeDFormat readonly dispid 1703;
    property Top: Single dispid 126;
    property Type_: MsoShapeType readonly dispid 108;
    property VerticalFlip: MsoTriState readonly dispid 1704;
    property Vertices: OleVariant readonly dispid 621;
    property Visible: MsoTriState dispid 558;
    property Width: Single dispid 122;
    property ZOrderPosition: Integer readonly dispid 1705;
    property Hyperlink: Hyperlink readonly dispid 1706;
    property BlackWhiteMode: MsoBlackWhiteMode dispid 1707;
    property DrawingObject: IDispatch readonly dispid 1708;
    property OnAction: WideString dispid 596;
    property Locked: WordBool dispid 269;
    property TopLeftCell: Range readonly dispid 620;
    property BottomRightCell: Range readonly dispid 615;
    property Placement: XlPlacement dispid 617;
    procedure Copy; dispid 551;
    procedure Cut; dispid 565;
    procedure CopyPicture(Appearance, Format: OleVariant); dispid 213;
    property ControlFormat: ControlFormat readonly dispid 1709;
    property LinkFormat: LinkFormat readonly dispid 1710;
    property OLEFormat: OLEFormat readonly dispid 1711;
    property FormControlType: XlFormControl readonly dispid 1712;
  end;

  Shapes = dispinterface
    ['{0002443A-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Shape; dispid 170;
    function _Default(Index: OleVariant): Shape; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    function AddCallout(Type_: MsoCalloutType; Left, Top, Width, Height: Single): Shape; dispid 1713;
    function AddConnector(Type_: MsoConnectorType; BeginX, BeginY, EndX, EndY: Single): Shape; dispid 1714;
    function AddCurve(SafeArrayOfPoints: OleVariant): Shape; dispid 1719;
    function AddLabel(Orientation: MsoTextOrientation; Left, Top, Width, Height: Single): Shape; dispid 1721;
    function AddLine(BeginX, BeginY, EndX, EndY: Single): Shape; dispid 1722;
    function AddPicture(const Filename: WideString; LinkToFile, SaveWithDocument: MsoTriState; Left, Top, Width, Height: Single): Shape; dispid 1723;
    function AddPolyline(SafeArrayOfPoints: OleVariant): Shape; dispid 1726;
    function AddShape(Type_: MsoAutoShapeType; Left, Top, Width, Height: Single): Shape; dispid 1727;
    function AddTextEffect(PresetTextEffect: MsoPresetTextEffect; const Text, FontName: WideString; FontSize: Single; FontBold, FontItalic: MsoTriState; Left, Top: Single): Shape; dispid 1728;
    function AddTextbox(Orientation: MsoTextOrientation; Left, Top, Width, Height: Single): Shape; dispid 1734;
    function BuildFreeform(EditingType: MsoEditingType; X1, Y1: Single): FreeformBuilder; dispid 1735;
    property Range[Index: OleVariant]: ShapeRange readonly dispid 197;
    procedure SelectAll; dispid 1737;
    function AddFormControl(Type_: XlFormControl; Left, Top, Width, Height: Integer): Shape; dispid 1738;
    function AddOLEObject(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height: OleVariant): Shape; dispid 1739;
  end;

  ShapeRange = dispinterface
    ['{0002443B-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Shape; dispid 170;
    function _Default(Index: OleVariant): Shape; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Align(AlignCmd: MsoAlignCmd; RelativeTo: MsoTriState); dispid 1740;
    procedure Apply; dispid 1675;
    procedure Delete; dispid 117;
    procedure Distribute(DistributeCmd: MsoDistributeCmd; RelativeTo: MsoTriState); dispid 1742;
    function Duplicate: ShapeRange; dispid 1039;
    procedure Flip(FlipCmd: MsoFlipCmd); dispid 1676;
    procedure IncrementLeft(Increment: Single); dispid 1678;
    procedure IncrementRotation(Increment: Single); dispid 1680;
    procedure IncrementTop(Increment: Single); dispid 1681;
    function Group: Shape; dispid 46;
    procedure PickUp; dispid 1682;
    procedure RerouteConnections; dispid 1683;
    function Regroup: Shape; dispid 1744;
    procedure ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1684;
    procedure ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1688;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SetShapesDefaultProperties; dispid 1689;
    function Ungroup: ShapeRange; dispid 244;
    procedure ZOrder(ZOrderCmd: MsoZOrderCmd); dispid 622;
    property Adjustments: Adjustments readonly dispid 1691;
    property TextFrame: TextFrame readonly dispid 1692;
    property AutoShapeType: MsoAutoShapeType dispid 1693;
    property Callout: CalloutFormat readonly dispid 1694;
    property ConnectionSiteCount: Integer readonly dispid 1695;
    property Connector: MsoTriState readonly dispid 1696;
    property ConnectorFormat: ConnectorFormat readonly dispid 1697;
    property Fill: FillFormat readonly dispid 1663;
    property GroupItems: GroupShapes readonly dispid 1698;
    property Height: Single dispid 123;
    property HorizontalFlip: MsoTriState readonly dispid 1699;
    property Left: Single dispid 127;
    property Line: LineFormat readonly dispid 817;
    property LockAspectRatio: MsoTriState dispid 1700;
    property Name: WideString dispid 110;
    property Nodes: ShapeNodes readonly dispid 1701;
    property Rotation: Single dispid 59;
    property PictureFormat: PictureFormat readonly dispid 1631;
    property Shadow: ShadowFormat readonly dispid 103;
    property TextEffect: TextEffectFormat readonly dispid 1702;
    property ThreeD: ThreeDFormat readonly dispid 1703;
    property Top: Single dispid 126;
    property Type_: MsoShapeType readonly dispid 108;
    property VerticalFlip: MsoTriState readonly dispid 1704;
    property Vertices: OleVariant readonly dispid 621;
    property Visible: MsoTriState dispid 558;
    property Width: Single dispid 122;
    property ZOrderPosition: Integer readonly dispid 1705;
    property BlackWhiteMode: MsoBlackWhiteMode dispid 1707;
  end;

  GroupShapes = dispinterface
    ['{0002443C-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Shape; dispid 170;
    function _Default(Index: OleVariant): Shape; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

  TextFrame = dispinterface
    ['{0002443D-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property MarginBottom: Single dispid 1745;
    property MarginLeft: Single dispid 1746;
    property MarginRight: Single dispid 1747;
    property MarginTop: Single dispid 1748;
    property Orientation: MsoTextOrientation dispid 134;
    function Characters(Start, Length: OleVariant): Characters; dispid 603;
    property HorizontalAlignment: XlHAlign dispid 136;
    property VerticalAlignment: XlVAlign dispid 137;
    property AutoSize: WordBool dispid 614;
    property ReadingOrder: Integer dispid 975;
    property AutoMargins: WordBool dispid 1749;
  end;

  ConnectorFormat = dispinterface
    ['{0002443E-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BeginConnect(const ConnectedShape: Shape; ConnectionSite: Integer); dispid 1750;
    procedure BeginDisconnect; dispid 1753;
    procedure EndConnect(const ConnectedShape: Shape; ConnectionSite: Integer); dispid 1754;
    procedure EndDisconnect; dispid 1755;
    property BeginConnected: MsoTriState readonly dispid 1756;
    property BeginConnectedShape: Shape readonly dispid 1757;
    property BeginConnectionSite: Integer readonly dispid 1758;
    property EndConnected: MsoTriState readonly dispid 1759;
    property EndConnectedShape: Shape readonly dispid 1760;
    property EndConnectionSite: Integer readonly dispid 1761;
    property Type_: MsoConnectorType dispid 108;
  end;

  FreeformBuilder = dispinterface
    ['{0002443F-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddNodes(SegmentType: MsoSegmentType; EditingType: MsoEditingType; X1, Y1: Single; X2, Y2, X3, Y3: OleVariant); dispid 1762;
    function ConvertToShape: Shape; dispid 1766;
  end;

  ControlFormat = dispinterface
    ['{00024440-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddItem(const Text: WideString; Index: OleVariant); dispid 851;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    property DropDownLines: Integer dispid 848;
    property Enabled: WordBool dispid 600;
    property LargeChange: Integer dispid 845;
    property LinkedCell: WideString dispid 1058;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListCount: Integer dispid 849;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property LockedText: WordBool dispid 616;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property MultiSelect: Integer dispid 32;
    property PrintObject: WordBool dispid 618;
    property SmallChange: Integer dispid 844;
    property _Default: Integer dispid 0;
    property Value: Integer dispid 6;
  end;

  OLEFormat = dispinterface
    ['{00024441-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property Object_: IDispatch readonly dispid 1049;
    property ProgId: WideString readonly dispid 1523;
    procedure Verb(Verb: OleVariant); dispid 606;
  end;

  LinkFormat = dispinterface
    ['{00024442-0000-0000-C000-000000000046}']
    property Application: Application readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AutoUpdate: WordBool dispid 1048;
    property Locked: WordBool dispid 269;
    procedure Update; dispid 680;
  end;

  IDummy = interface(IDispatch)
    ['{0002442E-0001-0000-C000-000000000046}']
    function _ActiveSheetOrChart: HResult; stdcall;
    function RGB: HResult; stdcall;
    function ChDir: HResult; stdcall;
    function DoScript: HResult; stdcall;
    function DirectObject: HResult; stdcall;
  end;

  CoQueryTable = class
    class function Create: _QueryTable;
    class function CreateRemote(const MachineName: string): _QueryTable;
  end;

  CoApplication = class
    class function Create: _Application;
    class function CreateRemote(const MachineName: string): _Application;
  end;

  CoChart = class
    class function Create: _Chart;
    class function CreateRemote(const MachineName: string): _Chart;
  end;

  CoWorksheet = class
    class function Create: _Worksheet;
    class function CreateRemote(const MachineName: string): _Worksheet;
  end;

  CoGlobal = class
    class function Create: _Global;
    class function CreateRemote(const MachineName: string): _Global;
  end;

  CoWorkbook = class
    class function Create: _Workbook;
    class function CreateRemote(const MachineName: string): _Workbook;
  end;

  CoOLEObject = class
    class function Create: _OLEObject;
    class function CreateRemote(const MachineName: string): _OLEObject;
  end;



implementation

uses ComObj;

class function CoQueryTable.Create: _QueryTable;
begin
  Result := CreateComObject(Class_QueryTable) as _QueryTable;
end;

class function CoQueryTable.CreateRemote(const MachineName: string): _QueryTable;
begin
  Result := CreateRemoteComObject(MachineName, Class_QueryTable) as _QueryTable;
end;

class function CoApplication.Create: _Application;
begin
  Result := CreateComObject(Class_Application) as _Application;
end;

class function CoApplication.CreateRemote(const MachineName: string): _Application;
begin
  Result := CreateRemoteComObject(MachineName, Class_Application) as _Application;
end;

class function CoChart.Create: _Chart;
begin
  Result := CreateComObject(Class_Chart) as _Chart;
end;

class function CoChart.CreateRemote(const MachineName: string): _Chart;
begin
  Result := CreateRemoteComObject(MachineName, Class_Chart) as _Chart;
end;

class function CoWorksheet.Create: _Worksheet;
begin
  Result := CreateComObject(Class_Worksheet) as _Worksheet;
end;

class function CoWorksheet.CreateRemote(const MachineName: string): _Worksheet;
begin
  Result := CreateRemoteComObject(MachineName, Class_Worksheet) as _Worksheet;
end;

class function CoGlobal.Create: _Global;
begin
  Result := CreateComObject(Class_Global) as _Global;
end;

class function CoGlobal.CreateRemote(const MachineName: string): _Global;
begin
  Result := CreateRemoteComObject(MachineName, Class_Global) as _Global;
end;

class function CoWorkbook.Create: _Workbook;
begin
  Result := CreateComObject(Class_Workbook) as _Workbook;
end;

class function CoWorkbook.CreateRemote(const MachineName: string): _Workbook;
begin
  Result := CreateRemoteComObject(MachineName, Class_Workbook) as _Workbook;
end;

class function CoOLEObject.Create: _OLEObject;
begin
  Result := CreateComObject(Class_OLEObject) as _OLEObject;
end;

class function CoOLEObject.CreateRemote(const MachineName: string): _OLEObject;
begin
  Result := CreateRemoteComObject(MachineName, Class_OLEObject) as _OLEObject;
end;


end.
